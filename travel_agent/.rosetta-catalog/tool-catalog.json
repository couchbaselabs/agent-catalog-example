{
  "catalog_schema_version": "0.0.0",
  "embedding_model": "sentence-transformers/all-MiniLM-L12-v2",
  "items": [
  {
    "annotations":
    {
      "ccpa_2019_compliant": "true",
      "gdpr_2016_compliant": "true"
    },
    "description": "Fetch snippets of travel blogs using a user's interests.\n",
    "embedding": [-0.027521444484591484, -0.08420254290103912, -0.03662494570016861, -0.0033154634293168783, 0.06585805118083954, -0.012026743032038212, 0.08438055962324142, 0.0014518920797854662, -0.0551922470331192, 0.04457639530301094, -0.035456325858831406, 0.00603507598862052, -0.04268060252070427, 0.0886862576007843, 0.06689716875553131, -0.008495649322867393, 0.01929435133934021, 0.02741166017949581, 0.008085144683718681, 0.05120274797081947, 0.01378064975142479, 0.005606744904071093, -0.05138358846306801, 0.07883346825838089, 0.019961019977927208, 0.0009710550657473505, -0.10513085871934891, 0.043659504503011703, 0.022486364468932152, 0.03519981727004051, 0.00943815615028143, 0.08187726140022278, -0.0008332279976457357, -0.010346569120883942, 0.09477711468935013, 0.04015650227665901, -0.0004455077869351953, 0.04072071984410286, 0.07406669855117798, 0.062404412776231766, -0.0008168609929271042, -0.05974160507321358, -0.04284338653087616, 0.015750762075185776, -0.01117005106061697, 0.01694306917488575, 0.02217157743871212, 0.011419383808970451, 0.033161453902721405, -0.03051440231502056, -0.11945086717605591, -0.05835704877972603, -0.041304804384708405, -0.057208940386772156, -0.015932301059365273, -0.03043048270046711, -0.050827756524086, -0.06163153424859047, -0.07448253780603409, -0.01197157520800829, -0.001092778518795967, -0.044261280447244644, 0.024386771023273468, 0.04841699078679085, -0.05890461429953575, -0.0049100578762590885, -0.051229625940322876, 0.11117255687713623, 0.05598092079162598, -0.06750446557998657, -0.040715865790843964, 0.03983704373240471, -0.061454664915800095, 0.10014574229717255, 0.035638753324747086, -0.06646065413951874, -0.010543217882514, -0.040431778877973557, -0.07960641384124756, -0.058089479804039, -0.037927694618701935, -0.01036336924880743, 0.015059305354952812, -0.06032479926943779, 0.006813407875597477, -0.03750479221343994, 0.033592090010643005, -0.001586642232723534, 0.02757776901125908, 0.051776301115751266, -0.032898079603910446, -0.10685074329376221, -0.003262158716097474, 0.0060281902551651, 0.0061835311353206635, 0.014935905113816261, -0.04112250730395317, -0.018812313675880432, 0.006630935240536928, 0.07651655375957489, 0.030463632196187973, 0.02922600880265236, 0.10246343165636063, -0.00045610187225975096, -0.023722277954220772, 0.029336778447031975, -0.045814868062734604, 0.030160045251250267, 0.10524174571037292, -0.0347701758146286, 0.0016932713333517313, 0.16445407271385193, 0.035284385085105896, -0.062080226838588715, 0.03251347690820694, -0.10479351878166199, -0.03255593404173851, 0.06007976084947586, 0.04933793470263481, 0.042833831161260605, 0.043509773910045624, -0.06651625037193298, 0.024216335266828537, 0.03495993837714195, -0.0608343668282032, -0.04731907695531845, 0.029894482344388962, -0.010787415318191051, 0.05093803629279137, 0.03042653761804104, 0.060547225177288055, 0.13637836277484894, 0.01152430847287178, 0.037083011120557785, -0.057013027369976044, -0.09921504557132721, -0.050229813903570175, 0.002997976029291749, -0.015392737463116646, 0.10328828543424606, 0.06389869749546051, 0.08103151619434357, -0.07446005195379257, -0.005636298563331366, -0.010525328107178211, 0.020227957516908646, 0.06748122721910477, -0.038597460836172104, -0.014722573570907116, -0.0751936063170433, 0.08237221837043762, -0.1208183690905571, 0.009412460960447788, -0.0270702987909317, 0.022150956094264984, 0.040224336087703705, 0.00527618732303381, 0.06756538152694702, -0.06875155121088028, -0.03301314637064934, -0.09778804332017899, -0.027460025623440742, -0.022594187408685684, 0.03810577839612961, -0.06878963112831116, -0.015273045748472214, -0.0157936904579401, -0.032487060874700546, -0.07603339105844498, -0.08115115016698837, -0.016573961824178696, 0.01151313353329897, -0.05865762010216713, 0.022887123748660088, -0.06914360076189041, 0.1040787324309349, 0.02917459048330784, -0.0078254584223032, 0.03279214724898338, -0.09292664378881454, -0.01395955216139555, -0.06200359761714935, -0.004626705311238766, 0.032173171639442444, 0.00400153873488307, -0.0007606407743878663, 0.024564828723669052, -0.012650864198803902, 0.07022023946046829, 0.08932539820671082, 0.00833873264491558, -0.0465659461915493, 0.09252137690782547, 0.058312058448791504, 0.03838542476296425, -0.009231961332261562, -0.0322730615735054, -0.006163049954921007, 0.009154611267149448, -0.006065576337277889, 0.0473533496260643, -0.0948164165019989, -0.05797753483057022, -0.024136006832122803, -0.016601037234067917, -0.07886329293251038, -0.015156310983002186, 0.06454988569021225, 0.0009581642225384712, -0.023322859779000282, 0.02991008199751377, 0.05512237548828125, 0.04710308834910393, -0.04585961252450943, 0.05991831794381142, -0.07403919845819473, -0.012035075575113297, 0.022013068199157715, 0.03438808023929596, 0.0041335709393024445, -0.013941842131316662, -0.05009794980287552, -0.04464114084839821, 8.278641574908647e-33, -0.012937456369400024, 0.04600953683257103, 0.042048413306474686, 0.005844913888722658, -0.017424728721380234, 0.011639256961643696, 0.035998549312353134, -0.018871791660785675, 0.029431741684675217, 0.016481084749102592, -0.164930060505867, -0.014579798094928265, 0.016078807413578033, 0.07378997653722763, 0.028000103309750557, 0.011279485188424587, 0.07129665464162827, 0.023441048339009285, -0.08282259106636047, 0.12743262946605682, -0.039846841245889664, 0.0391901433467865, -0.10001479834318161, -0.039488885551691055, 0.1053994670510292, 0.03272074833512306, 0.05332339182496071, -0.06859396398067474, 0.005034342408180237, 0.0020413368474692106, 0.03904442861676216, 0.007303520105779171, -0.06368770450353622, 0.01996445655822754, -0.020523106679320335, 0.02586050145328045, -0.03137555718421936, 0.07274466007947922, 0.012693090364336967, 0.058634690940380096, 0.1540287584066391, 0.011551359668374062, 0.019727522507309914, 0.04576200246810913, -0.018757808953523636, 0.014792474918067455, -0.01274678111076355, 0.09542781114578247, 0.07516258955001831, -0.034554727375507355, 0.04044683277606964, 0.006061401218175888, -0.019269553944468498, -0.00922815315425396, 0.01546891313046217, -0.040056031197309494, -0.052546851336956024, -0.05248020216822624, 0.038405995815992355, -0.03833632171154022, -0.08473005890846252, -0.040669601410627365, 0.015072298236191273, -0.014485725201666355, 0.03142252191901207, -0.0802023634314537, 0.0033974801190197468, -0.012084269896149635, -0.06583995372056961, -0.04503355547785759, 0.0688958466053009, -0.01146897953003645, 0.04201209917664528, -0.08331461250782013, 0.07663171738386154, 0.029630068689584732, 0.08497947454452515, 0.08099421858787537, 0.012738893739879131, 0.006762954872101545, 0.023056088015437126, 0.030176328495144844, -0.003221958177164197, -0.06601309776306152, 0.02274954691529274, 0.0201263390481472, -0.05881761759519577, 0.04956948384642601, -0.05322667211294174, -0.0452096126973629, 0.012437338940799236, -0.04483485594391823, 0.0467696487903595, 0.0014000363880768418, -0.01858118548989296, 3.096601829635275e-32, -0.07568458467721939, -0.039744552224874496, -0.03569251298904419, 0.008203994482755661, 0.04193529114127159, -0.018435316160321236, -0.006814748980104923, 0.07750964909791946, 0.029828358441591263, 0.05778556317090988, 0.0031479320023208857, -0.07083258777856827, -0.06100565195083618, 0.0676610916852951, 0.03693794459104538, -0.027513623237609863, 0.08202113211154938, 0.03525238111615181, -0.0045167203061282635, -0.00990327075123787, -0.0022459174506366253, 0.0782603994011879, 0.004251047037541866, -0.09670308977365494, 0.008164781145751476, 0.014618434943258762, -0.041276656091213226, -0.11606989055871964, 0.05837069824337959, -0.017770694568753242, -0.04001039266586304, 0.014853554777801037, -0.02689245715737343, -0.03855817764997482, -0.00021404032304417342, -0.017169110476970673, -0.02903282828629017, -0.04728296399116516, -0.021197276189923286, 0.011407495476305485, 0.02931768074631691, -0.09816662967205048, 0.09483419358730316, -0.03534664213657379, -0.05181266367435455, 0.01154743880033493, -0.03088444471359253, -0.024682482704520226, 0.019671590998768806, -0.010262026451528072, -0.06807663291692734, -0.07139961421489716, 0.09176290780305862, 0.01851263828575611, 0.03397403657436371, -0.060319576412439346, -0.005131248384714127, -0.007699310313910246, 0.0014265432255342603, -0.04062706232070923, 0.0005971064674668014, 0.00754553684964776, -0.054151516407728195, 0.017416248098015785],
    "identifier": "tools/blogs_from_interests.yaml:get_travel_blog_snippets_from_user_interests:git_dc0cb338186d2d99332c584ab7e750461e94e678",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"user_interests\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "name": "get_travel_blog_snippets_from_user_interests",
    "record_kind": "semantic_search",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "tools/blogs_from_interests.yaml",
    "vector_search":
    {
      "bucket": "travel-sample",
      "collection": "article",
      "embedding_model": "sentence-transformers/all-MiniLM-L12-v2",
      "index": "articles-index",
      "scope": "inventory",
      "text_field": "text",
      "vector_field": "vec"
    },
    "version":
    {
      "identifier": "dc0cb338186d2d99332c584ab7e750461e94e678",
      "timestamp": "2024-10-01T09:26:29.616044Z"
    }
  },
  {
    "description": "Find a list of direct routes between two airports using source_airport and destination_airport.\n",
    "embedding": [0.06763264536857605, -0.013151390478014946, -0.06174251809716225, 0.024781031534075737, 0.06794998049736023, 0.03502585366368294, -0.07320229709148407, -0.027989614754915237, -0.021669408306479454, 0.01363323349505663, -0.022702954709529877, -0.07794512808322906, -0.02180541679263115, -0.011490467935800552, 0.024582969024777412, 0.003524932311847806, 0.0216072965413332, 0.06606462597846985, 0.005220609717071056, 0.043391551822423935, 0.07627526670694351, 0.059072934091091156, -0.012614353559911251, 0.05083596333861351, 0.01844709739089012, 0.09019489586353302, -0.051578935235738754, 0.04645613580942154, 0.0843881294131279, 0.013568393886089325, 0.09468254446983337, 0.047309573739767075, -0.0891738012433052, -0.03758294880390167, 0.06745923310518265, 0.020261049270629883, 0.012150485068559647, 0.08826595544815063, 0.03797577694058418, -0.08465302735567093, 0.06550158560276031, -0.0108761852607131, 0.061243318021297455, 0.006654419004917145, -0.0158411655575037, -0.045867688953876495, 0.02101993001997471, 0.04525219649076462, 0.045931532979011536, -0.009764529764652252, -0.004060158506035805, -0.061044879257678986, -0.05857226625084877, 0.040562793612480164, 0.016566051170229912, 0.004620129242539406, 0.039029546082019806, -0.0881979689002037, -0.01877361536026001, -0.08103646337985992, -0.10638919472694397, -0.07763481140136719, -0.008653233759105206, -0.02388855442404747, -0.009603828191757202, 0.07796766608953476, -0.0037707798182964325, -0.0047441101633012295, 0.0036345799453556538, -0.06096402555704117, -0.008458467200398445, 0.06341880559921265, -0.0487871989607811, -0.024654000997543335, -5.368524944060482e-05, -0.07176877558231354, 0.04435557499527931, 0.04291285574436188, -0.054889384657144547, -0.0010926795657724142, -0.008985382504761219, -0.015638580545783043, -0.04674539342522621, 0.04626690223813057, -0.021163612604141235, -0.05201253294944763, -0.03810647875070572, 0.024844275787472725, 0.04759103059768677, -0.07407087832689285, 0.022869786247611046, 0.03229166194796562, -0.014895343221724033, 0.03291826695203781, 0.07488085329532623, -0.03733636438846588, -0.009624972008168697, -0.02081150747835636, 0.07951272279024124, 0.008007790893316269, 0.12472169101238251, 0.024263011291623116, -0.06748460233211517, 0.07699807733297348, -0.02334563434123993, 0.0052191573195159435, 0.009254266507923603, -0.024056686088442802, -0.010119828395545483, 0.03229188919067383, -0.007710319943726063, 0.04652147367596626, -0.01674794778227806, -0.07852005958557129, -0.021815985441207886, 0.0735425353050232, -0.001548344036564231, 0.010127422399818897, -0.003522851737216115, -0.024491526186466217, -0.02398527041077614, -0.09013292193412781, 0.0811084732413292, 0.01918783038854599, -0.03482430800795555, -0.07091580331325531, 0.0018505139742046595, -0.12431494891643524, 0.0593046173453331, -0.00036622938932850957, 0.02441462315618992, 0.03155669942498207, -0.05800757184624672, -0.006432497873902321, -0.07025530934333801, 0.007126991171389818, 0.0008167494088411331, -0.050582122057676315, -0.06007876247167587, 0.03145812079310417, 0.015204841271042824, -0.011897976510226727, 0.012751910835504532, -0.01825173757970333, 0.040751535445451736, 0.00023513654014095664, -0.07612508535385132, -0.057081542909145355, 0.02302042581140995, -0.0013394341804087162, -0.018864773213863373, -0.07707469910383224, 0.14504902064800262, -0.01847677119076252, -0.09021340310573578, 0.0010700769489631057, 0.04484880715608597, 0.03328617662191391, 0.018084244802594185, 0.061872564256191254, 0.04098736122250557, 0.019670292735099792, -0.10910115391016006, 0.0030900186393409967, 0.017862020060420036, 0.06000983715057373, 0.0055800871923565865, 0.03250047564506531, -0.09454049915075302, -0.0022534411400556564, -0.005202092230319977, -0.030163003131747246, -0.013819037936627865, 0.01502638403326273, -0.1009751409292221, -0.01891130581498146, 0.025702184066176414, 0.06280118227005005, -0.030820660293102264, -0.016765862703323364, 0.02277507819235325, -0.04450635239481926, -0.0027046368923038244, -0.05528673157095909, 0.02808000147342682, 0.033482056111097336, 0.07616546005010605, -0.03007473051548004, -0.021687451750040054, 0.04707733169198036, -0.0017690903041511774, 0.02845768816769123, 0.05190218612551689, 0.05958947539329529, -0.017857626080513, -0.021930303424596786, 0.05274943634867668, -0.010216514579951763, -0.040706817060709, -0.03895685449242592, 0.03935503959655762, 0.07593931257724762, -0.002006134018301964, -0.05357632040977478, -0.12719030678272247, -0.06872733682394028, 0.02726053260266781, 0.003583504119887948, -0.041445985436439514, 0.1014699637889862, -0.02370358072221279, 0.03496590629220009, 0.016604218631982803, 0.05744383484125137, -0.01037740521132946, -0.1370362788438797, -0.011039295233786106, -0.06206198409199715, -0.045686714351177216, 0.03444870933890343, -0.12021838128566742, 0.05898955091834068, 0.02354522980749607, -1.4397681642546888e-33, 0.016949091106653214, -0.0031929058022797108, 0.010010479018092155, -0.034558068960905075, 0.0240093395113945, -0.03091689571738243, 0.09165099263191223, -0.03140252083539963, 0.1085924506187439, 0.11945918947458267, -0.0531119629740715, -0.08463672548532486, 0.024210134521126747, 0.04874637722969055, 0.039946138858795166, -0.12226992100477219, 0.028488630428910255, 0.005885415710508823, -0.07411027699708939, 0.044279370456933975, -0.02088395692408085, -0.00373605964705348, -0.09723340719938278, -0.161311537027359, 0.00934904906898737, 0.054221492260694504, 0.01933295652270317, 0.019404513761401176, -0.05855344980955124, -0.003567891661077738, -0.07561861723661423, -0.03108363039791584, 0.040516551584005356, 0.05698937922716141, -0.010431677103042603, 0.09618160128593445, -0.03038679249584675, 0.01824495755136013, 0.04145432636141777, -0.045760925859212875, 0.03395704925060272, 0.02262479066848755, 0.020875100046396255, 0.035992760211229324, 0.05243229120969772, 0.05931553244590759, -0.048463210463523865, -0.061956800520420074, -0.04077139496803284, -0.07177475839853287, 0.11685800552368164, 0.1128995344042778, -0.12051277607679367, -0.023732881993055344, 0.02398676984012127, 0.004312060307711363, -0.014091262593865395, -0.05628379434347153, 0.06260357052087784, -0.005296479910612106, -0.04001462459564209, -0.057930462062358856, 0.03980641067028046, 0.009667271748185158, -0.03407583758234978, -0.015866683796048164, -0.034902602434158325, -0.0016222773119807243, 0.09895563125610352, -0.015933264046907425, -0.034650154411792755, 0.04341341555118561, -0.012420650571584702, 0.1127181276679039, -0.043779924511909485, -0.03785356134176254, 0.023042719811201096, 0.0709785744547844, -0.07293977588415146, 0.004335502162575722, -0.05674262344837189, 0.05468430742621422, -0.005325637757778168, -0.017881732434034348, -0.023136336356401443, 0.12788057327270508, -0.05845487117767334, -0.0038230379577726126, -0.0237239059060812, -0.013992168009281158, -0.03548673167824745, 0.06311319768428802, 0.059188809245824814, -0.026160160079598427, 0.08709210902452469, 3.932485576929434e-32, 0.024036893621087074, 0.05563235655426979, -0.05587148666381836, 0.06887460500001907, -0.0028403233736753464, 0.01822427287697792, -0.01674467884004116, -0.03209459036588669, 0.006706266663968563, 0.008797655813395977, -0.0237533338367939, 0.06868021935224533, -0.08213523030281067, 0.058355722576379776, 0.007726723328232765, 0.049069844186306, -0.049462366849184036, -0.03298058360815048, 0.03947615996003151, -0.04360894113779068, -0.06824011355638504, 0.01364726573228836, -0.0613158717751503, -0.025834543630480766, -0.00767448591068387, 0.04545353725552559, -0.0459812767803669, -0.03339571878314018, 0.03085160255432129, -0.004997094627469778, 0.03584372252225876, -0.021367769688367844, 0.017625125125050545, 0.04601326957345009, -0.0010502311633899808, -0.03128618001937866, -0.0005379264475777745, -0.05960680544376373, 0.0447981134057045, 0.003414621576666832, -0.02065524272620678, 0.012696320191025734, 0.001470891758799553, -0.04064248502254486, 0.037575941532850266, -0.027543557807803154, 0.012708178721368313, -0.11800083518028259, -0.02603442594408989, -0.01567872241139412, 0.0027047295588999987, -0.0009723411058075726, 0.06317832320928574, -0.011437194421887398, 0.007841121405363083, -0.0857158973813057, 0.00496298260986805, -0.06337913125753403, 0.09589883685112, -0.0820717066526413, 0.012481789104640484, 0.10598143935203552, -0.022605258971452713, -0.004976003430783749],
    "identifier": "tools/find_direct_flights.sqlpp:find_direct_routes_between_airports:git_dc0cb338186d2d99332c584ab7e750461e94e678",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"source_airport\": { \"type\": \"string\" },\n    \"destination_airport\": { \"type\": \"string\" }\n  }\n}\n",
    "name": "find_direct_routes_between_airports",
    "output": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"airlines\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"layovers\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"from_airport\": { \"type\": \"string\" },\n      \"to_airport\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "query": "/*\nname: find_direct_routes_between_airports\n\ndescription: >\n    Find a list of direct routes between two airports using source_airport and destination_airport.\n\ninput: >\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"source_airport\": { \"type\": \"string\" },\n        \"destination_airport\": { \"type\": \"string\" }\n      }\n    }\n\noutput: >\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"airlines\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"layovers\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"from_airport\": { \"type\": \"string\" },\n          \"to_airport\": { \"type\": \"string\" }\n        }\n      }\n    }\n\nsecrets:\n    - couchbase:\n        conn_string: CB_CONN_STRING\n        username: CB_USERNAME\n        password: CB_PASSWORD\n*/\n\nFROM   `travel-sample`.inventory.route r\nWHERE  r.sourceairport = $source_airport AND\n       r.destinationairport = $destination_airport\nSELECT VALUE { \"airlines\"     : [ r.airline ],\n               \"layovers\"     : [],\n               \"from_airport\" : r.sourceairport,\n               \"to_airport\"   : r.destinationairport }\nLIMIT  10;\n",
    "record_kind": "sqlpp_query",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "tools/find_direct_flights.sqlpp",
    "version":
    {
      "identifier": "dc0cb338186d2d99332c584ab7e750461e94e678",
      "timestamp": "2024-10-01T09:26:29.566749Z"
    }
  },
  {
    "description": "Find a list of routes between two airports with one layover. The routes always start at source_airport and end at destination_airport.\n",
    "embedding": [0.1396380215883255, -0.00717008113861084, -0.0834602639079094, -0.0027065537869930267, 0.037803951650857925, 0.03421640768647194, -0.0764637291431427, 0.008244074881076813, -0.031016092747449875, 0.009322411380708218, -0.023016398772597313, -0.07046724855899811, -0.021735157817602158, 0.0035239593125879765, -0.0038387274835258722, 0.013238828629255295, -0.015244063921272755, 0.08737513422966003, 0.018248816952109337, 0.027043867856264114, 0.06370620429515839, 0.0456794798374176, -0.02516806125640869, 0.05096469447016716, -0.014494368806481361, 0.10034105181694031, -0.01657308265566826, -0.01253505889326334, 0.07289431989192963, -0.009950115345418453, 0.054616667330265045, 0.03604928031563759, -0.07701794058084488, -0.05948833376169205, 0.06476981192827225, 0.027719082310795784, 0.0024406651500612497, 0.09979942440986633, 0.04406280815601349, -0.06555280089378357, 0.04830913245677948, 0.026693250983953476, 0.0933656319975853, -0.0007054078159853816, -0.021684374660253525, -0.013978737406432629, 0.01718859001994133, 0.006479624193161726, 0.05930494889616966, -0.007406577002257109, 0.03434723615646362, -0.05565446987748146, -0.054900847375392914, 0.059957459568977356, 0.014789793640375137, 0.01264233235269785, 0.07416181266307831, -0.061210956424474716, -0.01626129448413849, -0.028903229162096977, -0.08842159807682037, -0.07795696705579758, -0.02559090591967106, -4.95784443046432e-05, 0.016759557649493217, 0.10432980209589005, 0.007804697845131159, 0.003257219912484288, -0.028114328160881996, -0.036679718643426895, -0.041124437004327774, 0.021950215101242065, -0.07301997393369675, -0.04054363816976547, -0.017100198194384575, -0.04541228711605072, 0.05782896652817726, 0.03797924891114235, -0.03706943988800049, 0.02173229493200779, 0.002097529359161854, -0.010423404164612293, 0.004779353272169828, 0.053523894399404526, -0.04123753309249878, -0.06142009422183037, -0.026746783405542374, 0.05902629345655441, 0.01795332320034504, -0.06457202136516571, 0.03364798054099083, 0.007880455814301968, 0.041190989315509796, 0.045973438769578934, 0.0762443095445633, 0.007297406438738108, 0.030713515356183052, -0.012540742754936218, 0.08051549643278122, 0.024692771956324577, 0.09351356327533722, -0.02551903948187828, 0.02697066403925419, 0.09898249059915543, -0.01271508913487196, 0.018605388700962067, -0.033270932734012604, -0.06026450917124748, 0.013300769031047821, 0.040964167565107346, -0.03733605146408081, 0.02643549256026745, 0.023246489465236664, -0.07458996772766113, -0.0042351954616606236, 0.0654863491654396, 0.01830432377755642, 0.006230163853615522, -0.025446096435189247, -0.023651113733649254, -0.0391448549926281, -0.02382170595228672, 0.06284454464912415, -0.02776337042450905, -0.03276737034320831, -0.06688937544822693, 0.04309086501598358, -0.12734487652778625, 0.06405899673700333, -0.07142578810453415, 0.055891003459692, 0.03481433168053627, -0.05549515783786774, -0.036570437252521515, -0.048433735966682434, -0.020447157323360443, -0.051557380706071854, -0.03801446035504341, -0.07405347377061844, 0.0024547106586396694, -0.05058686062693596, -0.025842053815722466, 0.062425196170806885, -0.057302236557006836, 0.04346126317977905, -0.0024474288802593946, -0.086036317050457, -0.09518522769212723, 0.025874463841319084, -0.041908230632543564, -0.062547966837883, -0.06530269235372543, 0.14357885718345642, -0.009573264047503471, -0.07855559885501862, -0.00897302757948637, 0.017254292964935303, 0.017106113955378532, 0.007091924082487822, 0.1019326001405716, 0.005323235411196947, 0.05509325489401817, -0.12642306089401245, -0.034009844064712524, -0.00800346676260233, 0.060560841113328934, -0.022903915494680405, 0.03116140328347683, -0.06118030473589897, -0.005018600262701511, -0.01126732025295496, -0.025580262765288353, 0.0038581702392548323, 0.016400514170527458, -0.0941130593419075, -0.035830236971378326, 0.03559568524360657, 0.05882660299539566, -0.03128410875797272, -0.06749676167964935, -0.025243399664759636, -0.042552776634693146, -0.004064694978296757, -0.056725602596998215, 0.037539348006248474, -0.0005974844098091125, 0.06269382685422897, -0.020313389599323273, -0.015596622601151466, -0.0011550381314009428, -0.014491274021565914, 0.004165332298725843, 0.07234562933444977, 0.07892189919948578, -0.017263205721974373, 0.0011029334273189306, 0.01167885772883892, -0.027552392333745956, 0.0006809746846556664, -0.06230372563004494, -0.02064366638660431, 0.10238104313611984, -0.013201874680817127, -0.03464542329311371, -0.1363353282213211, -0.02806100994348526, 0.053051769733428955, -0.024681195616722107, -0.029908739030361176, 0.08863348513841629, -0.01154025737196207, 0.009559748694300652, 0.015445108525454998, 0.0733368769288063, -0.04597005248069763, -0.13350538909435272, -0.034342411905527115, -0.060811903327703476, -0.10841485112905502, 0.043020300567150116, -0.10700935125350952, 0.046328745782375336, 0.02584603615105152, 1.3329465844916519e-33, 0.050074297934770584, -0.042761459946632385, -0.021808980032801628, 0.012048665434122086, 0.05624201521277428, -0.029278401285409927, 0.10239419341087341, -0.04838283732533455, 0.08414686471223831, 0.1523665338754654, -0.025796568021178246, -0.07860933989286423, 0.03991829976439476, 0.07205239683389664, -0.0017406926490366459, -0.11511979252099991, 0.04770243912935257, 0.013569904491305351, -0.05308426916599274, 0.020605338737368584, -0.02087552472949028, -0.024769382551312447, -0.1172671839594841, -0.13388577103614807, 0.04313921928405762, 0.05747557058930397, 0.03679311275482178, 0.021753037348389626, -0.04760412126779556, 0.004949852824211121, -0.03872902691364288, -0.07276631146669388, 0.09080410748720169, 0.022231418639421463, -0.03373750299215317, 0.12979064881801605, -0.08018860965967178, 0.023718640208244324, 0.03936072438955307, -0.0075234295800328255, 0.018227046355605125, 0.013694677501916885, 0.050687093287706375, 0.03555568307638168, 0.04697352275252342, 0.02511807158589363, -0.0709168016910553, -0.009003051556646824, -0.025256305932998657, -0.07932154089212418, 0.06739687919616699, 0.10863661766052246, -0.08444880694150925, -0.01188614871352911, 0.05322829261422157, 0.007101844064891338, 0.009171110577881336, -0.006593102123588324, 0.04677146300673485, 0.011751077137887478, -0.03980754315853119, -0.062032550573349, 0.0790722593665123, 0.02050819806754589, -0.008235625922679901, -0.0576372891664505, -0.036181025207042694, 0.030197886750102043, 0.08182501792907715, -0.0033569373190402985, -0.05164995416998863, 0.03459911048412323, -0.05391236022114754, 0.07076973468065262, -0.024328244850039482, -0.04656248912215233, 0.040612347424030304, 0.0029331515543162823, -0.05900907889008522, 0.013017046265304089, -0.07547983527183533, 0.04881100356578827, -0.011318597011268139, -0.03427007049322128, -0.031183524057269096, 0.08382029831409454, -0.04384148493409157, 0.046641651540994644, 0.037284597754478455, 0.016506267711520195, -0.04061543568968773, 0.04007367789745331, 0.035128768533468246, -0.05797233805060387, 0.010081461630761623, 5.739751423716274e-32, 0.050660792738199234, 0.057700783014297485, -0.011035569943487644, 0.01974213682115078, 0.014575055800378323, 0.04314730316400528, 0.03443241864442825, -0.04941805824637413, -0.018662912771105766, -0.02896961197257042, -0.03310363367199898, 0.07120735198259354, -0.04806089401245117, 0.058420438319444656, -0.014841008931398392, 0.023163802921772003, -0.030404986813664436, -0.03075205162167549, -0.004239480011165142, -0.04432425647974014, -0.10029367357492447, -0.020516254007816315, -0.0667833685874939, -0.003699171356856823, 0.001355511136353016, 0.04647348076105118, -0.026929594576358795, -0.026166720315814018, 0.03179199993610382, -0.005925808101892471, 0.042738888412714005, 0.02101607248187065, 0.004562432877719402, 0.022967183962464333, 0.05068215727806091, -0.05836740881204605, 0.029667185619473457, -0.05501493066549301, 0.022937631234526634, 0.012067602016031742, -0.023216523230075836, -0.012862485833466053, -0.005756104830652475, -0.019054558128118515, -0.004101647064089775, -0.013567453250288963, 0.049262356013059616, -0.0818459764122963, 0.002088189125061035, 0.004547484684735537, -0.014179312624037266, -0.005036631599068642, 0.07655830681324005, 0.001175898127257824, 0.024815402925014496, -0.10080649703741074, 0.0002191758103435859, -0.030406642705202103, 0.046130258589982986, -0.10507164150476456, -0.00023346440866589546, 0.09464706480503082, -0.04444347694516182, 0.004432812333106995],
    "identifier": "tools/find_one_layover_flights.sqlpp:find_routes_with_one_layover:git_dc0cb338186d2d99332c584ab7e750461e94e678",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"source_airport\": { \"type\": \"string\" },\n    \"destination_airport\": { \"type\": \"string\" }\n  }\n}\n",
    "name": "find_routes_with_one_layover",
    "output": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"airlines\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"layovers\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"from_airport\": { \"type\": \"string\" },\n      \"to_airport\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "query": "/*\nname: find_routes_with_one_layover\n\ndescription: >\n    Find a list of routes between two airports with one layover.\n    The routes always start at source_airport and end at destination_airport.\n\ninput: >\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"source_airport\": { \"type\": \"string\" },\n        \"destination_airport\": { \"type\": \"string\" }\n      }\n    }\n\noutput: >\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"airlines\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"layovers\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"from_airport\": { \"type\": \"string\" },\n          \"to_airport\": { \"type\": \"string\" }\n        }\n      }\n    }\n\nsecrets:\n    - couchbase:\n        conn_string: CB_CONN_STRING\n        username: CB_USERNAME\n        password: CB_PASSWORD\n*/\n\nFROM  `travel-sample`.inventory.route r1,\n      `travel-sample`.inventory.route r2\nWHERE  r1.sourceairport = $source_airport AND\n       r1.destinationairport = r2.sourceairport AND\n       r2.destinationairport = $destination_airport\nSELECT VALUE { \"airlines\"     : [r1.airline, r2.airline],\n               \"layovers\"     : [r1.destinationairport],\n               \"from_airport\" : r1.sourceairport,\n               \"to_airport\"   : r2.destinationairport }\nLIMIT  10;",
    "record_kind": "sqlpp_query",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "tools/find_one_layover_flights.sqlpp",
    "version":
    {
      "identifier": "dc0cb338186d2d99332c584ab7e750461e94e678",
      "timestamp": "2024-10-01T09:26:29.518592Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Book a flight using the provided ticket information",
    "embedding": [0.07964880764484406, -0.018928134813904762, -0.03423721343278885, 0.04087969660758972, 0.019528895616531372, 0.007520340383052826, 0.12816505134105682, 0.047011107206344604, 0.0016612206818535924, 0.023554373532533646, -0.01706799492239952, 0.01863865740597248, -0.07241134345531464, -0.015392075292766094, -0.004064030013978481, 0.014077767729759216, 0.05484426021575928, 0.006082844454795122, 0.011817185208201408, 0.032555676996707916, 0.016294153407216072, 0.024236125871539116, -0.10591596364974976, 0.08768225461244583, 0.02460390143096447, 0.00842532142996788, 0.026636172086000443, 0.008889399468898773, 0.012042396701872349, -0.0013659483520314097, -0.028945963829755783, 0.06696529686450958, 0.04953616112470627, -0.007986904121935368, 0.0021285959519445896, -0.035613998770713806, -0.07248246669769287, 0.06310911476612091, -0.033650774508714676, -0.05242227762937546, 0.06089279055595398, -0.04390202462673187, -0.01517445594072342, 0.06504575163125992, 0.024981575086712837, 0.0347428135573864, -0.006623835302889347, 0.02338004671037197, 0.012037262320518494, 0.10167750716209412, -0.032375480979681015, -0.006227402947843075, 0.020628146827220917, -0.024457840248942375, 0.0803593322634697, 0.04440919682383537, -0.038535140454769135, -0.10515641421079636, -0.01023316103965044, -0.03387513384222984, -0.04497557878494263, -0.09114998579025269, -0.0063795726746320724, 0.016451258212327957, -0.052693359553813934, 0.03754543140530586, -0.05479910969734192, 0.05478617176413536, 0.027508286759257317, -0.03594018518924713, -0.026382852345705032, 0.10874535888433456, -0.0639149621129036, 0.0024481764994561672, 0.03069448471069336, -0.019944898784160614, -0.011753843165934086, -0.05031245946884155, 0.08277206122875214, 0.01529524102807045, 0.03145517781376839, -0.0115988589823246, 0.019632816314697266, 0.05537066236138344, 0.0247513260692358, 0.01458441186696291, -0.06307465583086014, -0.027157114818692207, 0.056816112250089645, -0.010094981640577316, 0.047662097960710526, -0.08436997979879379, -0.005597311072051525, 0.03166290372610092, -0.09785505384206772, 0.02739490009844303, -0.0020093254279345274, -0.09966198354959488, 0.04427255690097809, 0.06824658066034317, 0.07821102440357208, 0.07123083621263504, 0.0021492941305041313, 0.01759500987827778, 0.0016985830152407289, -0.0574161633849144, 0.04146629571914673, 0.038773201406002045, 0.058933645486831665, -0.045013248920440674, -0.07484118640422821, 0.026087509468197823, -0.0017494871281087399, -0.011575617827475071, -0.03969389945268631, 0.03766465187072754, -0.016423175111413002, 0.08857042342424393, 0.0007244964363053441, -0.1460103839635849, -0.0031033209525048733, -0.09914766252040863, 0.05143743380904198, 0.05193775147199631, -0.05948074162006378, -0.05252041295170784, 0.09039296954870224, -0.06756556779146194, 0.0016742320731282234, 0.007376706227660179, 0.015840718522667885, -0.03291435167193413, -0.05828123167157173, 0.023439733311533928, -0.12406475096940994, 0.021814880892634392, 0.007725051138550043, -0.007560891564935446, -0.08304985612630844, -0.08614331483840942, 0.10590687394142151, 0.013976125046610832, -0.053164124488830566, 0.06271819025278091, 0.001569473068229854, 0.07623541355133057, 0.04078976437449455, -0.021365031599998474, -0.01525783073157072, -0.0019159750081598759, -0.04937305673956871, 0.04435287415981293, 0.022549716755747795, -0.024974698200821877, -0.06444999575614929, 0.03923948481678963, 0.05633820593357086, -0.018756339326500893, 0.04511547461152077, 0.011856711469590664, 0.014521011151373386, -0.09461855888366699, 0.003030421445146203, 0.04636861011385918, -0.009089402854442596, -0.024450339376926422, 0.01019533071666956, 0.01851815916597843, -0.011717886663973331, 0.04134717211127281, -0.0613817423582077, 0.06948478519916534, -0.1031036376953125, -0.007897953502833843, -0.03464801236987114, 0.07252628356218338, 0.0018517504213377833, 0.05424705520272255, 0.0340111218392849, -0.058026272803545, -0.023755298927426338, -0.009022721089422703, -0.027287853881716728, 0.027516283094882965, -0.014237943105399609, -0.04353395849466324, 0.028584491461515427, -0.01529267244040966, -0.005297989584505558, 0.005069497507065535, 0.03095587156713009, -0.018321076408028603, 0.0323038250207901, -0.010913381353020668, 0.03539125248789787, -0.023068098351359367, 0.03723422437906265, -0.09215399622917175, 0.011435220018029213, 0.003108171047642827, -0.0546552948653698, 0.03980855271220207, -0.0372486412525177, 0.0307731032371521, -0.005121974274516106, 0.02438853494822979, -0.07192891091108322, 0.016828589141368866, 0.04402682185173035, 0.10321901738643646, 0.07988739013671875, 0.1111045777797699, 0.0028898261953145266, -0.027094675227999687, 0.09319765120744705, 0.006155073177069426, -0.02544507011771202, -0.04041295498609543, -0.02289518341422081, 0.0005165799520909786, -0.1021217331290245, -0.009356309659779072, 0.03289531543850899, 1.4180324471885192e-33, -0.0542888380587101, -0.04340897873044014, -0.046899814158678055, -0.08285990357398987, -0.005824147257953882, -0.009439598768949509, -0.0083424998447299, -0.12240847200155258, 0.03363526985049248, 0.049185462296009064, -0.05728999897837639, 0.06299988180398941, -0.0013789682416245341, 0.02040710300207138, -0.0075642382726073265, -0.060385990887880325, -0.018397780135273933, -0.006487327627837658, -0.07267403602600098, -0.0020795802120119333, -0.03006926365196705, 0.004339888226240873, -0.10963631421327591, -0.07654475420713425, 0.050999708473682404, 0.024200135841965675, 0.04158279672265053, 0.022635534405708313, -0.024226106703281403, -0.009674075990915298, 0.02045203000307083, -0.06466134637594223, 0.004410143475979567, 0.009705170057713985, -0.059015486389398575, -0.08140535652637482, 0.08108513057231903, 0.11103168874979019, -0.0845056101679802, 0.07095564156770706, -0.03312104940414429, 0.08675476908683777, -0.03290652111172676, 0.030646881088614464, 0.08085745573043823, -0.05017462372779846, 0.03423573076725006, -0.0013929433189332485, 0.05619310215115547, 0.06414144486188889, 0.04464387893676758, 0.023616066202521324, -0.027326280251145363, 0.06010965630412102, -0.012052599340677261, -0.0022531598806381226, -0.01516841258853674, -0.058766577392816544, 0.08404317498207092, -0.03955943137407303, 0.014108916744589806, -0.0813051089644432, 0.09447198361158371, -0.024584922939538956, -0.026491502299904823, 0.029923364520072937, -0.03513151779770851, 0.006369934417307377, -0.01494117733091116, 0.015604577027261257, -0.11056049913167953, -0.041872043162584305, -0.03947502374649048, 0.027909772470593452, 0.044162567704916, 0.008878462947905064, 0.028620416298508644, 0.10030093789100647, -0.021430477499961853, 0.06747014820575714, 0.006156398449093103, -0.01174270361661911, -0.029176514595746994, 0.02374027855694294, 0.04334890469908714, 0.08654502034187317, 0.00984054896980524, -0.05568413808941841, -0.07030946016311646, -0.06579248607158661, -0.050979625433683395, -0.03537115082144737, -0.030670858919620514, -0.07284710556268692, -0.024893272668123245, 3.3284822789191275e-34, -0.0476197823882103, 0.002736486028879881, 0.03604705631732941, 0.03384414315223694, 0.006524118594825268, 0.026372699066996574, -0.0033360093366354704, -0.012681176885962486, -0.06225084140896797, -0.08944921940565109, -0.06458938121795654, -0.003385495161637664, -0.06168466806411743, 0.018351295962929726, 0.010073639452457428, -0.047120437026023865, -0.03859328106045723, -0.02665369026362896, 0.004804999101907015, -0.022272957488894463, 0.040243279188871384, 0.0595502071082592, 0.005112895742058754, 0.013144159689545631, 0.08926770836114883, 0.014693359844386578, -0.04543408751487732, 0.025637108832597733, 0.060379717499017715, 0.04199852794408798, -0.10405222326517105, -9.317712829215452e-05, 0.09813511371612549, 0.03986694663763046, 0.021778324618935585, -0.006264303345233202, -0.04520047456026077, -0.04792947322130203, 0.05035192891955376, 0.09918753057718277, 0.006533753592520952, 0.05279393866658211, -0.04305361211299896, 0.017160573974251747, 0.14707247912883759, -0.07942994683980942, 0.013707953505218029, -0.06787041574716568, 0.013443740084767342, 0.007297547999769449, 0.0033018761314451694, -0.08991078287363052, 0.11881711333990097, 0.027645232155919075, 0.022688860073685646, -0.013549610041081905, -0.07604558765888214, -0.08436269313097, 0.10691287368535995, -0.01278117299079895, -0.02862735092639923, 0.13585355877876282, -0.05579385906457901, 0.027921028435230255],
    "identifier": "tools/python_travel_tools.py:book_flight:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "book_flight",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Calculate the travel costs based on distance, fuel efficiency, and fuel price",
    "embedding": [0.16308048367500305, 0.007964512333273888, -0.10284174978733063, 0.06895145773887634, 0.02659645304083824, -0.03926454856991768, -0.04548756405711174, 0.034332338720560074, -0.08820450305938721, -0.05976756289601326, 0.03350057825446129, -0.04948613420128822, -0.07212576270103455, 0.06723728775978088, -0.012649022042751312, -0.053465526551008224, 0.07916895300149918, -0.007809269707649946, -0.030371878296136856, -0.06065647676587105, 0.07716649025678635, -0.05107724294066429, 0.0041677383705973625, 0.006148310843855143, 0.04723590239882469, 0.12147122621536255, -0.04953527823090553, 0.06134748458862305, 0.0012296544155105948, 0.05231368541717529, 0.0008210629457607865, -0.008366469293832779, -0.009221281856298447, -0.0339730940759182, 0.0962454304099083, 0.0004874620644841343, 0.0043964143842458725, 0.053704168647527695, 0.031323399394750595, 0.04703854024410248, 0.013770746998488903, -0.03886426240205765, -0.0450625978410244, 0.05767819285392761, 0.03279730677604675, -0.04227989912033081, 0.01866118423640728, -0.032203178852796555, 0.06376485526561737, 0.023940453305840492, 0.0009818475227802992, -0.04497583582997322, -0.05882011353969574, -0.06330440193414688, 0.023553302511572838, -0.02346869930624962, -0.028243977576494217, -0.05012909695506096, -0.0017763470532372594, -0.06982827931642532, -0.03404587134718895, -0.04914191737771034, -0.008690500631928444, -0.00343574327416718, -0.023080717772245407, -0.029939867556095123, 0.023447399958968163, 0.036764759570360184, 0.013270587660372257, -0.06958264112472534, -0.08520903438329697, 0.027046626433730125, -0.006713233422487974, -0.11786193400621414, 0.021147271618247032, -0.02349058911204338, 0.011925389058887959, 0.08006247133016586, 0.011473651975393295, -0.03556058555841446, 0.01714017614722252, -0.022887153550982475, -0.12161020934581757, 0.05339289456605911, 0.11869019269943237, -0.06801676750183105, 0.06650703400373459, 0.030224008485674858, -0.08028439432382584, 0.006747853476554155, 0.01073302049189806, 0.0007593384361825883, -0.027929598465561867, -0.0045632789842784405, -0.01946631446480751, 0.025124097242951393, -0.004146615508943796, -0.032843559980392456, 0.056989576667547226, 0.015650663524866104, 0.04908955842256546, -0.006374374032020569, -0.0437483936548233, -0.04368669539690018, -0.0689871609210968, 0.012888134457170963, -0.0073205577209591866, -0.035501379519701004, 0.045050330460071564, -0.020175164565443993, 0.06720847636461258, 0.008103125728666782, -0.03271303325891495, -0.0212943684309721, -0.030616242438554764, 0.032784946262836456, 0.07061411440372467, -0.029865749180316925, 0.02903814986348152, 0.051310643553733826, -0.048355117440223694, -0.09566544741392136, 0.009896015748381615, 0.05082159489393234, -0.06553879380226135, -0.0786580964922905, 0.04544643685221672, -0.004593808203935623, -0.14151355624198914, -0.05882728099822998, 0.07351863384246826, 0.046002112329006195, -0.10644420981407166, 0.013771481812000275, -0.09011996537446976, -0.014128737151622772, 0.007906777784228325, -0.020064687356352806, -0.029788285493850708, 0.036153871566057205, 0.08655591309070587, -0.06340261548757553, 0.09169013053178787, -0.03207474201917648, 0.06779464334249496, 0.01132949162274599, -0.02779858000576496, -0.037995267659425735, -0.03692179173231125, -0.04039602726697922, 0.04058915376663208, -0.09519420564174652, 0.006240908522158861, 0.00767094548791647, -0.016496730968356133, -0.05428941920399666, 0.0339394249022007, -0.010476542636752129, -0.00671624019742012, 0.10989436507225037, -0.05204018950462341, 0.02445019967854023, 0.006624625530093908, 0.02410423383116722, -0.023078491911292076, 0.11318325996398926, -0.00982007198035717, -0.00663630198687315, -0.08831940591335297, -0.0277887973934412, 0.0011791521683335304, 0.030961640179157257, -0.028616851195693016, 0.10427746921777725, 0.059581369161605835, -0.04229704290628433, 0.013345735147595406, 0.07850861549377441, -0.0758150964975357, -0.04692350700497627, 0.028712032362818718, -0.05255521088838577, -0.020823974162340164, -0.017047077417373657, -0.003403659211471677, -0.0344681516289711, -0.003741514403373003, -0.0022404713090509176, -0.08513979613780975, 0.11315323412418365, 0.04311458766460419, -0.0169746782630682, 0.07168829441070557, 0.012694800272583961, -0.025893976911902428, -0.0023865450639277697, 0.023848656564950943, 0.04901745542883873, 0.05283840373158455, -0.055798646062612534, 0.06658023595809937, -0.007671679370105267, 0.07875841856002808, -0.0013745062751695514, -0.01778860203921795, -0.017726147547364235, -0.040550075471401215, -0.01899774745106697, -0.07069481164216995, 0.0749349519610405, 0.010068944655358791, 0.00223360164090991, 0.045656319707632065, 0.016256915405392647, 0.03127812221646309, -0.08627504110336304, -0.04902941361069679, 0.02565983310341835, -0.03417164087295532, -0.008165578357875347, -0.0610680989921093, -0.0783446878194809, -0.046369463205337524, -1.5416658002202226e-33, 0.02697613462805748, 0.06879407912492752, 0.01390486303716898, -0.0011774204904213548, 0.05107385665178299, -0.02123732678592205, 0.04521194100379944, -0.03771612048149109, 0.1431361734867096, 0.08813858032226562, -0.12220430374145508, -0.01570952869951725, 0.01155189797282219, 0.0177377350628376, -0.006506327539682388, -0.029066648334264755, 0.0729898139834404, -0.09187157452106476, -0.08997202664613724, 0.04575568065047264, -0.027646880596876144, 0.02374638430774212, -0.12485266476869583, -0.03112746588885784, -0.0016253789654001594, -0.004685581661760807, 0.03358404338359833, -0.02557358331978321, -0.032256484031677246, 0.029818087816238403, 0.02066875249147415, -0.05815288424491882, 0.027868516743183136, 0.10051298141479492, -0.08261573314666748, 0.028512591496109962, 0.018847070634365082, 0.07507584989070892, 0.04328382387757301, 0.017022861167788506, 0.07205738127231598, -0.03161340951919556, -0.017606213688850403, -0.009645508602261543, 0.08326597511768341, 0.08284343034029007, 0.02150537818670273, -0.04896344989538193, 0.018299322575330734, -0.02849956601858139, 0.07545506209135056, 0.05228916183114052, -0.09798365831375122, 0.04666160047054291, -0.02328168787062168, -0.014308244921267033, 0.009846309199929237, -0.020684024319052696, -0.05021766945719719, 0.01979745924472809, 0.0158468559384346, -0.05014955252408981, 0.06963338702917099, 0.04358546808362007, -0.024844694882631302, 0.019346648827195168, 0.03206106647849083, -0.11333118379116058, 0.07148410379886627, -0.042323727160692215, -0.0469125472009182, 0.021389294415712357, 0.01758957840502262, -0.005013503134250641, -0.014052989892661572, 0.007784712594002485, 0.06862685829401016, 0.0724666491150856, -0.001487955916672945, 0.06517632305622101, -0.04746956750750542, -0.015204177238047123, 0.012390024960041046, -0.005260087549686432, -0.037613898515701294, 0.025416633114218712, -0.05459991842508316, -0.033181384205818176, -0.014406513422727585, 0.07208351045846939, 0.0026004097890108824, 0.015497888438403606, 0.008144373074173927, 0.03160443156957626, -0.016193756833672523, 2.2938092768743203e-32, 0.06223215162754059, -0.024368127807974815, -0.07293223589658737, 0.07886558026075363, -0.03983514383435249, 0.009556352160871029, 0.05961088091135025, 0.10511564463376999, -0.06204303354024887, -0.05445561930537224, 0.05402909964323044, 0.0011583444429561496, -0.02041948214173317, 0.09777077287435532, -0.08499257266521454, 0.024852918460965157, -0.005690316669642925, 0.04579637199640274, 0.0044565703719854355, 0.042100805789232254, -0.011448634788393974, 0.10709448158740997, -0.0496627613902092, 0.005195957608520985, 0.033081647008657455, -0.02414870075881481, -0.0530511774122715, 0.007187042851001024, 0.044890280812978745, -0.07790184766054153, -0.012874357402324677, 0.010929708369076252, -0.051742348819971085, 0.04141658917069435, -0.032940156757831573, -0.014790428802371025, -0.018269861117005348, 0.06550859659910202, -0.006231868173927069, 0.09788940101861954, 0.054770104587078094, 0.03412420302629471, -5.831855014548637e-05, -0.000816069426946342, 0.09060164541006088, 0.005384791176766157, -0.05269921198487282, -0.054062943905591965, -0.051568496972322464, -0.026802511885762215, 0.011226960457861423, -0.0017179957358166575, 0.017183346673846245, 0.034514691680669785, -0.11048203706741333, -0.11054053157567978, -0.004182310309261084, -0.012239414267241955, -0.02217630296945572, -0.018096450716257095, 0.00268358550965786, 0.019323747605085373, -0.022271394729614258, -0.013352076523005962],
    "identifier": "tools/python_travel_tools.py:calculate_travel_costs:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "calculate_travel_costs",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Check if the given AITA code is valid (i.e., represents an airline).",
    "embedding": [0.047999024391174316, -0.007832919247448444, -0.05370232090353966, -0.06574387103319168, -0.013180672191083431, 0.01663028635084629, 0.04521176591515541, -0.04296514019370079, -0.10229282826185226, 0.056518733501434326, 0.0211640615016222, -0.08204244077205658, 0.0033564502373337746, 0.052031148225069046, 0.02566978521645069, 0.02685190737247467, 0.01780630834400654, -0.0339767225086689, -0.02404058165848255, 0.03190702199935913, 0.05717194452881813, 0.06264162063598633, -0.07300321012735367, 0.0033401786349713802, -0.016707073897123337, 0.06733908504247665, 0.04298681765794754, 0.050242580473423004, 0.05209856107831001, 0.0360945425927639, 0.012029962614178658, -0.016112128272652626, 0.040995094925165176, 0.0514201745390892, 0.06873487681150436, -0.019707174971699715, -0.0415288470685482, -0.037985917180776596, 0.059530314058065414, -0.035814590752124786, -0.036844559013843536, -0.0684104785323143, -0.049933407455682755, -0.004137536510825157, 0.013494398444890976, 0.06603845953941345, 0.004600647371262312, 0.032433368265628815, 0.02976072020828724, 0.03474424034357071, 0.019125960767269135, -0.030311061069369316, -0.0033212255220860243, 0.016493147239089012, 0.02387537807226181, -0.05996118113398552, 0.03824072331190109, 0.006255222950130701, -0.008964142762124538, -0.022245028987526894, 0.022641222923994064, -0.034514207392930984, -0.03684119135141373, 0.04600200057029724, 0.046353936195373535, 0.0363457016646862, -0.03375152498483658, -0.026902824640274048, 0.04436223581433296, -0.1585141122341156, 0.013988805934786797, -0.01422758586704731, -0.07133692502975464, 0.10233163833618164, 0.04081729054450989, 0.09919894486665726, 0.009821276180446148, 0.05957547575235367, 0.02550572156906128, -0.0058963182382285595, -0.02695365622639656, -0.018116561695933342, -0.01402664091438055, 0.06282578408718109, 0.04975995048880577, -0.0024743382818996906, -0.06811987608671188, 0.0016159468796104193, 0.04696023836731911, -0.058632269501686096, 0.028161190450191498, -0.005683987867087126, 0.012719528749585152, 0.05769743397831917, 0.024852465838193893, 0.08090551197528839, -0.044670529663562775, -0.027775581926107407, -0.013536613434553146, 0.058032967150211334, 0.0683290958404541, 0.052552659064531326, -0.021618446335196495, 0.0016726868925616145, -0.05409553274512291, 0.06583733856678009, 0.13801203668117523, -0.06560293585062027, 0.054033275693655014, -0.061298489570617676, -0.02343541383743286, 0.05524501949548721, 0.09789536893367767, -0.06084965541958809, -0.018088284879922867, 0.08535920828580856, 0.035169053822755814, 0.032290685921907425, -0.016307758167386055, 0.0055145155638456345, 0.004147532396018505, -0.10353114455938339, 0.028331220149993896, 0.038682710379362106, 0.006783017888665199, -0.09877892583608627, 0.02299320325255394, -0.05081848055124283, 0.005877794232219458, -0.01891322247684002, 0.016730545088648796, 0.019775431603193283, -0.023952504619956017, -0.029195837676525116, -0.13211557269096375, 0.05229922756552696, -0.0013836132129654288, 0.018350139260292053, -0.06159992143511772, -0.057378217577934265, 0.01327754370868206, -0.06530364602804184, 0.016249878332018852, 0.020019102841615677, -0.012342547066509724, -0.03278229013085365, -0.015459428541362286, 0.037069354206323624, 0.039024610072374344, -0.06480307877063751, 0.14037226140499115, -0.0342162624001503, 0.04529617726802826, 0.04353083297610283, -0.05075233429670334, 0.0552360974252224, 0.050207626074552536, 0.04272465407848358, 0.006037890911102295, 0.004524994641542435, 0.014574579894542694, -0.04891623929142952, 0.012460731901228428, 0.027843337506055832, 0.01068970374763012, 0.037833333015441895, -0.03633810207247734, 0.019026147201657295, -0.023315435275435448, 0.04017958790063858, -0.045227110385894775, 0.016205504536628723, -0.024425115436315536, -0.009209156967699528, 0.002139175310730934, -0.0069560157135128975, 0.10131371021270752, 0.07355932146310806, -0.030238695442676544, 0.027664856985211372, -0.034428708255290985, -0.08088913559913635, -0.054522741585969925, -0.06909790635108948, 0.001573211164213717, 0.03774018585681915, 0.0547066368162632, -0.03988301753997803, 0.004751821979880333, -0.05970821902155876, 0.011360532604157925, 0.05835483968257904, 0.0025086880195885897, 0.03825284540653229, 0.006846981588751078, -0.1088627427816391, 0.012313928455114365, -0.03633277118206024, -0.003757856087759137, -0.00546327605843544, -0.03390330448746681, 0.06257600337266922, -0.026928385719656944, -0.02891053445637226, -0.002960693556815386, 0.009061344899237156, -0.004102401435375214, -0.056285176426172256, -0.017547335475683212, 0.029358604922890663, 0.02423294447362423, 0.0762839987874031, 0.02268391288816929, -0.015472575090825558, 0.07576937228441238, -0.002758491551503539, 0.03756902739405632, -0.05159037932753563, 0.007907910272479057, -0.0918230265378952, -0.06407760828733444, -0.11798684298992157, 0.020462898537516594, 1.4382174851678626e-32, -0.006098109297454357, -0.0005462224944494665, -0.005702025257050991, -0.008819973096251488, 0.020968874916434288, -0.060039617121219635, 0.039259448647499084, -0.01091098040342331, 0.03476594761013985, 0.013943537138402462, 0.04978209733963013, 0.07267764210700989, -0.049084700644016266, -0.010170207358896732, 0.05454259738326073, -0.09209473431110382, -0.042402226477861404, 0.01694280467927456, 0.04769741743803024, 0.07126586884260178, -0.006378847174346447, 0.049267880618572235, 0.04756373539566994, -0.005008351523429155, -0.02416366897523403, 0.005162134300917387, -0.08717459440231323, -0.028605839237570763, -0.002105245366692543, -0.025356397032737732, 0.02972252108156681, 0.04140734300017357, 0.011395495384931564, 0.16809098422527313, -0.02998812310397625, -0.05952376872301102, 0.07818838208913803, 0.0018430057680234313, -0.009307282976806164, 0.013098310679197311, -0.009306407533586025, 0.09519246965646744, -0.11023618280887604, 0.07415460050106049, 0.014001003466546535, -0.07474245876073837, 0.043984171003103256, 0.0020880838856101036, -0.0026266241911798716, -0.08290673047304153, -0.04374781623482704, -0.05123266577720642, 0.0842776894569397, -0.01955377496778965, 0.059204019606113434, 0.1684253066778183, -0.006893227342516184, -0.015608776360750198, 0.023032018914818764, 0.0012722540413960814, -0.010658364742994308, -0.06009988486766815, 0.028672363609075546, -0.012942664325237274, -0.014077735133469105, -0.06317687034606934, 0.039503298699855804, 0.04598182812333107, 0.02971825562417507, 0.03626062348484993, 0.08092250674962997, -0.01408136822283268, -0.13517451286315918, 0.031466759741306305, -0.05013462156057358, -0.06373521685600281, 0.012718797661364079, 0.002085902960970998, -0.044451579451560974, -0.018110118806362152, -0.07410139590501785, 0.0019400044111534953, -0.07109161466360092, 0.010924388654530048, 0.05116891488432884, 0.018862539902329445, 0.011621039360761642, 0.01614031381905079, -0.07749280333518982, 0.022324316203594208, 0.015902576968073845, 0.08265548199415207, -0.025811584666371346, -0.05075469985604286, -0.027376538142561913, 3.621678993100267e-32, 0.00749691016972065, -0.01913296990096569, -0.044144436717033386, 0.04989296570420265, 0.006927316077053547, -0.03255944326519966, -0.06938429921865463, -0.17849759757518768, -0.1449236422777176, -0.09243127703666687, -0.047899045050144196, 0.0854787826538086, -0.08119840919971466, -0.03035285882651806, -0.018759174272418022, 0.03262202814221382, -0.038788653910160065, -0.0003822014550678432, -0.04541078582406044, 0.008347280323505402, 0.0075279464945197105, 0.02314494177699089, -0.03090091608464718, -0.03192833438515663, -0.042978353798389435, -0.008851299993693829, -0.017396554350852966, -0.007862012833356857, 0.06477668881416321, 0.015835877507925034, -0.05998493731021881, 0.03883040323853493, 0.08028257638216019, -0.03054986149072647, -0.05752789229154587, -0.002412304747849703, 0.13635195791721344, 0.002058999612927437, 0.011513936333358288, -0.003402149537578225, 0.03962961211800575, 0.006779174320399761, -0.07836564630270004, -0.02537873201072216, 0.14677973091602325, -0.023707188665866852, 0.028462739661335945, -0.07996159046888351, 0.020988943055272102, -0.062261831015348434, -0.0019723393488675356, -0.041894298046827316, 0.07513539493083954, 0.05070234090089798, -0.013867342844605446, -0.023869642987847328, -0.06280820816755295, -0.08954089134931564, 0.014969551004469395, -0.005684498697519302, 0.08150646835565567, 0.0806911513209343, -0.03590245544910431, -0.02795121632516384],
    "identifier": "tools/python_travel_tools.py:check_if_airport_exists:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "check_if_airport_exists",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Check travel restrictions for a specific country",
    "embedding": [0.05784578248858452, -0.03992399945855141, -0.03408869728446007, -0.052321840077638626, 0.09741562604904175, -0.01938711293041706, 0.094772107899189, -0.01057362649589777, -0.08482971787452698, 0.06823786348104477, 0.006141656078398228, -0.022358164191246033, -0.02523634396493435, 0.04329489916563034, -0.024506522342562675, -0.0910910964012146, 0.009827437810599804, 0.06010516360402107, -0.003825973253697157, -0.028006453067064285, 0.056308526545763016, 0.01778813824057579, -0.044707320630550385, 0.04288388043642044, -0.0023069833405315876, 0.1424197256565094, 0.026640048250555992, 0.01020143460482359, 0.021042784675955772, 0.04960383474826813, 0.005188629496842623, -0.045810259878635406, -0.08266700804233551, -0.03266306221485138, 0.08756197988986969, -0.030675040557980537, -0.033694371581077576, -0.01591048575937748, 0.02070484310388565, 0.05523465946316719, 0.08667218685150146, -0.05276479944586754, 0.05037560686469078, -0.032019518315792084, -0.011790268123149872, 0.02303866483271122, 0.10409446060657501, -0.01830870471894741, 0.007284867577254772, 0.024089060723781586, 0.033668339252471924, 0.01157911866903305, -0.0004959144862368703, -0.07849803566932678, 0.04665370658040047, -0.1554805487394333, -0.035331841558218, -0.029330816119909286, -0.037082985043525696, -0.041078004986047745, 0.0010710747446864843, -0.03823887184262276, -0.010459380224347115, -0.004286070819944143, -0.02710471674799919, 0.0919608622789383, 0.023212235420942307, 0.02669498696923256, 0.04168881103396416, -0.03045881912112236, -0.04344077780842781, 0.07060219347476959, -0.05942331999540329, 0.06479749828577042, 0.02686760202050209, 0.0036249321419745684, -0.014220910146832466, 0.06956522911787033, 0.00910260435193777, -0.041348397731781006, -0.0027775359340012074, -0.004891134332865477, 0.02954881824553013, -0.05692756921052933, 0.02363256923854351, -0.042245954275131226, -0.016603412106633186, 0.04444223269820213, 0.012515298090875149, 0.0019681372214108706, 0.017409369349479675, 0.009503624401986599, -0.013788892887532711, 0.08392716199159622, -0.05752761289477348, -0.025281883776187897, 0.023328956216573715, -0.027158226817846298, 0.01299027819186449, 0.043642010539770126, 0.0735541507601738, -0.014316488057374954, 0.017407899722456932, 0.05695856362581253, -0.03894314169883728, 0.06402163952589035, 0.03537917882204056, 0.04556737095117569, 0.02973431907594204, -0.006789670791476965, -0.012206269428133965, 0.07929831743240356, 0.0331551767885685, -0.03698427602648735, -0.05842452123761177, -0.05421622097492218, -0.006830197758972645, -0.006660487502813339, 0.018636465072631836, -0.013382011093199253, 0.01813126727938652, -0.07289769500494003, 0.03218218684196472, -0.041985176503658295, 0.030501343309879303, 0.01922030933201313, 0.021627308800816536, -0.010067314840853214, 0.05347878858447075, -0.012154060415923595, 0.03137562423944473, 0.05993477255105972, -0.04849116504192352, 0.05005619302392006, -0.08296655863523483, -0.027417588979005814, -0.04899837449193001, 0.004886701703071594, -0.06327614933252335, -0.01071513444185257, 0.010740712285041809, -0.050444405525922775, 0.09768713265657425, -0.02168947458267212, 0.09206429868936539, -0.04780667647719383, -0.03327199071645737, 0.0940634235739708, 0.02288774773478508, -0.09313647449016571, 0.04345240816473961, -0.0058320569805800915, 0.033067137002944946, -0.011470290832221508, -0.034052759408950806, -0.0381653867661953, 0.08353406935930252, 0.05464303120970726, -0.01899012364447117, 0.0572136752307415, 0.03716783970594406, -0.06337080150842667, 0.02346833422780037, 0.009512364864349365, -0.08509591221809387, 0.08058685064315796, -0.051390353590250015, -0.03238825127482414, -0.08590248972177505, -0.04768425226211548, -0.04683656245470047, 0.07844796776771545, -0.021022429689764977, 0.01666950434446335, -0.0358937606215477, 0.014573724009096622, -0.028538033366203308, 0.09637954831123352, -0.10789520293474197, 0.011405902914702892, -0.030144909396767616, -0.13955815136432648, 0.01679518073797226, -0.003677050583064556, -0.03586126118898392, 0.03160136938095093, 0.05230816826224327, -0.09911712259054184, 0.0815177857875824, 0.03816186264157295, 0.003933343570679426, -0.015019169077277184, 0.05205300450325012, 0.043387334793806076, 0.03939766064286232, 0.005206122528761625, -0.04973969981074333, -0.003665437689051032, 0.012854357250034809, -0.010501530021429062, 0.034559011459350586, 0.04593958705663681, -0.04866920784115791, 0.040136516094207764, -0.012174048461019993, 0.024026717990636826, -0.008615662343800068, -0.07839341461658478, -0.05233548954129219, 0.07641976326704025, 0.06440499424934387, 0.03950762003660202, 0.041604552417993546, -0.08241092413663864, -0.04945105314254761, 0.02802308276295662, 0.06283238530158997, -0.0588337779045105, -0.021096674725413322, -0.024312805384397507, -0.05842428281903267, -0.054903317242860794, -0.05380990356206894, 7.165324997773104e-33, -0.0175859984010458, -0.03974955156445503, 0.04256059601902962, -0.04938724264502525, 0.09959244728088379, -0.05200325325131416, 0.07112155854701996, -0.004836925305426121, 0.07796058058738708, 0.0015349697787314653, 0.023830674588680267, -0.0637659877538681, 0.10575776547193527, 0.01834181323647499, -0.026233594864606857, -0.012434697709977627, -0.05202239751815796, -0.042280763387680054, -0.031432487070560455, 0.08400808274745941, -0.05402205139398575, -0.025741001591086388, -0.0612126849591732, -0.04157078638672829, -0.006084892433136702, 0.012005974538624287, -0.06830838322639465, -0.06472082436084747, -0.04100818559527397, 0.003565841121599078, 0.03817267715930939, 0.05633413791656494, -0.07840915024280548, 0.08459145575761795, -0.060401320457458496, -0.0993296429514885, -0.026902373880147934, 0.11646656692028046, 0.06210067495703697, 0.11840202659368515, 0.029750192537903786, 0.050396498292684555, 0.04571910575032234, 0.10150256752967834, -0.02789207547903061, 0.05375724658370018, 0.07932167500257492, 0.036249056458473206, -0.00014408546849153936, -0.0853177160024643, 0.04420781880617142, 0.011130849830806255, 0.10341775417327881, 0.0418611504137516, 0.010284271091222763, 0.021820122376084328, -0.014909590594470501, -0.0929298847913742, 0.0289235170930624, -0.051255032420158386, -0.10138207674026489, -0.07877793908119202, -0.021999234333634377, -0.08663814514875412, -0.02808462642133236, 0.04499918594956398, 0.046703778207302094, -0.03364592790603638, 0.08027851581573486, -0.019323529675602913, 0.04692015051841736, -0.03723486512899399, -0.09222553670406342, 0.05613524094223976, 0.041238654404878616, 0.051545385271310806, 0.08986251056194305, 0.0730087086558342, -0.0437663234770298, 0.04411405324935913, 0.024415643885731697, 0.04862484335899353, -0.09360267966985703, 0.006239874288439751, 0.002833649516105652, 0.03849250078201294, -0.037933602929115295, -0.013514311984181404, 0.056234702467918396, -0.007180565036833286, -0.13874933123588562, 0.015144153498113155, -0.009914982132613659, -0.025661200284957886, 0.01126445084810257, 4.635321363467757e-33, 0.023270074278116226, 0.003976381849497557, -0.027066245675086975, 0.0642586424946785, -0.015963949263095856, 0.024306636303663254, -0.017365528270602226, -0.06483612954616547, -0.05674782767891884, 0.010653465054929256, -0.02658747136592865, 0.03404827043414116, -0.043986666947603226, -0.00428040511906147, -0.015960846096277237, 0.03475328907370567, 0.04147576168179512, 0.017522770911455154, -0.019213326275348663, -0.00577956810593605, -0.011331134475767612, 0.03265754505991936, -0.027638493105769157, 0.037005022168159485, 0.045196495950222015, -0.004150013439357281, -0.07497991621494293, -0.005335185211151838, 0.004280667752027512, -0.047663990408182144, -0.03634112328290939, -0.019836295396089554, -0.03448281064629555, -0.07027546316385269, -0.0032863374799489975, -0.09474856406450272, -0.08992655575275421, -0.03892571106553078, -0.08864153176546097, 0.033607594668865204, 0.050782982259988785, 0.06308527290821075, 0.10058244317770004, 0.015608050860464573, 0.03537365421652794, -0.10493375360965729, 0.04182359203696251, -0.016949979588389397, -0.028508435934782028, 0.03246499225497246, -0.00868306029587984, 0.02892395295202732, 0.09577161818742752, 0.06805366277694702, -0.027601292356848717, 0.03912627696990967, 0.05688998103141785, -0.07778146117925644, -0.04704510420560837, -0.025015270337462425, -0.02994895912706852, 0.0023506544530391693, -0.040071066468954086, 0.013842077925801277],
    "identifier": "tools/python_travel_tools.py:check_travel_restrictions:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "check_travel_restrictions",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Create a packing checklist.",
    "embedding": [-0.00098853325471282, -0.00710658123716712, -0.012291490100324154, -0.006053275428712368, 0.051758456975221634, 0.009433617815375328, -0.0033516748808324337, 0.04129369184374809, -0.08263346552848816, -0.04434908926486969, -0.03621142357587814, -0.06170761585235596, 0.007265598047524691, -0.015190055593848228, 0.023370668292045593, -0.07427825778722763, -0.0018134732963517308, -0.04563918337225914, 0.003501685569062829, -0.08746987581253052, 0.047691259533166885, -0.05931587144732475, 0.03694775700569153, -0.07242324203252792, 0.04788580909371376, 0.03949182853102684, 0.024554286152124405, -0.017814645543694496, 0.005401347763836384, -0.023285027593374252, -0.020878972485661507, 0.008361954241991043, 0.05677354335784912, -0.0033490117639303207, -0.011483578011393547, 0.046911612153053284, 0.07912205904722214, 0.03868148848414421, -0.006174963433295488, -0.051740337163209915, 0.010516085661947727, 0.03665518760681152, 0.06683187931776047, 0.005001876037567854, -0.03325921297073364, -0.05467335134744644, 0.05777586251497269, 0.05585036054253578, 0.05235546454787254, 0.034160763025283813, 0.020149249583482742, -0.003964490722864866, -0.08352889865636826, -0.03228606656193733, -0.029844224452972412, -0.08865769952535629, 0.04448030889034271, -0.053739700466394424, -0.047712620347738266, -0.013879415579140186, 0.01197824813425541, -0.06715316325426102, 0.011641791090369225, 0.06024128943681717, 0.057402633130550385, 0.06635119765996933, -0.02968166582286358, 0.030292578041553497, -0.02806081250309944, 0.028137866407632828, -0.02399216778576374, 0.06368595361709595, -0.058709099888801575, 0.08827429264783859, 0.02871578186750412, 0.012960890308022499, 0.04735029116272926, 0.023272110149264336, -0.042768314480781555, 0.0646129846572876, -0.16631829738616943, 0.027461998164653778, 0.012288051657378674, 0.005135783459991217, -0.006385116372257471, -0.04372815042734146, 0.014845926314592361, 0.031805619597435, -0.017837347462773323, -0.020861297845840454, 0.05691500008106232, 0.00637499475851655, 0.047676268965005875, -0.010011694394052029, -0.06765665113925934, 0.058400411158800125, -0.031264983117580414, -0.07027054578065872, -0.03063751757144928, 0.08623459190130234, 0.0037872744724154472, -0.05541681870818138, 0.06001998484134674, -0.001664098585024476, -0.07342132925987244, -0.0002814532781485468, 0.015293610282242298, -0.04267823323607445, 0.01533771026879549, 0.013925322331488132, -0.021351680159568787, 0.08413492143154144, 0.005276573821902275, 0.0038085258565843105, -0.05114714801311493, 0.03405851498246193, 0.013105766847729683, 0.09833808243274689, 0.02510908804833889, 0.04951844364404678, 0.0346086248755455, -0.0016104966634884477, 0.052432749420404434, -0.018263692036271095, -0.008170555345714092, -0.0435805581510067, -0.008359257131814957, -0.05668305233120918, 0.024944869801402092, 0.0046943603083491325, -0.0736701488494873, 0.09810139983892441, 0.07242841273546219, -0.09374404698610306, -0.02539766952395439, 0.020182278007268906, 0.02096976526081562, 0.04192575439810753, 0.03538331389427185, 0.005580272525548935, -0.0010318616405129433, 0.0382683128118515, 0.03652200102806091, -0.04804052412509918, 0.06988628953695297, 0.04570550099015236, 0.020976271480321884, -0.02031179703772068, -0.01719074696302414, -0.12787634134292603, 0.0003700445522554219, -0.09130904078483582, 0.07045482099056244, 0.013008437119424343, -0.04817105829715729, 0.05320969223976135, 0.14162765443325043, -0.025127282366156578, 0.028483834117650986, 0.02801627106964588, 0.09969159215688705, 0.04722357168793678, -0.035881929099559784, 0.03555125743150711, -0.07937632501125336, 0.013912648893892765, 0.036303453147411346, -0.00825769454240799, 0.007816383615136147, -0.04608297348022461, 0.10051499307155609, 0.045749399811029434, 0.0179193876683712, 0.08758018910884857, -0.026508288457989693, 0.0445176437497139, -0.0027371214237064123, 0.07327811419963837, -0.043034058064222336, -0.029271109029650688, -0.026269180700182915, -0.050137877464294434, -0.11454224586486816, -0.06335482001304626, 0.09915343672037125, -0.1208181083202362, 0.003935554530471563, -0.10678922384977341, 0.09438374638557434, 0.04751349613070488, -0.011858181096613407, 0.09129185229539871, 0.033357173204422, 0.02544056624174118, 0.01266656257212162, -0.028855083510279655, 0.06014998257160187, 0.008789618499577045, -0.04189113527536392, 0.052855852991342545, -0.04814057797193527, -0.00019113798043690622, -0.03850940242409706, -0.05950877442955971, -0.011556971818208694, 0.028302548453211784, 0.0008196054259315133, -0.10896329581737518, 0.020058754831552505, -0.01931115984916687, -0.017480503767728806, 0.021518852561712265, 0.028912320733070374, -0.07014191895723343, 0.046482153236866, 0.03331824019551277, 0.03862183913588524, -0.0076212529093027115, -0.048935793340206146, -0.07861076295375824, 0.06523583829402924, -0.11905990540981293, -0.055737029761075974, 8.109686302497021e-33, 0.06017201766371727, 0.02206840179860592, 0.054271262139081955, -0.012904537841677666, 0.10748761147260666, -0.04765484109520912, 0.03137550130486488, -0.038982536643743515, 0.06451400369405746, 0.041781581938266754, -0.10391981899738312, 0.02498839981853962, 0.04101315140724182, 0.011149035766720772, -0.03449604660272598, -0.02538156509399414, -0.05752110108733177, -0.005817744880914688, 0.062133848667144775, -0.00890628807246685, -0.01703694649040699, 0.01366736926138401, -0.010119052603840828, 0.13470987975597382, -0.051198601722717285, 0.022559812292456627, -0.032482463866472244, -0.0562623105943203, 0.036523547023534775, 0.024615606293082237, -0.017489951103925705, -0.09621316194534302, -0.05394899845123291, 0.00540156802162528, 0.05395006760954857, -0.10381610691547394, 0.10874353349208832, 0.03054210916161537, 0.058368980884552, -0.010809666477143764, -0.010821020230650902, -0.047988925129175186, -0.07685006409883499, 0.11533156782388687, -0.02340889722108841, -0.09151498973369598, 0.06544894725084305, -0.00087170914048329, -0.026884770020842552, -0.05498877912759781, -0.058662381023168564, 0.06604425609111786, -0.02598135732114315, -0.05740775913000107, -0.0343833789229393, 0.0938073992729187, -0.07354990392923355, -0.009669083170592785, 0.0609014518558979, -0.020615138113498688, -0.03535453975200653, 0.0188063383102417, 0.033136095851659775, -0.01762513816356659, 0.02340005151927471, -0.06737727671861649, -0.002761604730039835, -0.03717724606394768, 0.0012174457078799605, -0.009497806429862976, -0.06256206333637238, -0.010722283273935318, -0.02601059339940548, 0.018169483169913292, -0.04705719277262688, -0.0161332618445158, -0.0204867422580719, -0.01707540638744831, 0.042929939925670624, 0.05353175848722458, 0.0014660023152828217, -0.06089114770293236, 0.04566415771842003, 0.04971538111567497, 0.03355662152171135, 0.012962089851498604, 0.01206129975616932, 0.012607823126018047, 0.018790628761053085, 0.042706459760665894, -0.011964201927185059, -0.055241864174604416, 0.13511666655540466, -0.04192226007580757, 0.028759576380252838, 1.7497079128356204e-32, -0.038066137582063675, -0.026078451424837112, 0.03273272141814232, 0.03620848059654236, -0.022424766793847084, -0.02052079327404499, 0.09479635208845139, 0.0016762776067480445, -0.04764483869075775, -0.03764567896723747, -0.0026631609071046114, 0.01025176141411066, -0.06234954670071602, 0.054227616637945175, -0.043277379125356674, 0.02002447284758091, 0.014229864813387394, 0.0674135833978653, -0.09305770695209503, -0.05697961151599884, 0.006663720589131117, 0.07710076123476028, 0.02834753692150116, 0.04682477191090584, 0.04107102006673813, -0.03338199481368065, -0.12317773699760437, -0.05701828747987747, 0.055421166121959686, -0.007059019524604082, 0.02243930846452713, 0.03906163573265076, 0.05618882551789284, -0.04770534858107567, 0.05191124230623245, -0.06096068397164345, -0.06980343163013458, 0.05301304906606674, -0.038268230855464935, -0.0284145325422287, -0.06070218235254288, -0.019306320697069168, 0.012481175363063812, 0.03847622126340866, -0.006198232062160969, 0.018118666484951973, -0.04473976418375969, -0.02423822693526745, -0.08786538243293762, 0.01636281982064247, -0.014253010973334312, -0.019293280318379402, 0.04645099118351936, 0.05874873325228691, -0.0022275960072875023, 0.08806808292865753, -0.0661744475364685, 0.00873938761651516, 0.0326869934797287, -0.11346488445997238, -0.12058717012405396, 0.010499751195311546, 0.0036640153266489506, 0.0819556936621666],
    "identifier": "tools/python_travel_tools.py:create_packing_checklist:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "create_packing_checklist",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Create a travel itinerary based on a list of destinations and duration",
    "embedding": [0.04842033237218857, -0.03349408134818077, -0.05183115974068642, -0.02027290314435959, 0.004903267603367567, -0.015270736068487167, 0.04254632070660591, -0.03254837170243263, -0.1140349879860878, -0.05000563710927963, 0.023030295968055725, -0.029411276802420616, -0.0755796805024147, 0.0816345065832138, -0.0010056557366624475, -0.07822137326002121, 0.015037172473967075, 0.053539618849754333, 0.02257908508181572, 0.02875613607466221, 0.05579352751374245, 0.04479309171438217, -0.06490699201822281, 0.019290314987301826, 0.03779586777091026, 0.12280848622322083, 0.01704934425652027, 0.03706187382340431, -0.03668789938092232, 0.07214872539043427, -0.05506518483161926, 0.043334029614925385, 0.012016791850328445, 0.03624322637915611, 0.026507172733545303, 0.030392995104193687, -0.02177608385682106, 0.00688170175999403, -0.01184271089732647, 0.009235957637429237, 0.03732332959771156, -0.025486936792731285, 0.06973864883184433, -0.026143047958612442, -0.03553914651274681, -0.10537321120500565, 0.016297418624162674, -0.028070304542779922, 0.020780639722943306, 0.03077155165374279, -0.022793203592300415, -0.0569787435233593, -0.009400749579071999, -0.05798925831913948, -0.007469722535461187, 0.004538051318377256, -0.0730205699801445, -0.08145566284656525, 0.015016566962003708, -0.05519462376832962, -0.024984391406178474, -0.08433421701192856, 0.037822309881448746, 0.03303138166666031, -0.003917919006198645, 0.05530194193124771, -0.003676806343719363, 0.051555562764406204, 0.02145172469317913, -0.03765404596924782, -0.10868765413761139, 0.02943030185997486, -0.06549835205078125, 0.03163975849747658, 0.03533300384879112, -0.06325072795152664, 0.01085454598069191, 0.0478108711540699, 0.0012215622700750828, -0.014718776568770409, 0.028849003836512566, -0.03749614581465721, -0.0057704090140759945, 0.032007183879613876, 0.08616387844085693, -0.060829196125268936, -0.05431145057082176, -0.04649925231933594, -0.0003629419661592692, 0.034430425614118576, 0.04035210236907005, -0.017230454832315445, -0.006970190443098545, 0.01395498588681221, -0.04994628205895424, 0.011739463545382023, -0.02490648254752159, -0.01668504811823368, 0.04932253062725067, -0.00021647385437972844, 0.06493153423070908, 0.018383460119366646, -0.04596200957894325, -0.014861592091619968, -0.057136520743370056, 0.011518329381942749, -0.014370342716574669, -0.05291280522942543, 0.047628067433834076, -0.0005727249081246555, -0.01565336063504219, 0.08076518028974533, 0.01944303698837757, -0.0679723247885704, 0.03890183940529823, -0.00811192486435175, -0.007395745255053043, 0.05544228106737137, 0.05135161802172661, 0.04464372247457504, 0.0037915038410574198, -0.10570254921913147, 0.02713504061102867, 0.017772767692804337, -0.1232590302824974, -0.056049149483442307, 0.07758647203445435, 0.0006466447375714779, -0.07308099418878555, -0.028674066066741943, 0.03361467644572258, 0.06764807552099228, 0.010168567299842834, 0.04417841136455536, -0.11726908385753632, 0.011498887091875076, -0.007212996017187834, -0.0781722441315651, 0.011725890450179577, -0.008948792703449726, 0.05614222586154938, 0.014413402415812016, 0.06439713388681412, -0.07601718604564667, 0.07529295980930328, 0.04539257287979126, 0.030216867104172707, -0.060108475387096405, 0.007374749518930912, -0.0071861925534904, 0.0010537481866776943, -0.09164474904537201, 0.04914184659719467, -0.014367559924721718, -0.04548794403672218, 0.013833928853273392, 0.034504376351833344, -0.021063275635242462, 0.03320470079779625, 0.07627925276756287, -0.02649093233048916, -0.04615287110209465, 0.07300129532814026, 0.05677001550793648, -0.017423488199710846, 0.10539764165878296, 0.0327879898250103, 0.0030835059005767107, -0.0691516175866127, -0.07516524195671082, -0.007690693251788616, 0.02734038047492504, -0.027314407750964165, -0.0043481821194291115, 0.027796614915132523, 0.05669558048248291, -0.046426594257354736, 0.08492376655340195, -0.021743573248386383, -0.004951383452862501, 0.07623802870512009, -0.0691017210483551, 0.014848440885543823, 0.004381787497550249, 0.028913524001836777, -0.06564439833164215, 0.028639744967222214, -0.060223810374736786, 0.08365090191364288, 0.07291264832019806, -0.0003146207600366324, -0.038074612617492676, 0.08086273074150085, 0.022326704114675522, 0.05492028221487999, -0.04763464257121086, 0.03528144583106041, 0.09297064691781998, 0.06132602319121361, -0.056598465889692307, 0.002375315874814987, -0.012700803577899933, 0.019733851775527, -0.00262298877350986, 0.04314352944493294, 0.017997656017541885, -0.08164569735527039, -0.038227181881666183, 0.025983138009905815, 0.041845209896564484, 0.04826337844133377, 0.017125023528933525, 0.03250177577137947, -0.00777256628498435, 0.022798119112849236, -0.07075478136539459, -0.028180748224258423, -0.013617608696222305, -0.02317899279296398, 0.0020637945272028446, 0.007199494168162346, 0.03760698437690735, -0.04782655090093613, -1.437534426522764e-34, 0.047635916620492935, 0.024622611701488495, 0.030574388802051544, -0.01647699996829033, 0.09037475287914276, -0.07115793973207474, -0.02901565283536911, 0.020693909376859665, 0.028930330649018288, 0.04095908999443054, -0.0896865651011467, -0.0720663070678711, 0.048604030162096024, 0.0006131980917416513, -0.017806679010391235, -0.0008492545457556844, 0.10793697088956833, -0.020609797909855843, -0.0027568924706429243, 0.08584733307361603, -0.04720989614725113, 0.00992746464908123, -0.16946934163570404, -0.12277980893850327, 0.047736477106809616, 0.05708428844809532, 0.028007928282022476, -0.03252395614981651, 0.0015371256740763783, 0.05800895392894745, 0.041339047253131866, -0.056604452431201935, -0.02850797399878502, -0.009400256909430027, -0.08788371831178665, 0.022438766434788704, 0.034647420048713684, 0.02052183635532856, -0.003615944180637598, 0.10444776713848114, 0.08145936578512192, -0.030011281371116638, -0.016403110697865486, 0.034436196088790894, 0.10022135823965073, 0.028712423518300056, 0.05271385982632637, 0.02101096324622631, 0.06375189125537872, -0.04669158160686493, 0.052944328635931015, 0.09334375709295273, -0.08700933307409286, 0.0671011283993721, -0.01181425154209137, -0.05598511919379234, -0.04674160107970238, -0.1056332141160965, 0.036382850259542465, -0.012574314139783382, -0.07777376472949982, -0.059067439287900925, 0.09565310180187225, 0.00048247716040350497, -0.006705801002681255, 0.003873335663229227, -0.017725622281432152, -0.0865006148815155, -0.09348338842391968, -0.06366466730833054, 0.0009025049512274563, 0.0379059873521328, -0.027278080582618713, 0.05255548283457756, -0.04083157703280449, -0.07617885619401932, 0.03887034207582474, 0.0841255784034729, -0.07233354449272156, 0.1158529743552208, -0.10981710255146027, 0.018285052850842476, -0.030386317521333694, 0.053741149604320526, 0.015776630491018295, 0.09795777499675751, -0.015227366238832474, 0.006639985367655754, -0.02492552250623703, 0.07505793869495392, -0.021708084270358086, 0.010634582489728928, 0.0032495988998562098, -0.009342129342257977, -0.04198821261525154, 1.4955143124364057e-32, -0.06361854821443558, -0.025785846635699272, -0.0950532928109169, 0.04447045922279358, 0.016824418678879738, 0.023092560470104218, 0.06283903867006302, -0.04207492247223854, 0.006821576505899429, -0.02346603386104107, 0.001952624530531466, 0.027763016521930695, -0.03386853262782097, 0.0870734229683876, -0.02338274009525776, 0.026132773607969284, -0.039303068071603775, -0.010149635374546051, 0.015205120667815208, 0.00019424926722422242, 0.0411713570356369, 0.018093960359692574, -0.08014313876628876, -0.030239634215831757, 0.035637736320495605, -0.09248112142086029, -0.10317137837409973, -0.032251421362161636, 0.05339581146836281, -0.008723326958715916, -0.0979556068778038, 0.044963475316762924, -0.02289765514433384, 0.00626132870092988, -0.03250932693481445, -0.08630067110061646, -0.032150059938430786, -0.030755093321204185, 0.025938786566257477, 0.025642456486821175, -0.002195807406678796, 0.09310703724622726, 0.011338839307427406, 0.05053028091788292, 0.08809118717908859, -0.06563879549503326, 0.05495571717619896, 0.004788307938724756, -0.06835466623306274, -0.011959882453083992, -0.061403315514326096, -0.0821865051984787, 0.13346509635448456, 0.017030637711286545, 0.02589980512857437, 0.017075322568416595, -0.023019906133413315, 0.028717193752527237, 0.02378779649734497, -0.10462141036987305, -0.013641293160617352, -0.0021650376729667187, -0.03352068364620209, 0.026178421452641487],
    "identifier": "tools/python_travel_tools.py:create_travel_itinerary:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "create_travel_itinerary",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find car rental services in a specific location",
    "embedding": [0.015412155538797379, -0.004620609804987907, -0.017213603481650352, 0.0470796599984169, 0.00031727206078357995, 0.054765671491622925, -0.014180190861225128, 0.05661469325423241, 0.031085724011063576, -0.022622058168053627, 0.0852498859167099, -0.04327452927827835, -0.01006828062236309, 0.06565871089696884, 0.026143807917833328, -0.1017647460103035, 0.1269608438014984, 0.04664144292473793, 0.04171152412891388, -0.08416861295700073, 0.0285753533244133, 0.0033330332953482866, -0.04107341542840004, 0.018736669793725014, 0.030548693612217903, 0.0370546355843544, 0.00707442220300436, 0.07999090105295181, -0.03808112069964409, 0.04346786066889763, -0.009727058000862598, -0.007211324293166399, 0.008256721310317516, -0.011096455156803131, 0.07047047466039658, 0.01687220297753811, -0.06380712985992432, 0.04194708541035652, 0.06905979663133621, -0.0005862318794243038, 0.027497226372361183, -0.01609276793897152, -0.05596372112631798, 0.06895918399095535, -0.05004214122891426, 0.005586759187281132, 0.09348061680793762, 0.09807084500789642, 0.06522344052791595, -0.1248529702425003, -0.021730313077569008, -0.009894421324133873, -0.006403598003089428, 0.021245960146188736, -0.0180367361754179, 0.012614781968295574, -0.002760071074590087, -0.04283294826745987, -0.10345915704965591, -0.0014003005344420671, 0.06417778879404068, -0.030145324766635895, -0.039171669632196426, -0.024969885125756264, 0.017522886395454407, 0.005150385666638613, 0.009403470903635025, 0.006909159477800131, -0.10091038048267365, -0.06435632705688477, -0.02122376300394535, 0.055751048028469086, -0.09662169963121414, 0.052014097571372986, -0.04333154484629631, 0.05202162265777588, 0.03631545603275299, 0.03474675491452217, 0.0017301401821896434, -0.10619423538446426, 0.026634732261300087, -0.05400165915489197, 0.003992398269474506, -0.00818138662725687, 0.04305531457066536, 0.021983155980706215, -0.0161825530230999, -0.04279404133558273, 0.0015593639109283686, 0.015680449083447456, -0.06474770605564117, 0.0836375281214714, -0.07768478244543076, -0.08072914183139801, -0.05563589185476303, 0.03368833661079407, -0.04493557661771774, 0.010856338776648045, 0.03736858442425728, 0.0369335375726223, 0.06487156450748444, 0.02005607821047306, 0.05081174522638321, -0.014980277977883816, -0.026570098474621773, 0.076901875436306, -0.000605632143560797, -0.04057658836245537, 0.04981330409646034, 0.009566123597323895, 0.005909917876124382, 0.02772795967757702, -0.008999438025057316, -0.04078434780240059, 0.013740015216171741, -0.07630143314599991, 0.004638335667550564, 0.05579148232936859, 0.032179977744817734, 0.06322669237852097, -0.0559798926115036, -0.03764965012669563, -0.0010767924832180142, -0.0011126450262963772, -0.05422944948077202, -0.016555245965719223, -0.004280137829482555, -0.07563075423240662, 0.014890654012560844, -0.04941978678107262, -0.0435500405728817, 0.0735163539648056, 0.0005144680035300553, 0.018411725759506226, -0.04147497937083244, 0.05140262097120285, -0.006717620883136988, 0.01755061186850071, -0.03626932576298714, 0.0454232394695282, 0.052813854068517685, -0.0925363302230835, 0.04178541898727417, 0.023176996037364006, 0.03479057550430298, -0.016668815165758133, -0.07189441472291946, -0.005519358906894922, -0.056487783789634705, -0.007767023518681526, 0.054899293929338455, -0.055931344628334045, 0.027303723618388176, -0.058106184005737305, -0.004043846856802702, -0.04793993756175041, 0.07065475732088089, -0.020364053547382355, 0.02538793347775936, 0.053229670971632004, -0.009733624756336212, 0.044965632259845734, 0.13438379764556885, 0.06069355830550194, -0.04584862291812897, 0.015108948573470116, -0.0016237566014751792, -0.09155303984880447, -0.046801965683698654, 0.09531539678573608, -0.03292128071188927, 0.012958898209035397, 0.04300632327795029, 0.09431205689907074, -0.059557829052209854, 0.007534329313784838, -0.06836853921413422, 0.057708460837602615, -1.6868232250999426e-06, 0.025316564366221428, -0.15842920541763306, -6.884389586048201e-05, -0.014810122549533844, 0.1092587485909462, -0.0016839620657265186, 0.008856608532369137, 0.05735594779253006, -0.07751111686229706, 0.06511449813842773, 0.010186013765633106, 0.05213300883769989, -0.09713590145111084, 0.12258229404687881, -0.08977639675140381, -0.09484923630952835, 0.012353841215372086, -0.058165643364191055, 0.04426359757781029, 0.06706908345222473, -0.0029744047205895185, 0.10052981972694397, -0.004962462466210127, 0.0020151184871792793, -0.08031769096851349, -0.10305323451757431, 0.050709038972854614, -0.007114446256309748, -0.05018598213791847, -0.007607356645166874, -0.03111945278942585, 0.05196420103311539, 0.02541004866361618, 0.08565350621938705, 0.02047954499721527, 0.04154560714960098, -0.05678127333521843, -0.0058484370820224285, -0.004984934814274311, -0.05709455534815788, -0.008359890431165695, -0.09014739096164703, -0.041977643966674805, -0.03998848423361778, 4.102641322946837e-33, 0.007661741226911545, -0.09276358038187027, 0.04971083253622055, -0.04486122727394104, 0.008548884652554989, -0.00390844838693738, 0.022613784298300743, -0.11309245973825455, 0.029457608237862587, 0.0829073041677475, -0.03600421920418739, 0.046943195164203644, 0.11468838155269623, 0.057093340903520584, 0.04222308471798897, 0.015588182024657726, -0.020433399826288223, -0.018165286630392075, -0.004397850949317217, 0.12657873332500458, -0.0580948069691658, 0.02161947265267372, -0.0065916250459849834, 0.09175466001033783, 0.06229252740740776, 0.06242647022008896, -0.06511859595775604, -0.020612694323062897, 0.007902574725449085, 0.005822918377816677, -0.09076474606990814, -0.08891357481479645, 0.02601063810288906, 0.024746205657720566, -0.05806438997387886, -0.004903089255094528, 0.06852539628744125, -0.005412939935922623, -0.011988634243607521, 0.00990252010524273, 0.019440263509750366, -0.08592084050178528, 0.019755715504288673, 0.024050762876868248, -0.005809689871966839, -0.009576455689966679, 0.023590706288814545, -0.04131810739636421, -0.007492500357329845, -0.01797144114971161, 0.05382566154003143, -0.059872981160879135, -0.04132566228508949, 0.05124101787805557, 0.024974890053272247, 0.07564504444599152, 0.0009999045869335532, 0.04560931771993637, -0.00951983593404293, 0.006393550895154476, 0.01505141519010067, 0.05395516753196716, 0.04160192236304283, -0.01875474862754345, -0.03146915137767792, -0.04710819944739342, 0.013388078659772873, -0.004011469427496195, -0.015956133604049683, -0.0866863951086998, -0.019653160125017166, 0.008399102836847305, -0.0018201741622760892, -0.006763785146176815, -0.00687033124268055, 0.028120553120970726, 0.08344856649637222, 0.0375482477247715, -0.012555297464132309, -0.03932563215494156, -0.02311643399298191, 0.05770634859800339, -0.0353405699133873, 0.008573402650654316, -0.07969177514314651, 0.0006707677966915071, 0.02757515385746956, 0.018214697018265724, 0.049661483615636826, -0.015158702619373798, -0.030400501564145088, 0.04974804446101189, 0.02543899044394493, -0.012065778486430645, -0.03315053507685661, 1.5206059740386767e-32, -0.06952988356351852, -0.02145874686539173, -0.030340293422341347, 0.04402569308876991, 0.026952244341373444, -0.015281126834452152, -0.009059261530637741, 0.09582106024026871, -0.05504008010029793, 0.04576290771365166, -0.05713154375553131, -0.04871663823723793, 0.02194484882056713, -0.07565159350633621, -0.10114476084709167, -0.01312234252691269, 0.02442915551364422, -0.04420045390725136, -0.005380324088037014, 0.06810390949249268, 0.007901190780103207, 0.07147548347711563, 0.07304858416318893, 0.032329779118299484, 0.023871270939707756, -0.059733934700489044, -0.024661289528012276, 0.004122158046811819, 0.11711394041776657, -0.036575280129909515, -0.06289812177419662, -0.0728151947259903, 0.02272122912108898, -0.06293836236000061, -0.0041518802754580975, -0.0644262358546257, 0.012842928990721703, 0.08199019730091095, 0.015058253891766071, 0.002528330311179161, 0.0749109536409378, -0.004799676593393087, -0.003103486727923155, 0.011767481453716755, -0.03619394451379776, -0.02684987708926201, 0.020908018574118614, -0.04318894445896149, 0.12070785462856293, -0.010682400315999985, -0.07751620560884476, -0.0437328927218914, 0.009739123284816742, 0.11345086246728897, -0.04239441081881523, -0.05728751793503761, -0.0746753066778183, -0.10193105787038803, -0.033146124333143234, 0.02131626196205616, -0.05963927134871483, 0.08269312977790833, -0.0496210902929306, -0.02321896143257618],
    "identifier": "tools/python_travel_tools.py:find_car_rental_services:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "find_car_rental_services",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find hotels in a specific location",
    "embedding": [0.09909861534833908, 0.020948227494955063, -0.031281743198633194, 0.035294827073812485, 0.0196414515376091, 0.004589030984789133, 0.015798503533005714, -0.05960581451654434, 0.011485489085316658, -0.02455204539000988, 0.0406523123383522, -0.05484358221292496, 0.0494883693754673, 0.0375974178314209, 0.05767878517508507, -0.04769789054989815, 0.05348150432109833, 0.07608698308467865, 0.06712303310632706, -0.03120877593755722, 0.030304018408060074, 0.04111259803175926, -0.030613165348768234, 0.03579147905111313, 0.07355280220508575, -0.01280413568019867, 0.009953069500625134, 0.007586842868477106, -0.047088202089071274, 0.005920530296862125, -0.011788131669163704, 0.07667041569948196, -0.019887976348400116, -0.030253194272518158, 0.14415477216243744, 0.04635964706540108, -0.05031718313694, -0.037277814000844955, 0.07596804946660995, 0.05027235299348831, 0.08807066082954407, 0.013785486109554768, 0.09389401227235794, 0.011931562796235085, -0.016688870266079903, -0.035579536110162735, 0.0561366006731987, 0.03940708935260773, 0.05628158152103424, 0.016634037718176842, -0.023471420630812645, 0.024534041061997414, -0.04602424055337906, 0.004724748432636261, 0.03294147178530693, 0.048181187361478806, -0.016128025949001312, -0.11217474937438965, -0.026515908539295197, 0.02595294639468193, 0.04511365294456482, -0.0021622744388878345, 0.058260414749383926, -0.05240485817193985, 0.035807788372039795, 0.029022108763456345, -0.06688959896564484, 0.01288110576570034, -0.04258096590638161, -0.051283594220876694, -0.03128357604146004, 0.049568530172109604, -0.014509567990899086, -0.007109922356903553, 0.026307113468647003, -0.014134813100099564, -0.01580456644296646, 0.0664292722940445, 0.010971784591674805, 0.0004552784957922995, -0.0044774943962693214, -0.06989739835262299, 0.006221944000571966, -0.006015712395310402, 0.014263966120779514, 0.018091320991516113, -0.03682354837656021, -0.05934273079037666, 0.05889218673110008, 0.03922407329082489, -0.008992340415716171, 0.04102286696434021, -0.11953706294298172, -0.048179641366004944, -0.008664085529744625, -0.012273005209863186, -0.08014661818742752, 0.07263210415840149, 0.07361402362585068, 0.06366432458162308, 0.058925922960042953, 0.081596240401268, 0.01606718637049198, 0.032650385051965714, -0.03612079098820686, 0.04217652976512909, -0.0349825881421566, -0.06316906958818436, 0.0750572681427002, 0.05512416735291481, -0.08135902881622314, 0.052623819559812546, 0.03735925629734993, -0.006670172326266766, 0.030129997059702873, -0.07300843298435211, 0.05440989509224892, 0.09538523852825165, 0.011537606827914715, 0.06803213804960251, -0.008079283870756626, -0.017745479941368103, 0.0453093945980072, 0.06806880980730057, -0.09300138056278229, -0.04349953681230545, -0.006705665960907936, -0.06300307810306549, 0.014744192361831665, -0.000809302378911525, 0.016607733443379402, 0.08136067539453506, 0.021507415920495987, 0.05488840118050575, -0.08060809224843979, 0.02674594521522522, -0.0016208365559577942, -0.021556131541728973, -0.035496219992637634, -0.00017522164853289723, 0.006540212314575911, -0.036700524389743805, 0.07246118038892746, -0.04348607733845711, 0.05754202604293823, 0.007635481655597687, -0.12276843935251236, -0.03131771460175514, -0.05493631958961487, -0.0963866263628006, 0.021072179079055786, -0.07228467613458633, 0.04216902330517769, -0.06245643272995949, 0.0020931425970047712, -0.033407989889383316, 0.04089567810297012, 0.02527790144085884, -0.004545011557638645, -0.023628905415534973, -0.027188874781131744, 0.020284537225961685, 0.07834082841873169, 0.04480911046266556, 0.011140864342451096, 0.051815059036016464, 0.01620020903646946, -0.0566059909760952, -0.1576402634382248, 0.07938248664140701, -0.007846307940781116, 0.08885659277439117, 0.032389167696237564, 0.05105309933423996, -0.0828409492969513, -0.0043144309893250465, -0.054581038653850555, 0.0326593816280365, -0.06317949295043945, -0.03231149539351463, -0.1193239688873291, -0.03367532044649124, 0.021774452179670334, 0.08369842916727066, 0.02690832130610943, 0.007184697315096855, 0.13735033571720123, -0.1204531192779541, 0.14145182073116302, 0.010858532972633839, -0.013127591460943222, -0.06062503531575203, 0.1074894368648529, -0.0027905735187232494, -0.05178562179207802, -0.007585460785776377, -0.04937935993075371, 0.01425084937363863, 0.04812820255756378, -0.019450878724455833, 0.09063568711280823, 0.008978552184998989, -0.021997785195708275, 0.01833927258849144, -0.03738565742969513, 0.07334516942501068, 0.05568607151508331, -0.02545214258134365, -0.013157139532268047, 0.010848725214600563, -0.0066184550523757935, 0.04034149646759033, 0.005730754695832729, -0.017871201038360596, 0.09515857696533203, -0.045525748282670975, -0.04739290848374367, -0.06663712114095688, -0.07988448441028595, 0.024207916110754013, -0.027254562824964523, -0.06762778759002686, -0.059708788990974426, 2.4257473872919878e-33, 0.03396741673350334, -0.09052743017673492, 0.06685536354780197, -0.08494222164154053, -0.00928595568984747, -0.02410079538822174, 0.05546100437641144, -0.11223156005144119, 0.07244584709405899, 0.044623859226703644, -0.03681989386677742, 0.023893950507044792, 0.08502023667097092, 0.032073404639959335, 0.07270342111587524, 0.04513523355126381, 0.0673261508345604, -0.01826126128435135, -0.08078255504369736, 0.11701712757349014, -0.006492899265140295, -0.0008108706679195166, -0.07906898856163025, -0.001895798952318728, -0.009658370167016983, 0.08352791517972946, -0.005062840413302183, -0.07796420902013779, -0.03729637712240219, -0.01590951904654503, -0.028090164065361023, -0.0333235040307045, -0.032772406935691833, 0.03198671340942383, -0.006651016417890787, 0.029291613027453423, 0.03673605993390083, 0.0351191945374012, -0.034490689635276794, 0.02457369863986969, 0.05652141198515892, -0.03441111370921135, -0.028306016698479652, 0.051112424582242966, 0.019352516159415245, 0.02957470528781414, 0.016427665948867798, 0.010510837659239769, 0.06360191851854324, 0.010915210470557213, 0.0065957955084741116, -0.017527926713228226, -0.03623512387275696, 0.006714290473610163, -0.0033708971459418535, 0.011493022553622723, -0.0470077246427536, 0.012663875706493855, -0.0385659784078598, -0.037301450967788696, -0.005123736336827278, -0.0266275554895401, 0.03479020297527313, -0.03629842773079872, -0.07891783118247986, -0.04597867652773857, -0.05645568668842316, 0.02608642913401127, -0.013523769564926624, -0.04624241590499878, -0.03265628591179848, 0.060855425894260406, -0.04763180390000343, 0.035966966301202774, -0.009640214033424854, 0.017970629036426544, 0.05231219530105591, 0.049203336238861084, 0.0007230285555124283, -0.003723250702023506, -0.03843042999505997, 0.08075844496488571, -0.0366191640496254, -0.06368619203567505, -0.049527086317539215, 0.05000289902091026, 0.0411873534321785, 0.009458503685891628, -0.024974726140499115, -0.0068978420458734035, -0.08019261062145233, -0.005427739582955837, 0.05719240754842758, -0.047974638640880585, -0.05670326203107834, 1.408730797124661e-32, -0.059410758316516876, -0.03300628811120987, -0.06688331812620163, 0.07013481110334396, -0.017086217179894447, -0.0398445650935173, -0.010852745734155178, 0.061814405024051666, -0.026350706815719604, 0.019361741840839386, -0.06561819463968277, -0.007425304967910051, -0.0263079721480608, -0.08213552832603455, -0.10850030183792114, 0.02302023582160473, -0.005361347924917936, -0.0334286205470562, -0.0020944608841091394, -0.006625574082136154, 0.06788163632154465, 0.012071209028363228, 0.000335559161612764, -0.0029882960952818394, 0.09338947385549545, 0.029785608872771263, -0.09956086426973343, -0.000939526769798249, 0.05388787388801575, -0.042743537575006485, -0.07378016412258148, -0.04942278191447258, -0.02057815156877041, 0.0030504604801535606, 0.027157418429851532, -0.034531641751527786, 0.0018893652595579624, 0.01930520310997963, -0.0535951592028141, -0.05545872077345848, 0.04638664424419403, -0.006751508917659521, 0.007782820612192154, -0.040478289127349854, -0.021989280357956886, -0.05348744988441467, 0.09734255820512772, -0.036388691514730453, 0.015291222371160984, -0.02468312345445156, -0.1396462321281433, 0.04811660945415497, 0.06408121436834335, 0.050369638949632645, -0.04863181337714195, -0.04813215881586075, -0.023853013291954994, -0.12891393899917603, 0.02106824517250061, 0.04106571152806282, -0.012819516472518444, 0.01257277186959982, -0.09022931754589081, -0.018132256343960762],
    "identifier": "tools/python_travel_tools.py:find_hotel_by_location:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "find_hotel_by_location",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find local events happening in a city on a specific date",
    "embedding": [-0.02217932790517807, 0.03139001876115799, 0.010409374721348286, 0.008818225003778934, 0.039217494428157806, -0.012187013402581215, 0.03011399134993553, -0.0379335880279541, -0.07648107409477234, 0.03116191364824772, 0.025231709703803062, -0.06397109478712082, -0.16030627489089966, 0.049068633466959, 0.020033879205584526, -0.05579967051744461, 0.027202073484659195, 0.034226611256599426, 0.029805075377225876, -0.041906263679265976, -0.020342489704489708, 0.0023771177511662245, -0.09781114757061005, 0.07530944794416428, 0.05515897646546364, 0.0559999942779541, 0.026048528030514717, -0.0066130817867815495, 0.0166483111679554, 0.07423579692840576, -0.07660458981990814, -0.019966863095760345, 0.028718920424580574, -0.02418496273458004, 0.11749539524316788, -0.03517581522464752, 0.0576956607401371, 0.03507611155509949, -0.024611877277493477, 0.04844949394464493, 0.052608296275138855, -0.012283564545214176, 0.10985691845417023, -0.012330886907875538, -0.038466304540634155, -0.004349113907665014, 0.012113865464925766, 0.021944263949990273, 0.003381033893674612, -0.008402690291404724, -4.284393071429804e-05, -0.013252776116132736, -0.007610816042870283, -0.0022626256104558706, 0.025693543255329132, 0.06796372681856155, -0.047901369631290436, 0.006035273429006338, 0.07921084761619568, 0.023636747151613235, -0.0785534605383873, 0.027745738625526428, -0.05726742371916771, -0.02511020563542843, 0.01001846045255661, 0.016904136165976524, 0.09389805793762207, 0.05308954417705536, 0.06056736782193184, -0.07431413233280182, -0.017817718908190727, -0.0006875395774841309, 0.016610829159617424, 0.024319833144545555, -0.05553746223449707, -0.08865750581026077, 0.03752007707953453, -0.04781879112124443, -0.0026855620089918375, -0.049120351672172546, 0.06869828701019287, -0.01578671485185623, 0.05518060922622681, 0.008969666436314583, 0.040036268532276154, -0.034307800233364105, -0.04513132572174072, 0.07412470132112503, 0.0716126561164856, 0.029719781130552292, -0.08022462576627731, 0.041062407195568085, -0.008764859288930893, -0.010338208638131618, -0.03431088104844093, 0.07033663988113403, -0.023823555558919907, 0.09776255488395691, 0.07819138467311859, 0.06795395165681839, -0.023360423743724823, 0.08933408558368683, -0.034091755747795105, 0.0027935660909861326, 0.040817741304636, -0.040998462587594986, -0.14005015790462494, -0.04132717102766037, -0.06306999176740646, 0.0243510939180851, 0.011458761058747768, 0.061928510665893555, 0.026077108457684517, 0.005087979603558779, 0.09847865998744965, -0.019508594647049904, 0.06704218685626984, 0.013691332191228867, -0.0832228884100914, 0.008345121517777443, 0.007896719500422478, -0.006718209479004145, -0.10430420190095901, 0.04781308397650719, -0.03066950850188732, -0.012749901041388512, -0.0414486899971962, 0.03896944597363472, 0.04062758386135101, -0.07678702473640442, -0.03584752976894379, -0.020733986049890518, 0.052788492292165756, 0.005446529481559992, 0.012099071405827999, -0.01762438751757145, 0.00807433482259512, -0.020855141803622246, 0.03335481509566307, -0.04760954529047012, 0.03388059511780739, -0.1016886755824089, 0.03889128938317299, -0.04113728180527687, -0.010532484389841557, 0.010148265399038792, -0.0266096331179142, -0.007843319326639175, -0.06996382027864456, -0.08769065886735916, 0.05547691136598587, -0.09497945755720139, 0.009369103237986565, -0.021450288593769073, 0.0632668063044548, -0.026193946599960327, 0.05119870603084564, 0.03154696896672249, 0.020626699551939964, -0.0342601016163826, -0.015313608571887016, 0.033101197332143784, 0.06112239137291908, 0.021686343476176262, -0.08630937337875366, -0.015998877584934235, 0.05799870193004608, 0.005537388380616903, 0.0016233146889135242, -0.011800702661275864, -0.07664843648672104, -0.0011437636567279696, 0.0406666025519371, -0.04350224882364273, -0.04879097267985344, 0.06566963344812393, 0.004981751088052988, 0.01261820923537016, 0.05538246035575867, -0.027635665610432625, -0.04867176339030266, -0.045942049473524094, 0.025045862421393394, 0.051585499197244644, 0.024442074820399284, -0.15195885300636292, 0.13981622457504272, 0.08110003918409348, 0.07310762256383896, 0.033302560448646545, 0.005155969876796007, -0.10538807511329651, 0.02442885935306549, 0.043150462210178375, 0.02597164921462536, 0.059046730399131775, -0.02281949669122696, -0.0014201224548742175, 0.10179686546325684, 0.013984396122395992, 0.032954055815935135, -0.09242410212755203, -0.04192951321601868, -0.06565501540899277, 0.05238000303506851, 0.019030006602406502, -0.015037531964480877, 0.04617463797330856, -0.021366644650697708, -0.0667310357093811, 0.061063822358846664, 0.08885312080383301, 0.10235849767923355, 0.007892817258834839, 0.001919570378959179, 0.01590469852089882, 0.01447999570518732, -0.04054966941475868, -0.0676296278834343, 0.012969918549060822, -0.06010431796312332, -0.06580719351768494, -0.031152967363595963, 5.5913296131564146e-33, 0.0391138456761837, -0.04489146173000336, 0.06518618017435074, -0.07497640699148178, 0.02714848332107067, -0.015663953498005867, -0.0074933115392923355, -0.04979370906949043, 0.03635424003005028, -0.007779708132147789, -0.0546707920730114, -0.08129668980836868, 0.09124751389026642, 0.0067432597279548645, 0.05942929908633232, -0.005844221916049719, 0.0409151092171669, 0.064567930996418, -0.09814976155757904, 0.12322119623422623, -0.03353579714894295, -0.01724649965763092, -0.09859565645456314, 0.026773132383823395, -0.025549251586198807, 0.03988216072320938, 0.04635178670287132, -0.10343900322914124, -0.03161005303263664, -0.03926137089729309, -0.065752774477005, -0.0989629402756691, -0.013174612075090408, 0.020881805568933487, -0.12001486122608185, 0.07475798577070236, 0.07929998636245728, -0.05081288143992424, 0.02056296169757843, -0.012166707776486874, 0.025297407060861588, 0.01887187920510769, 0.01765865460038185, 0.0466722697019577, -0.0613287091255188, 0.0808965191245079, -0.006558074150234461, 0.0362294539809227, -0.010468832217156887, 0.011778888292610645, -0.030760282650589943, 0.04494703561067581, 0.013258127495646477, 0.07556847482919693, 0.04260708764195442, 0.03457596153020859, -0.060255493968725204, -0.035833004862070084, -0.011370796710252762, 0.06549713015556335, -0.016103345900774002, -0.09158419072628021, -0.023502623662352562, -0.01009467151015997, 0.01918741874396801, -0.02643693797290325, -0.006337788887321949, -0.018681015819311142, 0.03632217273116112, -0.018908562138676643, 0.09191510826349258, -0.012223610654473305, -0.12774032354354858, -0.01774582266807556, 0.011795993894338608, -0.013008210808038712, 0.04368983581662178, 0.03703039512038231, 0.0601668544113636, -0.005889119114726782, -0.0491892546415329, 0.05404262989759445, 0.025336911901831627, 0.023316675797104836, -0.046434435993433, 0.12155745923519135, -0.013716956600546837, -0.009864644147455692, 0.011552967131137848, 0.029743937775492668, -0.01702449657022953, 0.005604839883744717, 0.04583033546805382, -0.027223844081163406, -0.028696337714791298, 1.833270573626112e-32, 0.009901267476379871, 0.009975587017834187, -0.10732045024633408, -0.02826344594359398, 0.015488462522625923, -0.04253006726503372, 0.023454252630472183, 0.021658508107066154, 0.027880944311618805, -9.975490684155375e-05, 0.033104442059993744, -0.05518518388271332, -0.06844437122344971, -0.04790014028549194, -0.011816231533885002, -0.04642476886510849, 0.02231156826019287, -0.02142634056508541, 0.025615772232413292, -0.015117691829800606, 0.045056797564029694, 0.024402789771556854, -0.04083111509680748, -0.030572734773159027, 0.02915133535861969, -0.04996606335043907, -0.03745534271001816, 0.027004987001419067, 0.046108782291412354, 0.014269994571805, 0.009380223229527473, -0.04442930594086647, -0.0026433351449668407, -0.04986605793237686, -0.039265226572752, -0.09733344614505768, 0.01200239546597004, 0.0010913446312770247, -0.021743064746260643, 0.008342105895280838, 0.11900871247053146, -0.05066557601094246, 0.0316913016140461, 0.021608764305710793, 0.05329933762550354, -0.015389332547783852, -0.04926314949989319, -0.06253909319639206, 0.04098194092512131, -0.013780909590423107, -0.10833081603050232, -0.08454284816980362, 0.08045058697462082, -0.05571470782160759, -0.0009041999001055956, 0.05270622298121452, -0.0221874937415123, -0.01913328655064106, 0.0070713297463953495, -0.08472315222024918, -0.009717484004795551, 0.06465776264667511, -0.06279470026493073, 0.09809383004903793],
    "identifier": "tools/python_travel_tools.py:find_local_events:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "find_local_events",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find popular tourist attractions in a travel destination",
    "embedding": [0.05889369919896126, -0.06590111553668976, -0.01208210363984108, -0.022770000621676445, 0.026941971853375435, 0.047724802047014236, 0.10799799114465714, 0.020223286002874374, -0.06306049972772598, 0.03965022414922714, -0.013774079270660877, -0.030604999512434006, -0.07613968849182129, 0.08680891990661621, -0.004980455152690411, -0.05825867876410484, 0.09569668024778366, 0.03940166160464287, 0.08209545910358429, -0.02512516640126705, 0.03234875947237015, -0.000630171678494662, -0.006244756281375885, 0.12156547605991364, 0.006457469891756773, -0.00707208039239049, -0.01843251660466194, 0.059349093586206436, -0.017489438876509666, -0.0007568944711238146, -0.004934919998049736, 0.08624592423439026, 0.016973385587334633, -0.0047847614623606205, 0.10787564516067505, 0.08440233767032623, -0.052071455866098404, -0.06722735613584518, 0.04098490998148918, 0.058652613312006, 0.03946900740265846, -0.036293063312768936, 0.05554826557636261, 0.0003574835427571088, -0.01571827568113804, -0.04613151028752327, 0.08500537276268005, 0.0015775165520608425, 0.024037092924118042, 0.021209055557847023, -0.023123858496546745, -0.034410957247018814, -0.033737506717443466, -0.043286751955747604, 0.017599226906895638, -0.005282930098474026, -0.07364639639854431, -0.09056609869003296, -0.014388302341103554, 0.02980506606400013, 0.028837094083428383, -0.052223946899175644, 0.03637778013944626, -0.05361337214708328, -0.04150328412652016, 0.05028516799211502, 0.04310270771384239, 0.06296611577272415, -0.019663458690047264, -0.02924915961921215, 0.008218576200306416, 0.020175009965896606, -0.016552817076444626, 0.029432378709316254, -0.005417520646005869, -0.07820570468902588, -0.011133856140077114, 0.03449934348464012, -0.0657833144068718, -0.03679213672876358, 0.08621614426374435, -0.057414647191762924, -0.060434382408857346, -0.025799091905355453, 0.049256935715675354, -0.029053639620542526, 0.020360486581921577, 0.02313673496246338, 0.0026702925097197294, -0.009587256237864494, -0.031190594658255577, 0.03877892345190048, -0.07192985713481903, 0.0457121878862381, -0.00533128809183836, 0.04636235907673836, -0.006698031444102526, -0.014732519164681435, 0.07079297304153442, 0.05069674551486969, 0.01561092957854271, 0.07569049298763275, 0.03215137496590614, 0.0027147813234478235, -0.046015359461307526, -0.02857869118452072, -0.03308231383562088, -0.029218213632702827, 0.038621190935373306, 0.021313972771167755, -0.05674285441637039, 0.09315457195043564, 0.01727619767189026, 0.012390324845910072, 0.042291074991226196, -0.07347114384174347, -0.019926387816667557, 0.0536869615316391, -0.030181556940078735, 0.0033960884902626276, -0.025977296754717827, -0.04530974105000496, 0.07792636752128601, -0.004789446946233511, -0.049630533903837204, -0.04096575826406479, -0.058894068002700806, -0.0327468141913414, -0.019192082807421684, -0.0013271832140162587, 0.0019943758379667997, 0.06874366104602814, -0.009796695783734322, -0.0036095452960580587, -0.12556174397468567, -0.014418342150747776, -0.0724257081747055, -0.0874837264418602, -0.010810683481395245, 0.05789941921830177, 0.019065789878368378, 0.07098101824522018, 0.048870380967855453, -0.09140618145465851, 0.043217018246650696, 0.004815226886421442, -0.048179227858781815, -0.029587749391794205, -0.032434772700071335, -0.029627054929733276, 0.06958700716495514, -0.09252598881721497, -0.019331736490130424, -0.03469594940543175, 0.03653839975595474, -0.08256284892559052, 0.05699869245290756, 0.05255856364965439, -0.018681298941373825, 0.0371866337954998, 0.010195464827120304, 0.003500943072140217, 0.005695865489542484, 0.009590650908648968, -0.04544174671173096, 0.0059158517979085445, 0.04996233060956001, 0.006279503460973501, -0.07349953800439835, -0.014653024263679981, -0.10346454381942749, 0.024201953783631325, 0.030288279056549072, 0.020020058378577232, 0.06163579970598221, 0.030668092891573906, -0.011264193803071976, -0.0033381511457264423, -0.02927550859749317, -0.07897332310676575, 0.014851516112685204, -0.011041180230677128, -0.01156175322830677, 0.05589050054550171, 0.04423366114497185, -0.03633764013648033, 0.08854668587446213, -0.05356184393167496, 0.054211679846048355, 0.059717774391174316, -0.008966807276010513, -0.04345162585377693, 0.07741983234882355, 0.04492605850100517, 0.060706283897161484, 0.046110473573207855, -0.07704096287488937, 0.013833418488502502, 0.07871263474225998, 0.04124895855784416, -0.026025403290987015, -0.09153705090284348, 0.0032780456822365522, -0.06428512185811996, -0.07659105956554413, 0.043642107397317886, 0.01091411616653204, 0.08214527368545532, 0.00645090639591217, 0.014088385738432407, 0.07770749181509018, 0.058520395308732986, 0.022041918709874153, -0.029709594324231148, -0.007764599751681089, -0.1215473860502243, 0.030474156141281128, -0.046454187482595444, 0.007296258118003607, 0.04407818987965584, -0.030045967549085617, 0.021067801862955093, -0.04947694391012192, 2.1007493724060303e-34, 0.01983810029923916, 0.04965910688042641, 0.11571840941905975, -0.016125138849020004, -0.045059360563755035, -0.06464242935180664, 0.013156390748918056, -0.06632628291845322, 0.05663364753127098, 0.06272733956575394, -0.10088003426790237, -0.046434108167886734, 0.12449824810028076, -0.007318748161196709, 0.037206318229436874, -0.006431797984987497, 0.06741874665021896, 0.0389900729060173, -0.08607169985771179, 0.12732701003551483, 0.015477793291211128, 0.010938211344182491, -0.1227962076663971, -0.13250666856765747, 0.04571814090013504, 0.08398640155792236, -0.0551416277885437, -0.14397606253623962, -0.01094390545040369, -0.06171564757823944, 0.0413363054394722, -0.03890298306941986, -0.01699185185134411, 0.008299055509269238, -0.05903644114732742, 0.12743577361106873, 0.09490631520748138, -0.023180827498435974, 0.00890517421066761, 0.06857006251811981, 0.10152014344930649, 0.0465337336063385, 0.021764608100056648, 0.04665956646203995, 0.014441958628594875, 0.07075487077236176, 0.017293589189648628, 0.012627676129341125, 0.06950002908706665, -0.05456749349832535, -0.03961324319243431, 0.038503266870975494, -0.02810007892549038, -0.004633011762052774, 0.0112147880718112, 0.0517120286822319, -0.09458758682012558, -0.0506092831492424, 0.009925839491188526, -0.02285369485616684, -0.021489014849066734, -0.07480932027101517, -0.029732102528214455, -0.06588786840438843, -0.04673260077834129, -0.05276033654808998, -0.038952700793743134, 0.03101254254579544, -0.04559851437807083, -0.04913241043686867, 0.0009277659701183438, 0.07052310556173325, -0.07284967601299286, -0.016691461205482483, -0.02003929205238819, -0.029034223407506943, 0.039382077753543854, 0.09535948932170868, -0.010470530949532986, -0.00048679084284231067, -0.014104407280683517, 0.05930471047759056, -0.006202870048582554, -0.07689454406499863, 0.09478512406349182, 0.07948096841573715, -0.07886776328086853, -0.0559786856174469, -0.038147520273923874, -0.0037236299831420183, -0.05673731863498688, -0.0010110657894983888, 0.016500340774655342, -0.04360641539096832, -0.023360934108495712, 2.6125256152533766e-32, -0.029595952481031418, -0.020085936412215233, -0.05797450616955757, 0.024440020322799683, 0.035559818148612976, -0.049076441675424576, -0.024404674768447876, 0.0865444615483284, 0.021424753591418266, 0.029149554669857025, -0.06237078458070755, 0.005200715269893408, -0.08714965730905533, -0.022901790216565132, 0.03011239506304264, -0.008509030565619469, 0.009535826742649078, -0.0012851753272116184, -0.01914927363395691, -0.008929876610636711, -0.008998206816613674, 0.032003238797187805, 0.04548930004239082, -0.05168095976114273, -0.018748315051198006, -0.007855759933590889, -0.0638655424118042, -0.016192445531487465, 0.02929728664457798, 0.002971245674416423, -0.06700858473777771, -0.0735708698630333, -0.09370912611484528, -0.03619007766246796, 0.06519423425197601, -0.027726516127586365, -0.0012362319976091385, -0.021454807370901108, -0.037402983754873276, 0.02981959655880928, 0.03167083114385605, 0.0006337536033242941, 0.00898960791528225, 0.06618665158748627, 0.022293696179986, 0.0427815280854702, 0.026823675259947777, -0.018670758232474327, -0.010751234367489815, -0.022475557401776314, -0.08414797484874725, -0.038863372057676315, 0.11010618507862091, 0.009000742807984352, -0.014992975629866123, -0.04589872807264328, -0.037802424281835556, -0.052346982061862946, 0.07443365454673767, -0.027377832680940628, 0.05581025034189224, 0.0277993343770504, -0.11311358213424683, 0.040837034583091736],
    "identifier": "tools/python_travel_tools.py:find_tourist_attractions:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "find_tourist_attractions",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find travel insurance options based on traveler information",
    "embedding": [0.031821612268686295, -0.011531714349985123, -0.06056848540902138, 0.01733407750725746, 0.04710383713245392, 0.021906746551394463, 0.09684132039546967, 0.05437197908759117, -0.02020653523504734, -0.010667369700968266, 0.07963433861732483, -0.024603156372904778, -0.035033222287893295, 0.04387092590332031, 0.011011898517608643, -0.08925502747297287, 0.05465155467391014, 0.022966356948018074, 0.01610768400132656, 0.03751790151000023, 0.008758772164583206, -0.0016073723090812564, -0.07509902119636536, -0.024909233674407005, 0.06483681499958038, 0.0634775459766388, 0.038966331630945206, 0.06731808930635452, -0.013862882740795612, 0.029044315218925476, -0.05825473740696907, 0.04546520486474037, -0.07527100294828415, -0.02787177264690399, 0.028032692149281502, 0.03696678206324577, -0.07873473316431046, 0.06283768266439438, 0.002891374984756112, 0.018174387514591217, 0.026805594563484192, -0.03215740621089935, -0.03743221238255501, -0.009010547772049904, 0.03189682960510254, -0.03039250709116459, 0.07990202307701111, 0.01730523817241192, 0.03666752204298973, 0.03392396494746208, -0.03899187594652176, -0.008710432797670364, -0.050497714430093765, -0.07788192480802536, 0.07035970687866211, -0.10770397633314133, -0.07129328697919846, -0.04464486986398697, -0.09864132106304169, -0.01001928560435772, -0.04649093374609947, -0.03876291587948799, 0.0832773894071579, 0.006938609294593334, -0.08444720506668091, 0.08459705859422684, 0.016703767701983452, 0.05137931555509567, -0.0228254571557045, -0.04840551316738129, 0.005017525050789118, 0.009545187465846539, -0.04832817241549492, 0.031005291268229485, 0.01114785298705101, 0.025218065828084946, -0.039180926978588104, 0.0707729235291481, -0.01764138601720333, 0.016948318108916283, 0.008283503353595734, -0.05782890319824219, -0.03861663118004799, -0.001202962826937437, 0.05431707948446274, -0.04431866481900215, -0.033392395824193954, -0.06882155686616898, -0.0255941953510046, 0.03438863530755043, -0.022386351600289345, 0.00628112256526947, -0.019575998187065125, 0.06014426425099373, 0.006478450261056423, 0.08421497792005539, -0.06403252482414246, -0.026733338832855225, 0.052025843411684036, 0.06713824719190598, -0.007611820474267006, -0.025673603639006615, 0.06248456984758377, -0.014692003838717937, -0.04512161761522293, -0.03450622409582138, 0.028895298019051552, 0.0010508850682526827, 0.13587771356105804, 0.011073822155594826, 0.026602325960993767, 0.07495848834514618, 0.032034941017627716, -0.03770789876580238, -0.020070647820830345, -0.07018424570560455, 0.038821443915367126, -0.0013084416277706623, 0.07242461293935776, -0.07109697163105011, 0.041105907410383224, -0.06995654851198196, 0.01587309129536152, -0.027975186705589294, -0.0863143727183342, -0.05480685085058212, 0.03299136459827423, -0.03356444835662842, -0.028653616085648537, 0.045584436506032944, 0.033306583762168884, 0.09614923596382141, 0.017688198015093803, -0.023803651332855225, -0.12313491106033325, -0.03502238169312477, -0.013336953707039356, -0.036562759429216385, -0.059243619441986084, 0.03687332570552826, 0.0780874714255333, 0.006675191689282656, 0.03660052269697189, 0.01808124966919422, -0.009162923321127892, -0.0051018293015658855, -0.061128221452236176, 0.00960067193955183, 0.06057900935411453, -0.03365681692957878, -0.022207653149962425, -0.08694030344486237, 0.07638199627399445, 0.0031055680010467768, -0.044182274490594864, 0.005295243579894304, 0.09590651839971542, 0.0440993569791317, -0.06018759682774544, 0.01626233011484146, 0.005533558316528797, -0.029054615646600723, 0.07327631860971451, 0.08725178986787796, -0.04105745255947113, 0.06394554674625397, 0.008515613153576851, -0.00032472386374138296, -0.08761446177959442, -0.11095456779003143, 0.0026501340325921774, 0.02933618798851967, 0.012114507146179676, 0.025211820378899574, 0.007417744491249323, 0.04520784318447113, -0.06430398672819138, 0.052304189652204514, -0.06405846029520035, -0.08715935796499252, -0.021776312962174416, -0.019678553566336632, 0.002665633801370859, 0.014117591083049774, 0.02169046923518181, 0.05606963485479355, 0.028627198189496994, -0.01810680888593197, 0.0020587893668562174, 0.07768077403306961, -0.00872818287461996, -0.10164687037467957, 0.04246654734015465, 0.043676845729351044, 0.029946831986308098, -0.14255383610725403, 0.037055253982543945, 0.011626947671175003, 0.03242622688412666, 0.037936851382255554, 0.05667860805988312, -0.01564117893576622, -0.06747154146432877, 0.010886484757065773, -0.09737230092287064, 0.008735775016248226, 0.0038458018098026514, 0.049286484718322754, -0.031985826790332794, 0.017480393871665, 0.04963614046573639, 0.06659503281116486, 0.019061164930462837, -0.0011309940600767732, 0.08859135210514069, -0.05554729700088501, -0.04617362096905708, -0.04855433478951454, 0.02426154725253582, -0.016500180587172508, -0.026408182457089424, 0.023899555206298828, -0.01950809173285961, -2.7082598220968622e-33, -0.0646037682890892, -0.021342767402529716, 0.05676981806755066, -0.04917362704873085, 0.02844320423901081, -0.0031486786901950836, -0.07653578370809555, -0.07001898437738419, 0.12516281008720398, 0.05299859866499901, -0.12384384125471115, -0.013792257755994797, 0.09192648530006409, -0.03883325681090355, 0.07124511897563934, 0.011595306918025017, -0.029926292598247528, -0.0537598691880703, -0.02064354717731476, 0.1550818532705307, -0.03509249910712242, 0.00679398700594902, -0.12826372683048248, 0.028627952560782433, 0.10389652103185654, 0.04300307855010033, 0.013888412155210972, -0.09300997853279114, 0.00024805913562886417, 0.015276898629963398, -0.051305487751960754, -0.052442751824855804, 0.00844561867415905, 0.08726423233747482, -0.11764136701822281, -0.01104201190173626, 0.020380642265081406, 0.01140905823558569, 0.021828029304742813, 0.04933477193117142, 0.046708133071660995, -9.64852879405953e-05, 0.02680022083222866, 0.07527665793895721, 0.007349398918449879, 0.021862735971808434, -0.003977557178586721, -0.03142981976270676, 0.07222198694944382, 0.006699224002659321, 0.10900121927261353, 0.06298476457595825, -0.008751148357987404, 0.06552401185035706, -0.03467912599444389, 0.038940221071243286, -0.025164352729916573, -0.043353430926799774, 0.027322785928845406, -0.04627161845564842, -0.03646157681941986, 0.03148790821433067, 0.038066960871219635, -0.050968073308467865, -0.06716247648000717, 0.011407881043851376, -0.053164564073085785, -0.028671562671661377, -0.03506103903055191, -0.07292726635932922, -0.05188778415322304, -0.09678364545106888, -0.07392847537994385, -0.03173622116446495, 0.04382198303937912, 0.005943547934293747, 0.06969770044088364, 0.09677734225988388, -0.01803971454501152, 0.06797642260789871, -0.0030479002743959427, 0.01674835756421089, -0.04077085107564926, 0.03171725943684578, -0.021339209750294685, 0.05011804774403572, -0.07602114975452423, -0.037836529314517975, -0.02974429540336132, 0.053294528275728226, -0.10560601949691772, -0.01548279169946909, 0.004874811507761478, -0.0023442974779754877, -0.11685264855623245, 2.7013968085321817e-32, 0.043914202600717545, -0.07638543844223022, -0.007063933648169041, 0.0290939062833786, -0.012903830967843533, -0.010953254997730255, -0.02079973928630352, 0.10793676972389221, -0.036941371858119965, -0.010798119939863682, -0.028615517541766167, -0.013386956416070461, -0.004366549663245678, -0.02501300722360611, -0.018872270360589027, 0.02803165838122368, 0.014913499355316162, 0.008601566776633263, 0.06488537043333054, 0.012321114540100098, -0.047064341604709625, 0.07507979869842529, 0.010986878536641598, 0.03681466728448868, 0.03197464719414711, -0.0371890664100647, -0.04779705032706261, -0.03145816549658775, 0.0017299831379204988, 0.013482248410582542, -0.08955981582403183, -0.07781854271888733, 0.02227788418531418, -0.017945675179362297, -0.013392318971455097, -0.007936828769743443, 0.007735680788755417, 0.020942172035574913, -0.02821912243962288, 0.036768317222595215, 0.06074700504541397, 0.020992180332541466, 0.05476273596286774, -0.02535472996532917, 0.034111205488443375, 0.05330900102853775, -0.021452153101563454, -0.039197370409965515, 0.011918338015675545, 0.02444310113787651, -0.05787602812051773, -0.05691514536738396, 0.11817590147256851, 0.07648395746946335, -0.1051701232790947, -0.039656929671764374, -0.05334107577800751, -0.0761701762676239, 0.00756370322778821, -0.031463511288166046, -0.013009515590965748, -0.06232013925909996, -0.043933141976594925, 0.04329930618405342],
    "identifier": "tools/python_travel_tools.py:find_travel_insurance_options:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "find_travel_insurance_options",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get the currency exchange rate between two currencies",
    "embedding": [0.0076715825125575066, 0.05708659067749977, -0.022322462871670723, 0.05109480768442154, 0.0032631868962198496, -0.06114589422941208, -0.03756577894091606, 0.012338387779891491, 0.08952730149030685, 0.0180354006588459, -0.05221472680568695, -0.12172174453735352, -0.035647712647914886, 0.005887562874704599, 0.07803564518690109, -0.08248292654752731, -0.036902301013469696, 0.04969649389386177, 0.010804210789501667, 0.038357943296432495, 0.010880057699978352, -0.09980884939432144, -0.1124952957034111, -0.03181842342019081, 0.0009529151720926166, 0.14013385772705078, 0.04623670130968094, 0.04128175973892212, 0.010057618841528893, 0.015375948511064053, 0.06602834910154343, -0.053258266299963, -0.04122547432780266, -0.010082866996526718, -0.004968434572219849, 0.011980212293565273, -0.041243065148591995, 0.003772139549255371, 0.021764902397990227, 0.014584212563931942, 0.02725507877767086, 0.016549700871109962, 0.030642127618193626, -0.0241601150482893, -0.026723850518465042, -0.021391913294792175, -0.03282177448272705, 0.09838481992483139, -0.012720471248030663, 0.04620996490120888, 0.053099554032087326, 0.011046060360968113, -0.009135178290307522, 0.021786466240882874, 0.017000099644064903, 0.06184631213545799, 0.09255705028772354, -0.02537395805120468, 0.014461329206824303, 0.016144439578056335, -0.09010595083236694, -7.572895992780104e-05, -0.00964502152055502, -0.011332876980304718, -0.017458686605095863, -0.008474975824356079, 0.07656119018793106, 0.03428000956773758, -0.03161558136343956, 0.0073133246041834354, -0.12601453065872192, -0.08396827429533005, 0.054342180490493774, -0.04622308909893036, 0.047562506049871445, -0.06480595469474792, 0.02845928817987442, 0.010016705840826035, 0.054382409900426865, 0.053164154291152954, 0.00033924548188224435, 0.008169811218976974, -0.039748094975948334, -0.02979442849755287, 0.060078199952840805, -0.056464388966560364, 0.088447205722332, 0.010414598509669304, 0.04580438882112503, -0.06746811419725418, -0.004483662545681, 0.06838057935237885, 0.06416139006614685, 0.01779593527317047, 0.009150441735982895, 0.07080383598804474, 0.011901013553142548, 0.06533603370189667, 0.04672957584261894, 0.08014940470457077, 0.07615669816732407, 0.013549945317208767, -0.02102174051105976, 0.02561202645301819, -0.03947605565190315, 0.023463213816285133, -0.09852178394794464, 0.02442772500216961, -0.03131154179573059, 0.01234399527311325, -0.07719912379980087, 0.05601636692881584, -0.04665081202983856, -0.06133769080042839, 0.069941446185112, -0.020612960681319237, 0.03604719787836075, -0.05899791792035103, 0.13011160492897034, -0.033388540148735046, 0.0457492470741272, -0.07838600128889084, -0.010628706775605679, -0.002244300674647093, -0.00862871203571558, -0.07125281542539597, 0.04078591987490654, -0.05692194774746895, -0.04797784611582756, 0.013530319556593895, 0.06891445070505142, -0.07914937287569046, -0.013932992704212666, 0.11023891717195511, -0.07564573734998703, 0.06996554136276245, -0.024337105453014374, -0.017866788432002068, -0.05751696601510048, 0.04759850353002548, 0.0341213084757328, -0.04451538994908333, -0.07849706709384918, 0.01040823943912983, 0.01546886283904314, 0.027491724118590355, 0.05869053676724434, 0.06825577467679977, -0.00319494167342782, -0.03857250139117241, 0.028797723352909088, -0.022593865171074867, 0.052799541503190994, 0.0095601174980402, -0.010174933820962906, 0.06765728443861008, 0.05116542801260948, -0.07264968007802963, -0.04328601434826851, -0.011206413619220257, -0.06779627501964569, -0.06777110695838928, -0.04623410105705261, 0.027805816382169724, 0.09070868045091629, 0.015797028318047523, 0.03239969536662102, 0.020863570272922516, -0.0212123803794384, 0.01063074916601181, 0.023850947618484497, 0.002787348348647356, -0.10437344014644623, -0.023218413814902306, 0.04826726019382477, -0.04141029715538025, -0.016796911135315895, 0.04279549792408943, -0.027051324024796486, 0.020673533901572227, -0.09122221171855927, -0.0778757631778717, 0.02828904427587986, -0.03561752662062645, 0.053507912904024124, -0.01254800334572792, -0.03456958755850792, -0.036933157593011856, -0.0669572502374649, 0.08465497940778732, 0.10840953141450882, -0.051094889640808105, -0.09269944578409195, 0.04352044686675072, -0.0016280107665807009, -0.07925879955291748, 0.025240853428840637, 0.06163132190704346, -0.07373321056365967, 0.003292771987617016, 0.10208611190319061, 0.049395255744457245, -0.020959028974175453, 0.06184297055006027, 0.017240816727280617, -0.023880479857325554, -0.025060631334781647, -0.06366075575351715, -0.10972927510738373, -0.0015272028977051377, 0.0336807481944561, -0.02458794414997101, -0.028915561735630035, 0.021771466359496117, -0.02874784730374813, 0.08691738545894623, 0.09413508325815201, -0.05719255283474922, -0.026215428486466408, -0.056134745478630066, -0.0706983283162117, -0.02862657979130745, 0.01613868959248066, -1.6838583723414867e-33, -0.0023691649548709393, 0.0646107867360115, -0.06822705268859863, 0.030733881518244743, 0.060275137424468994, 0.007531561888754368, 0.00046348609612323344, 0.0938597172498703, 0.02084391750395298, 0.07547035813331604, 0.010402843356132507, 0.0006249546422623098, -0.02346760407090187, 0.012332073412835598, 0.11200535297393799, 0.039406146854162216, 0.08237065374851227, 0.09506480395793915, -0.08386809378862381, 0.003556707641109824, 0.004570841323584318, 0.0066661895252764225, 0.01338268257677555, -0.035506848245859146, -0.04299961403012276, -0.04378349706530571, -0.012052084319293499, -0.10841243714094162, -0.07019928842782974, -0.020114285871386528, -0.006220343988388777, 0.027279365807771683, 0.0207448061555624, 0.12881486117839813, -0.054930783808231354, 0.01215086504817009, -0.06492549926042557, 0.0087432861328125, 0.04445326700806618, -0.0024429145269095898, -0.008573162369430065, 0.05700811371207237, -0.05229273438453674, 0.04270097240805626, -0.011167176067829132, 0.06734684854745865, 0.005858404096215963, 0.11162783950567245, 0.051184844225645065, 0.014659842476248741, 0.15188807249069214, -0.04484463483095169, 0.028358962386846542, -0.029592255130410194, -0.08151446282863617, -0.05134424567222595, 0.017973866313695908, 0.004291227553039789, -0.02968982420861721, -0.02415122464299202, 0.04408547282218933, -0.030211227014660835, 0.06955727934837341, 0.009345834143459797, -0.0003952329861931503, 0.048337358981370926, 0.008669438771903515, -0.0023273597471415997, 0.06584461033344269, 0.022260436788201332, 0.0224722009152174, 0.07646334171295166, -0.016127394512295723, -0.01851046457886696, 0.03373945876955986, -0.010811304673552513, 0.03675198554992676, 0.008725048042833805, 0.019191164523363113, 0.08108111470937729, -0.08640407025814056, 0.02956714853644371, 0.017851723358035088, -0.0014292828273028135, -0.033071644604206085, 0.02150013856589794, -0.030058542266488075, -0.00899455789476633, -0.03293979912996292, -0.023590251803398132, -0.08924055844545364, -0.020651042461395264, 0.09564191102981567, -0.050105877220630646, 0.01033246610313654, 1.2105393639033524e-32, -0.02079816907644272, 0.017964668571949005, -0.010374465957283974, 0.05796577036380768, -0.06642360985279083, 0.06951611489057541, 0.008859772235155106, 0.009235823526978493, -0.0413593165576458, 0.06452342122793198, -0.06839455664157867, 0.08070238679647446, -0.04877195507287979, -0.01197747141122818, -0.017981359735131264, -0.03901541605591774, -0.007635599002242088, -0.027661848813295364, 0.01613449491560459, -0.03827221319079399, -0.04784785211086273, 0.04098706692457199, 0.010613339021801949, -0.010020729154348373, -0.0013745538890361786, 0.04747644066810608, -0.0041397628374397755, 0.06356808543205261, -0.05311070382595062, -0.07423939555883408, -0.02886420674622059, -0.09842802584171295, -0.0732342004776001, -0.07252548635005951, 0.00642485311254859, 0.013802162371575832, -0.04025616869330406, -0.012854873202741146, 0.0019069620175287127, 0.008196148090064526, -0.03576326370239258, -0.019291454926133156, 0.0007560661761090159, -0.023771686479449272, 0.0719749704003334, 0.024568725377321243, -0.05466035380959511, -0.004966035019606352, -0.028780661523342133, -0.08884596824645996, 0.039406903088092804, -0.006793783511966467, 0.007558087352663279, 0.026706209406256676, -0.052827320992946625, -0.08800201117992401, -0.08069060742855072, -0.0790383592247963, 0.025204887613654137, 0.02415996417403221, -0.1049923524260521, -0.0469655841588974, -0.019615111872553825, -0.07376127690076828],
    "identifier": "tools/python_travel_tools.py:get_currency_exchange_rate:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "get_currency_exchange_rate",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get public transportation routes in a specific city",
    "embedding": [0.04286893457174301, -0.052917156368494034, -0.018322087824344635, 0.047351423650979996, 0.04187435284256935, 0.029157154262065887, 0.03714020550251007, 0.031156865879893303, -0.12570956349372864, -0.031801994889974594, 0.015743985772132874, -0.07205788791179657, -0.10157930850982666, 0.006809622049331665, 0.011393318884074688, -0.11035321652889252, 0.08052040636539459, 0.034386537969112396, 0.08287707716226578, -0.005568000487983227, 0.031297653913497925, 0.003638793947175145, -0.07622293382883072, -0.027472127228975296, 0.026428695768117905, 0.12155715376138687, 0.07399246096611023, 0.0022096505854278803, 0.005880133714526892, -0.01525798812508583, 0.003583471290767193, -0.05007496103644371, -0.049248263239860535, -0.0010737606789916754, 0.107602059841156, -0.021666795015335083, 0.04768284410238266, 0.013020189478993416, 0.07353127002716064, -0.03873584792017937, 0.11169831454753876, 0.001536238589324057, -0.03961288556456566, 0.05876244232058525, 0.016782447695732117, -0.009236861951649189, 0.015787187963724136, -0.02831742912530899, 0.02818434126675129, -0.08910685032606125, 0.03912580385804176, -0.06179489940404892, -0.0383022204041481, 0.044343188405036926, 0.04624349623918533, -0.0023989188484847546, -0.03190789744257927, 0.009950848296284676, 0.03273038566112518, 0.019125811755657196, -0.06655050814151764, -0.08960075676441193, -0.029251914471387863, -0.03897128254175186, 0.03223903477191925, -0.006318825297057629, 0.08631712198257446, 0.02166413702070713, 0.028912704437971115, -0.10827803611755371, -0.007178165949881077, 0.051903653889894485, -0.008861769922077656, 0.04677592217922211, 0.018738988786935806, -0.07466894388198853, 0.03175166994333267, 0.03581821545958519, 0.013796587474644184, -0.034613676369190216, 0.027213694527745247, 0.030798716470599174, 0.0013135990593582392, 0.05112246796488762, 0.017872720956802368, 0.016090018674731255, -0.06323040276765823, -0.0052639939822256565, 0.02462109550833702, 0.03486492857336998, -0.10936430096626282, 0.04174809902906418, -0.07977725565433502, -0.024931350722908974, -0.04075412452220917, 0.03626080974936485, -0.08389988541603088, 0.08014793694019318, 0.06698869168758392, 0.04660733416676521, -0.022384727373719215, 0.04065003991127014, 0.01773008331656456, 0.010802337899804115, 0.007583977654576302, 0.008341347798705101, -0.005270437803119421, -0.02758934535086155, 0.0010093532036989927, 0.048604536801576614, 0.03021707385778427, 0.025557128712534904, -0.01442125253379345, -0.012462334707379341, 0.003780567552894354, -0.0478198267519474, -0.011522741056978703, 0.028658973053097725, -0.05031392723321915, 0.04589269682765007, -0.14643295109272003, -0.05935939401388168, 0.04155994951725006, 0.03726720064878464, -0.05162898823618889, -0.026539623737335205, 0.030366551131010056, -0.08117552846670151, -0.00618631299585104, -0.006982548162341118, 0.07605991512537003, 0.05318949744105339, -0.056191883981227875, -0.009315555915236473, -0.0060242242179811, -0.0073748319409787655, 0.04020088538527489, -0.005127251613885164, -0.0567350834608078, 0.03745958209037781, 0.08626346290111542, -0.03528139740228653, 0.1314675211906433, -0.026954276487231255, -0.016855964437127113, -0.00326009513810277, -0.04577968642115593, 0.028867818415164948, -0.017269060015678406, -0.06207859888672829, 0.0412340871989727, -0.1539345234632492, 0.030823593959212303, -0.02931729145348072, -0.03387020528316498, 0.03824136033654213, 0.08531346172094345, 0.05535458028316498, 0.06472180783748627, 0.038193024694919586, -0.005177210085093975, 0.07143717259168625, 0.01532822847366333, -0.01952323690056801, -0.048422981053590775, 0.041324131190776825, 0.0002626436180435121, 0.0159259345382452, -0.0063346982933580875, -0.0018881483701989055, -0.03817296400666237, 0.021778836846351624, -0.013112274929881096, 0.04249752685427666, -0.05334685370326042, 0.003478403901681304, -0.030151566490530968, 0.02613014727830887, 0.023043379187583923, 0.05557137355208397, -0.05238451808691025, -0.04689091816544533, 0.0007417769520543516, -0.022122355177998543, 0.03850969299674034, 0.002523988950997591, 0.07410427927970886, 0.03996320813894272, 0.03877750411629677, 0.069827601313591, -0.0024698295164853334, -0.05495601147413254, 0.08421415090560913, -0.022174164652824402, -0.0658588781952858, 7.912009459687397e-05, -0.012568863108754158, 0.024724939838051796, 0.04206172004342079, -0.0921289250254631, 0.032557569444179535, 0.006286787334829569, -0.021302398294210434, -0.058501482009887695, -0.07909134030342102, 0.00940097775310278, -0.007876962423324585, -0.02398010902106762, -0.033151961863040924, 0.028515294194221497, -0.016871590167284012, 0.07130315154790878, 0.16953086853027344, 0.052478037774562836, -0.003857659175992012, -0.04018736630678177, 0.02271740697324276, -0.03852686658501625, -0.02681499533355236, 0.03251641243696213, -0.09024793654680252, 0.02063910849392414, -0.05116719380021095, 3.668267140301216e-33, 0.006361136678606272, -0.020089874044060707, 0.06038808450102806, -0.0579204224050045, -0.0451262965798378, -0.013052033260464668, 0.05533193051815033, -0.0555068664252758, 0.07433342188596725, 0.11513030529022217, -0.02373185195028782, -0.0864265114068985, 0.09994704276323318, -0.017634140327572823, 0.09355340152978897, -0.08718889206647873, 0.056414518505334854, 0.0020033183973282576, -0.15048734843730927, 0.05482974275946617, -0.06698288768529892, 0.004084914457052946, -0.16789908707141876, -0.02381073124706745, 0.054221197962760925, 0.032532960176467896, 0.012803283520042896, -0.03758435696363449, -0.04225069284439087, 0.040776632726192474, -0.03241200000047684, -0.08162867277860641, 0.01567932590842247, 0.06874723732471466, -0.07929258793592453, -0.012129627168178558, 0.03587656468153, 0.07820705324411392, 0.060377493500709534, 0.024832114577293396, 0.011381799355149269, -0.055603981018066406, 0.030227547511458397, 0.016331851482391357, 0.0007988029974512756, 0.10225486010313034, 0.06138633191585541, 0.0008033373160287738, -0.04678722098469734, -0.005617042537778616, 0.10271703451871872, 0.05731905251741409, -0.056185755878686905, 0.07345756143331528, 0.0958024188876152, 0.051717258989810944, -0.015774188563227654, -0.0294593907892704, -0.026576178148388863, -0.05642669275403023, -0.057963982224464417, -0.004439620766788721, 0.01685461774468422, -0.009541231207549572, 0.002391289686784148, -0.03091973252594471, -0.0015644702361896634, -0.09503152966499329, 0.04628031328320503, -0.021320370957255363, 0.01663169078528881, 0.04011055827140808, -0.016328394412994385, 0.016998453065752983, -0.02845282480120659, -0.04717705771327019, 0.09365762025117874, 0.1293879747390747, 0.02643430233001709, 0.044340819120407104, -0.026624148711562157, -0.005825727246701717, -0.004027613438665867, -0.0164431631565094, -0.02184336818754673, 0.08288861811161041, -0.058355893939733505, -0.035745177417993546, -0.0004812109109479934, 0.06935128569602966, -0.03415583074092865, 0.034998346120119095, 0.03175154700875282, -0.009591394104063511, -0.05233639478683472, 1.1112473397361108e-32, -0.027555055916309357, 0.012677442282438278, -0.08764176070690155, -0.025854943320155144, 0.041931282728910446, 0.030258744955062866, 0.0062547894194722176, 0.02317054383456707, -0.019537365064024925, -0.0044913762249052525, -0.014203432947397232, 0.054727718234062195, -0.1035999208688736, 0.03322489187121391, -0.07258465141057968, 0.03933147341012955, 0.027348633855581284, -0.01565873809158802, 0.016360459849238396, 0.0012619197368621826, 0.012802766636013985, 0.005272934678941965, -0.019526589661836624, -0.021636994555592537, 0.03286081925034523, -0.07012468576431274, -0.016797123476862907, -0.03181305527687073, 0.051701270043849945, 0.009174590930342674, -0.07794613391160965, -0.035962898284196854, -0.0019544463139027357, 0.0020995191298425198, -0.03151446953415871, 0.008581100031733513, -0.002670004963874817, 0.027920406311750412, 0.031231222674250603, 0.06710051745176315, 0.012402717024087906, -0.014255515299737453, 0.0012266046833246946, -0.03333664312958717, 0.09559228271245956, -0.03856169432401657, -0.004687014501541853, -0.07978092133998871, 0.01614747755229473, -0.0036917722318321466, -0.12497194856405258, -0.0375974103808403, -0.017523419111967087, -0.01686122827231884, -0.044638488441705704, -0.026216188445687294, -0.050952453166246414, -0.07344808429479599, -0.05468897148966789, -0.0654587596654892, -0.021374529227614403, 0.10743211954832077, -0.022144019603729248, 0.06278945505619049],
    "identifier": "tools/python_travel_tools.py:get_public_transportation_routes:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "get_public_transportation_routes",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get travel advice for a specific destination",
    "embedding": [0.12486357241868973, -0.04381238669157028, -0.042917121201753616, -0.012759676203131676, 0.04891858622431755, -0.05045353248715401, 0.08012386411428452, 0.07545922696590424, -0.06264223903417587, -0.03909701481461525, 0.017818696796894073, -0.026148755103349686, -0.07205408066511154, 0.0607430636882782, -0.0156953576952219, -0.0025185777340084314, 0.10924231261014938, 0.028601670637726784, 0.03858213126659393, -0.03802967444062233, 0.0336107574403286, 0.04737742245197296, -0.049834899604320526, 0.05296793952584267, 0.006019504740834236, 0.08317583799362183, 0.049437619745731354, 0.03034435398876667, -0.047781363129615784, -0.04346132278442383, -0.030712835490703583, 0.04458441212773323, -0.06234043464064598, -0.04110472649335861, 0.052583176642656326, 0.08847745507955551, -0.07611897587776184, 0.04854588583111763, -0.006950266193598509, 0.026042096316814423, 0.049047235399484634, -0.060360733419656754, 0.08896120637655258, 0.012210508808493614, -0.0005471288459375501, -0.06092483922839165, 0.048510659486055374, 0.02894764579832554, 0.03762524574995041, 0.029970413073897362, -0.07245060801506042, -0.05393249914050102, -0.023027418181300163, -0.11119968444108963, 0.09948120266199112, -0.01962457224726677, -0.008512793108820915, -0.020615631714463234, -0.021134905517101288, 0.03874089568853378, 0.01144476793706417, -0.08611743152141571, 0.0715818777680397, -0.024306606501340866, -0.01747037097811699, 0.08703896403312683, 0.010014256462454796, 0.1306258887052536, -0.002288142452016473, -0.042303409427404404, -0.030761368572711945, 0.022579669952392578, -0.09044487029314041, 0.05221657454967499, 0.021805724129080772, -0.00928553193807602, -0.020885631442070007, 0.009610850363969803, 0.006497473455965519, 0.0001291574735660106, -0.013321403414011002, -0.04436866566538811, -0.046961553394794464, -0.01477283425629139, 0.036570578813552856, -0.0710555762052536, 0.032737355679273605, -0.002937682904303074, 0.08398468792438507, 0.03869512304663658, 0.033229898661375046, -0.011751319281756878, -0.049756284803152084, 0.05487538129091263, 0.023970237001776695, 0.0630020946264267, -0.06172395125031471, -0.05475740507245064, -0.00743497908115387, 0.08943349123001099, 0.05069771036505699, -0.022312169894576073, 0.03228380158543587, 0.012119029648602009, -0.025577181950211525, -0.028711523860692978, -0.014054820872843266, 0.03753257170319557, 0.07857683300971985, 0.042735256254673004, -0.07446499913930893, 0.0936444029211998, -0.06218423321843147, -0.08455051481723785, -0.010033130645751953, -0.03428103029727936, 0.02853359468281269, 0.017912443727254868, 0.006996733136475086, -0.026453040540218353, -0.006207767408341169, -0.08930715173482895, 0.011635069735348225, -0.0074100191704928875, -0.05798574537038803, -0.03891461342573166, 0.007586604915559292, -0.07183694839477539, -0.015275911428034306, 0.05313815176486969, 0.11416874080896378, 0.10617740452289581, -0.026921164244413376, 0.047153204679489136, -0.11203625798225403, -0.06067146733403206, -0.03103388473391533, -0.024687500670552254, 0.06576089560985565, 0.013842273503541946, 0.09544053673744202, -0.0022218627855181694, 0.049286529421806335, 0.01133729051798582, 0.06372000277042389, -0.008582222275435925, -0.0066690812818706036, -0.028903745114803314, 0.017332537099719048, -0.052144844084978104, 0.0024724085815250874, -0.08367609977722168, -0.010168480686843395, -0.06387759745121002, -0.028176836669445038, -0.009882917627692223, 0.05853087827563286, 0.004867882933467627, -0.03908948600292206, 0.07762376219034195, 0.029610423371195793, -0.0477609857916832, 0.07123757153749466, 0.04565801844000816, -0.052804961800575256, 0.02413780800998211, -0.052248768508434296, -0.01995559222996235, -0.07701309770345688, -0.0021301540546119213, -0.04565795883536339, 0.055791109800338745, 0.06140570715069771, 0.035775016993284225, -0.029388630762696266, 0.040937431156635284, -0.02808736078441143, 0.06734015047550201, -0.08529126644134521, -0.05974512919783592, 0.04774067550897598, -0.014416427351534367, -0.023170335218310356, 0.024937286972999573, 0.026998860761523247, 0.030153634026646614, 0.04060870409011841, -0.10925963521003723, 0.06081246957182884, 0.018723882734775543, 0.02169392630457878, -0.07115643471479416, 0.05815160647034645, 0.033691518008708954, 0.030848439782857895, -0.01042227353900671, -0.01979101076722145, 0.02899342216551304, -0.008426901884377003, 0.01221845205873251, -0.0019019151804968715, -0.021044017747044563, 0.002304504159837961, -0.019824344664812088, -0.08223061263561249, -0.026894986629486084, 0.0033122997265309095, -0.0302618108689785, -0.04566378891468048, 0.0766880214214325, 0.0009706648415885866, 0.06408338248729706, 0.05459514632821083, -0.016237584874033928, 0.055669862776994705, -0.08044293522834778, 0.004449879750609398, -0.014716018922626972, -0.044988974928855896, 0.016346530988812447, -0.03295494616031647, -0.04920577257871628, -0.04589676484465599, 5.359287762988064e-33, 0.035380471497774124, -0.037631556391716, 0.066458560526371, -0.027917882427573204, 0.048529960215091705, -0.011937066912651062, 0.0339227020740509, -0.06652025878429413, 0.09192956984043121, 0.07565199583768845, -0.14943455159664154, -0.007018855307251215, 0.14985176920890808, 0.02232842706143856, 0.012977372854948044, 0.0014042288530617952, 0.05330364778637886, -0.009451155550777912, -0.04604969918727875, 0.05242033675312996, 0.016571639105677605, 0.015223652124404907, -0.14629390835762024, -0.05913451313972473, 0.07862195372581482, 0.06612253189086914, -0.010903052985668182, -0.1082252487540245, -0.043690577149391174, -0.00754293380305171, 0.007240386679768562, 0.0710487887263298, 0.012917355634272099, 0.03535761684179306, -0.07368352264165878, 0.05321057513356209, 0.016136830672621727, 0.0006442021694965661, 0.04865405336022377, 0.11742955446243286, 0.07379980385303497, 0.02176736295223236, 0.1030217781662941, 0.04130367562174797, -0.007549662608653307, -0.03729533404111862, -0.017545321956276894, -0.003399545792490244, 0.03980452939867973, -0.009437529370188713, 0.04503604397177696, 0.029485458508133888, -0.010203946381807327, 0.029556743800640106, -0.009667130187153816, 0.0159474965184927, -0.04391227662563324, -0.04481549188494682, -0.0013066442916169763, -0.0360274612903595, -0.059657372534275055, -0.0365150161087513, 0.04247085750102997, -0.06952483206987381, -0.11218181252479553, 0.024291573092341423, 0.009338196367025375, 0.032295867800712585, -0.026778383180499077, -0.025498608127236366, -0.04876180738210678, 0.01687087118625641, -0.06356927007436752, 0.00569376302883029, 0.017752820625901222, 0.04180043935775757, 0.16091661155223846, 0.05718923732638359, -0.09111563861370087, 0.02946758083999157, -0.011259620077908039, 0.033207643777132034, -0.05702187493443489, 0.0038569874595850706, 0.038647331297397614, 0.057596705853939056, 0.0026423740200698376, -0.09036792069673538, -0.02034914307296276, 0.06217401474714279, -0.059412602335214615, -0.066714346408844, -0.04012018069624901, -0.057920705527067184, -0.033737678080797195, 1.9183422752894718e-32, -0.020468367263674736, -0.026341404765844345, -0.03398284688591957, 0.0716542974114418, -0.039121486246585846, -0.006638797931373119, -0.03008943982422352, 0.02581990696489811, -0.026161273941397667, 0.05110796540975571, -0.04161062091588974, 0.020240597426891327, -0.044671010226011276, 0.04451930895447731, -0.012724039144814014, -0.0258014015853405, 0.040331874042749405, 0.04691412299871445, 0.005308263469487429, -0.02753988839685917, -0.007307090796530247, 0.03455522656440735, 0.017692841589450836, 0.01160480547696352, 0.059797532856464386, -0.02854534611105919, -0.018980056047439575, 0.02010076865553856, 0.01037374883890152, -0.02748703956604004, -0.05417728051543236, -0.047129981219768524, -0.005301942117512226, -0.0023652445524930954, -0.02995431236922741, -0.10513333976268768, -0.04807734489440918, 0.014991859905421734, -0.03536069393157959, 0.07530463486909866, -0.014872181229293346, 0.06248233839869499, 0.03377896919846535, 0.026852421462535858, 0.01905694417655468, -0.07425253838300705, 0.05082004889845848, -0.05791289731860161, -0.10722211748361588, 0.03693082183599472, -0.055103980004787445, -0.0710085928440094, 0.0562606155872345, 0.03017474338412285, -0.014262307435274124, -0.025331487879157066, -0.07867033034563065, -0.060655295848846436, -0.0008170952787622809, 0.036798130720853806, -0.03459382429718971, 0.015064534731209278, -0.11842899769544601, 0.028778232634067535],
    "identifier": "tools/python_travel_tools.py:get_travel_advice:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "get_travel_advice",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get the weather forecast for a travel destination",
    "embedding": [0.0601000040769577, -0.03132529929280281, 0.005567448679357767, 0.06654156744480133, 0.08851286768913269, -0.024501366540789604, 0.010934179648756981, 0.03580116853117943, 0.016223546117544174, -0.04721827805042267, -0.0725911408662796, -0.020875263959169388, -0.04907061904668808, 0.0037869878578931093, 0.040927398949861526, -0.0640820786356926, 0.012826517224311829, -0.002996366238221526, 0.10355133563280106, -0.007359873503446579, -0.05805705487728119, 0.03605909273028374, -0.09061961621046066, 0.022456573322415352, 0.06086280941963196, 0.10765951871871948, 0.02718561328947544, 0.07703688740730286, -0.06691832840442657, 0.08670786023139954, -0.04994048923254013, 0.012360281310975552, -0.06714464724063873, 0.0047225444577634335, -0.020854715257883072, 0.006385724991559982, 0.06339067965745926, -0.0400979183614254, -0.06947467476129532, 0.039231281727552414, 0.1259831041097641, 0.021119536831974983, -0.002174197230488062, -0.0032649447675794363, 0.012576206587255001, -0.0024538878351449966, 0.010302498005330563, 0.01891174167394638, -0.002588920295238495, 0.04230668395757675, -0.044714055955410004, 0.011973035521805286, -0.07405219227075577, -0.059906166046857834, 0.07755224406719208, -0.0018601506017148495, -0.08043889701366425, -0.06646434962749481, 0.02052091807126999, 0.027006881311535835, -0.03298158571124077, -0.07202360033988953, -0.010369233787059784, 0.018068330362439156, 0.011132621206343174, 0.09488093852996826, 0.027944762259721756, 0.12079890072345734, -0.06429073214530945, -0.1128031313419342, -0.038341883569955826, 0.07409578561782837, 0.015295597724616528, -0.0040121544152498245, 0.030150460079312325, -0.03810467943549156, 0.026621628552675247, -0.02011900767683983, -0.0032105776481330395, 0.018331054598093033, 0.03313647210597992, -0.0582895502448082, 0.022557612508535385, 0.00830429419875145, 0.07051552832126617, -0.007741703651845455, -0.016436755657196045, 0.003021595301106572, 0.0772085189819336, -0.03328109160065651, 0.08434338867664337, -0.039698921144008636, -0.03180762380361557, 0.07577958703041077, -0.031429972499608994, 0.06798645108938217, 0.00116400804836303, -0.035099904984235764, 0.022404322400689125, 0.007994813844561577, 0.0030191491823643446, -0.03272947296500206, 0.0725632905960083, 0.05556798353791237, -0.038709722459316254, -0.03296081721782684, -0.011398689821362495, -0.010155576281249523, 0.044098153710365295, -0.013007106259465218, -0.05330684781074524, -0.037523940205574036, -0.011118912138044834, -0.026952669024467468, 0.041442979127168655, -0.052063290029764175, -0.02654942311346531, 0.07388178259134293, -0.07154645025730133, -0.012529336847364902, -0.019811393693089485, -0.06626920402050018, 0.026728587225079536, 0.04520578682422638, -0.06670122593641281, 0.013616912998259068, 0.12060035020112991, -0.07290521264076233, 0.05538313090801239, 0.027926143258810043, 0.07625192403793335, 0.09286873787641525, 0.02746928483247757, 0.047328267246484756, -0.10724296420812607, -0.015311544761061668, 0.022228633984923363, -0.048007670789957047, 0.016301462426781654, 0.06783244758844376, 0.057682104408741, -0.050237987190485, 0.004047394264489412, 0.013452568091452122, 0.08509275317192078, 0.013093141838908195, -0.016313951462507248, -0.03111235238611698, -0.04952046275138855, -0.011866740882396698, 0.018705153837800026, -0.12836892902851105, -0.03480232506990433, -0.049724940210580826, 0.052040405571460724, -0.017012769356369972, 0.047703083604574203, 0.050789929926395416, 0.0089469775557518, 0.02709396742284298, 0.03057428076863289, 0.006173247005790472, 0.037827569991350174, -0.0349174365401268, -0.054572075605392456, 0.04482808709144592, -0.028723208233714104, 0.025997724384069443, 0.028690913692116737, -0.03380537033081055, -0.07953672856092453, 0.014202515594661236, 0.009582615457475185, -0.03436318412423134, -0.008220916613936424, 0.036935482174158096, -0.0038717600982636213, 0.03540835529565811, -0.03091319464147091, -0.05103454366326332, -0.016938339918851852, -0.016124378889799118, 0.019615119323134422, 0.06307212263345718, 0.09655459225177765, -0.07003109157085419, 0.04084507375955582, -0.055577218532562256, 0.047795459628105164, 0.021301904693245888, 0.018577704206109047, -0.08448299020528793, 0.07648716121912003, 0.060196053236722946, -0.008557246997952461, 0.024545473977923393, -0.08689747005701065, 0.022139953449368477, 0.05392036586999893, -0.010993345640599728, -0.017361000180244446, 0.024808572605252266, -0.025561967864632607, -0.008398874662816525, -0.04968304559588432, -0.0654267743229866, 0.009145863354206085, 0.06989385932683945, -0.08706385642290115, 0.02087952382862568, 0.009602108970284462, 0.006952306255698204, 0.035667650401592255, 0.009258450008928776, 0.03314853087067604, 0.04543827846646309, 0.03523194417357445, -0.0013581282692030072, -0.02910645864903927, 0.009239965118467808, -0.07916471362113953, 0.005716356914490461, -0.02491256780922413, 5.93903312794797e-33, 0.050354719161987305, -0.01006928738206625, -0.017580268904566765, -0.03983642905950546, -0.02220967225730419, -0.048644017428159714, -0.0007803597254678607, -0.015351834706962109, 0.054690878838300705, 0.05109431967139244, -0.1339716911315918, -0.04247896373271942, 0.06752561032772064, -0.013960272073745728, 0.02358340285718441, 0.01431490108370781, 0.03672242909669876, 0.02316387929022312, -0.06958619505167007, 0.028878195211291313, -0.0019173434702679515, -0.010451125912368298, -0.1372806280851364, -0.06434813141822815, 0.03201545029878616, -0.023772723972797394, 0.04330522194504738, -0.013725586235523224, -0.04072843864560127, -0.0368957445025444, -0.06507140398025513, 0.030136022716760635, -0.04791136458516121, 0.07394179701805115, -0.084974005818367, 0.07542983442544937, 0.02951403521001339, -0.0026912481989711523, -0.05405651405453682, 0.0644664466381073, 0.05076873302459717, -0.02384917065501213, 0.053438879549503326, 0.014057012274861336, 0.06675633043050766, -0.012074153870344162, 0.027592357248067856, 0.05654424801468849, -0.011670558713376522, -0.02552882581949234, 0.10189775377511978, 0.0033531745430082083, -0.06756030023097992, 0.07506871223449707, 0.01890186034142971, -0.017068156972527504, -0.024377470836043358, -0.04192262142896652, -0.0056341709569096565, 0.08813448250293732, -0.04228271543979645, -0.07807604223489761, 0.0629720464348793, -0.03422680124640465, -0.08956894278526306, 0.025224879384040833, 0.0207320898771286, -0.026689141988754272, 0.052783578634262085, -0.008972197771072388, 0.0268621277064085, -0.003004542551934719, -0.04779229685664177, 0.07240723073482513, -0.005426950287073851, 0.015855006873607635, 0.07132221758365631, 0.08919025957584381, -0.07963813096284866, 0.09503602236509323, -0.021882496774196625, 0.02622874826192856, -0.06282131373882294, 0.039961203932762146, 0.030876699835062027, -0.019564323127269745, 0.08234106004238129, -0.1129155233502388, -0.015842990949749947, 0.037093982100486755, -0.04074246063828468, 0.06569164991378784, -0.08926762640476227, 0.0009924325859174132, -0.008736909367144108, 1.9064863494696736e-33, -0.011050796136260033, 0.000465159973828122, -0.01792140118777752, 0.029974907636642456, -0.042918771505355835, -0.002150891348719597, 0.039477087557315826, 0.016076723113656044, 0.05780675634741783, 0.001543611753731966, -0.030715173110365868, -0.03135180473327637, -0.025143373757600784, 0.07396620512008667, -0.08249136805534363, 0.014603433199226856, 0.030892107635736465, 0.03885434567928314, 0.01716798171401024, -0.035976964980363846, 0.03941451385617256, 0.03573877364397049, -0.014225847087800503, 0.0122994901612401, 0.16535064578056335, -0.02081380970776081, -0.07402696460485458, -0.03019198402762413, 0.006654506549239159, 0.11383379250764847, -0.11980971693992615, -0.03740387037396431, 0.0026287001091986895, -0.030718166381120682, -0.06476859003305435, -0.048454973846673965, 0.0006215140456333756, 0.025360871106386185, -0.02904936484992504, 0.09748416393995285, 0.0453026182949543, 0.11122768372297287, -0.01956258714199066, 0.002504728501662612, 0.010906390845775604, -0.008835205808281898, 0.009367073886096478, -0.07356636226177216, 0.01815740391612053, 0.060540907084941864, -0.022186744958162308, -0.10917115211486816, 0.10941469669342041, 0.0021528906654566526, -0.08205443620681763, -0.08005234599113464, -0.052149698138237, -0.07191744446754456, 0.014607878401875496, -0.047645535320043564, -0.09508149325847626, -0.013044926337897778, -0.10467604547739029, 0.03426628187298775],
    "identifier": "tools/python_travel_tools.py:get_weather_forecast:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "get_weather_forecast",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Organize all of your travel documents.",
    "embedding": [0.04237672686576843, 0.057531073689460754, 0.0381760410964489, -0.000718254188541323, 0.058101654052734375, -0.030635761097073555, -0.00458580581471324, -0.00683823274448514, -0.04296644404530525, -0.024561431258916855, -0.007335938047617674, 0.0621505081653595, -0.010027279146015644, 0.029381878674030304, -0.014031259343028069, -0.014298145659267902, -0.03447238728404045, -0.03885822743177414, -0.03134215995669365, -0.021477391943335533, -0.003944868221879005, 0.024348555132746696, -0.058070216327905655, 0.051361728459596634, 0.05091535300016403, 0.16743473708629608, -0.06552082300186157, -0.011248692870140076, -0.022955970838665962, -0.09061525762081146, -0.045784927904605865, 0.010472496040165424, 0.008751945570111275, 0.022342192009091377, 0.06224673241376877, 0.04425543174147606, 0.007093832362443209, 0.021766629070043564, 0.05345883592963219, -0.02928590588271618, 0.011400094255805016, -0.007777629420161247, 0.11260991543531418, -0.007452546618878841, 0.02913474105298519, -0.060930151492357254, 0.041221167892217636, 0.017602792009711266, 0.02672123722732067, 0.0031276552472263575, 0.016869759187102318, -0.06413894891738892, -0.05234347656369209, 0.015316496603190899, 0.019697261974215508, -0.04504881426692009, 0.002284005982801318, 0.005636248271912336, -0.06626535952091217, -0.03374689444899559, 0.015230695717036724, -0.0029182855505496264, 0.02737135998904705, 0.06147697940468788, -0.0467875674366951, 0.06123048812150955, -0.00017902541731018573, 0.16167128086090088, -0.005564736668020487, 0.0055195302702486515, -0.0476737916469574, -0.009118294343352318, -0.06231676787137985, 0.09437980502843857, 0.08206574618816376, -0.06613068282604218, -0.04986536502838135, 0.03354806825518608, 0.028812164440751076, 0.05908918380737305, -0.032656047493219376, -0.0023351695854216814, -0.0008167357300408185, 0.005664613097906113, 0.048374779522418976, -0.04563026502728462, 0.017704756930470467, -0.05040904879570007, -0.06387186795473099, 0.000396452727727592, 0.07347933948040009, -0.14114812016487122, 0.10809348523616791, 0.04099434241652489, -0.04326027259230614, 0.017510294914245605, -0.005580349825322628, -0.014759747311472893, 0.06042681261897087, 0.10547904670238495, 0.04350700229406357, 0.01223411038517952, 0.05342656373977661, 0.04795752093195915, -0.10068793594837189, 0.016141043975949287, 0.013921776786446571, -0.024197300896048546, 0.05852586403489113, -0.025702161714434624, -0.044213902205228806, 0.005389773286879063, -0.04183080792427063, -0.04154381528496742, -0.047588594257831573, -0.042969610542058945, -0.05317273736000061, 0.13544531166553497, -0.02274855598807335, 0.0422837994992733, 0.001201453385874629, -0.009989172220230103, 0.019705910235643387, 0.02780619077384472, -0.11699697375297546, -0.045714959502220154, 0.05571794509887695, -0.019281383603811264, 0.034378934651613235, 0.05846307799220085, 0.00023083524138201028, 0.183316171169281, 0.01798435114324093, -0.022015463560819626, -0.06243282929062843, 0.005373704247176647, -0.015512282960116863, -0.020134348422288895, 0.08254319429397583, 0.09756012260913849, 0.02598470076918602, 0.07467854768037796, 0.00959104672074318, 0.027569936588406563, 0.053223662078380585, 0.044617436826229095, 0.044158730655908585, -0.030148424208164215, 0.0019825368653982878, -0.09736105799674988, 0.00042668901733122766, -0.030148647725582123, 0.0875592827796936, -0.025903908535838127, -0.03800072893500328, -0.04743025824427605, 0.05982302129268646, -0.03544443100690842, -0.03193827345967293, 0.0337165966629982, -0.037406086921691895, -0.01449416670948267, 0.042957037687301636, 0.07307777553796768, -0.08095012605190277, -0.00023898460494820029, -0.0007712330552749336, -0.05826438590884209, -0.1533724069595337, -0.043527379631996155, 0.029699677601456642, -0.02262664958834648, 0.04399418830871582, 0.04147706925868988, 0.04429883137345314, 0.0524715818464756, 0.014695930294692516, 0.1153605580329895, -0.1113625094294548, -0.13622748851776123, -0.03295784443616867, -0.07779134809970856, -0.0437198244035244, -0.049231790006160736, 0.014026565477252007, -0.01907702162861824, -0.04874134063720703, -0.052691929042339325, 0.08108047395944595, -0.010078552179038525, 0.020647116005420685, 0.002713239286094904, 0.03485885635018349, -0.008143647573888302, 0.01909797452390194, -0.00407705781981349, -0.023645205423235893, 0.012719823978841305, -0.02720412239432335, 0.06180018559098244, -0.06704714894294739, 0.02011789008975029, -0.05633920431137085, 0.010335701517760754, 0.04412833973765373, -0.08069165050983429, -0.056452035903930664, -0.05062903091311455, -0.07787378132343292, 0.06140594929456711, 0.039196424186229706, 0.06660281121730804, 0.1144099161028862, -0.00931114237755537, 0.08151096850633621, 0.004990034736692905, 0.013676689937710762, -0.005023464094847441, 0.009008357301354408, -0.013606986962258816, 0.1126091256737709, -0.03950965031981468, -0.032307274639606476, 1.1336770576467462e-33, 0.10377135872840881, -0.002010420197620988, 0.06829378008842468, 0.04268382117152214, 0.02819027565419674, -0.020551852881908417, 0.06578278541564941, -0.013523844070732594, 0.016427740454673767, -0.006172757130116224, -0.08177108317613602, -0.019194403663277626, 0.08198285102844238, -0.022251922637224197, -0.02760297805070877, 0.011249171569943428, 0.1265932023525238, -0.03802060708403587, -0.015757380053400993, 0.0210716612637043, -0.030387569218873978, 0.02423255518078804, 0.0009624642552807927, 0.052338339388370514, -0.003985416144132614, 0.02600674517452717, -0.006924116052687168, -0.10200709104537964, -0.014610080048441887, 0.028157448396086693, -0.016896190121769905, -0.029646234586834908, -0.07005749642848969, -0.02028253860771656, -0.06629674881696701, -0.0404357947409153, -0.012176592834293842, 0.007032472640275955, -0.006117595825344324, 0.059395987540483475, 0.024492982774972916, 0.015135849826037884, -0.009162700735032558, 0.04024920612573624, 0.06702357530593872, -0.01988549903035164, -0.038827184587717056, 0.018419159576296806, -0.03523336350917816, -0.02557460591197014, -0.040062353014945984, 0.018421024084091187, -0.01973981224000454, -0.04931788146495819, -0.022717664018273354, 0.033810101449489594, -0.017718469724059105, -0.1408698558807373, 0.06564231961965561, -0.04547920823097229, -0.03333088383078575, 0.01460849680006504, 0.05334094911813736, 0.041188277304172516, -0.007003009784966707, -0.07681500166654587, 0.022673295810818672, 0.002746364800259471, -0.07823114842176437, -0.06375777721405029, -0.08041419088840485, -0.06450241059064865, -0.08598100394010544, -0.007052708882838488, -0.004250513855367899, -0.006413857918232679, 0.09354974329471588, 0.021769750863313675, -0.06643225997686386, 0.055097464472055435, 0.02439754828810692, 0.006577429361641407, -0.02371286414563656, -0.030455023050308228, 0.018398376181721687, 0.016050364822149277, 0.0032492850441485643, -0.07701581716537476, 0.02498515322804451, -0.035396404564380646, -0.07277216762304306, -0.014161634258925915, 0.06772797554731369, 0.019344011321663857, 0.004026365000754595, 1.3162843377778299e-32, -0.018733633682131767, -0.03814448043704033, 0.009814050048589706, -0.015488428995013237, 0.022070057690143585, -0.0600869245827198, 0.049766846001148224, 0.11052859574556351, -0.004799766931682825, 0.027067694813013077, 0.01392311416566372, -0.06781230866909027, -0.05346658080816269, -0.014112296514213085, 0.04414976015686989, 0.12829667329788208, 0.04125392436981201, 0.019418872892856598, -0.02771061472594738, 0.02840806543827057, 0.033787474036216736, 0.04707075655460358, 0.02827519178390503, -0.041529346257448196, 0.05699567869305611, -0.015411628410220146, 0.021290821954607964, -0.02317352406680584, 0.02546803094446659, 0.00359896756708622, -0.07047513127326965, -0.04256141930818558, -0.0035129229072481394, 0.01836475543677807, -0.03843708708882332, -0.05581178143620491, -0.0020910976454615593, -0.014171518385410309, -0.03623708337545395, -0.010960717685520649, -0.014013848267495632, 0.02113582193851471, 0.029470738023519516, 0.014910642057657242, -0.049750350415706635, -0.031106501817703247, -0.002099307719618082, -0.03258238360285759, -0.06243656948208809, -0.0247129388153553, -0.13246451318264008, -0.06372077018022537, 0.07921888679265976, 0.027239182963967323, 0.031959760934114456, 0.09840871393680573, -0.043614037334918976, -0.03497586399316788, 0.01235276274383068, -0.0014223625184968114, -0.018422523513436317, -0.088876873254776, -0.07506055384874344, -0.01786874234676361],
    "identifier": "tools/python_travel_tools.py:organize_travel_documents:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "organize_travel_documents",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Search for the best flight deals.",
    "embedding": [0.11607298254966736, -0.022174149751663208, 0.009360142052173615, 0.00209571304731071, 0.02253870852291584, -0.00018381609697826207, -0.016021763905882835, 0.06456106156110764, -0.012010317295789719, -0.053371213376522064, 0.03174127638339996, 0.012337900698184967, -0.09895898401737213, 0.10156244039535522, 0.018678929656744003, 0.06156494468450546, 0.08481540530920029, -0.027725860476493835, 0.028898870572447777, -0.037639934569597244, 0.05132012814283371, -0.01323955599218607, -0.0368262454867363, 0.02455241233110428, 0.05790214240550995, -0.006896395701915026, -0.018245777115225792, -0.010359146632254124, 0.031597305089235306, -0.007100359536707401, -0.012646125629544258, 0.06691791117191315, 0.045490164309740067, -0.0070815254002809525, 0.02372085116803646, 0.0023877820931375027, -0.01636640354990959, 0.03567979112267494, 0.024360965937376022, -0.02083941362798214, 0.06454017758369446, 0.02234933339059353, -0.027753110975027084, 0.02537071518599987, 0.021501604467630386, 0.01728392019867897, 0.042443834245204926, 0.04425155371427536, 0.09985184669494629, 0.05620915815234184, 0.0036527514457702637, -0.04627479612827301, -0.057208187878131866, -0.04117535054683685, 0.03055921010673046, -0.041855741292238235, -0.08098093420267105, -0.08038997650146484, -0.03806962072849274, -0.11568251997232437, -0.06627046316862106, -0.07389767467975616, 0.00904723908752203, 0.060589104890823364, -0.020416544750332832, 0.0038420786149799824, -0.06023436412215233, 0.031216461211442947, 0.006115281023085117, -0.07337513566017151, 0.005257308948785067, -0.05295427516102791, -0.12738734483718872, 0.07851448655128479, 0.02001691423356533, 0.04184427484869957, 0.07321241497993469, -0.07544080168008804, 0.05985457822680473, 0.03458622097969055, 0.060101013630628586, -0.06540387123823166, -0.020197680220007896, 0.04697611182928085, 0.027554087340831757, -0.03880172222852707, -0.000740080839022994, -0.03393181040883064, 0.03902007266879082, 0.00718702282756567, 0.007173491176217794, -0.06868481636047363, -0.053955402225255966, 0.07963857799768448, -0.08935124427080154, 0.05798976495862007, -0.02684834413230419, -0.050848569720983505, 0.05760321021080017, 0.12721750140190125, 0.10892391949892044, 0.020174536854028702, 0.07421061396598816, -0.026172539219260216, -0.068879634141922, -0.06086040660738945, 0.014684890396893024, 0.012127621099352837, 0.05005213990807533, -0.08290519565343857, -0.120819590985775, 0.07221143692731857, 0.010628475807607174, -0.09822321683168411, -0.0826215147972107, 0.04186070337891579, -0.020028136670589447, 0.036811552941799164, 0.0317566841840744, -0.024357497692108154, -0.009773846715688705, -0.04797656461596489, 0.07009986788034439, 0.04197533056139946, -0.05393503978848457, -0.07637866586446762, 0.05771753937005997, -0.05556953325867653, -0.004079770762473345, -0.06566037237644196, 0.022658707574009895, 0.05984170362353325, -0.04022464528679848, -0.006803841330111027, -0.04703398793935776, 0.013392217457294464, -0.0254129096865654, 0.02699292078614235, -0.0773310661315918, -0.039958082139492035, -0.0017950416076928377, -0.025344643741846085, 0.07586021721363068, -0.009135223925113678, 0.02911403216421604, -0.0035748574882745743, -0.04368925094604492, -0.05607917532324791, -0.07020452618598938, -0.0839516669511795, 0.013501466251909733, -0.03169262409210205, 0.0384993851184845, -0.039521414786577225, -0.05102425813674927, -0.04384852200746536, 0.1405707597732544, 0.024384213611483574, -0.013817262835800648, 0.1079917624592781, 0.018588101491332054, 0.014616220258176327, -0.022312451153993607, 0.03890760987997055, -0.10324184596538544, 0.016433795914053917, -0.003641159040853381, -0.01584380306303501, -0.10079716145992279, 0.04853212088346481, -0.09960350394248962, 0.055124431848526, 0.020646104589104652, -0.003677473636344075, -0.014054174534976482, 0.0635603666305542, 0.017555348575115204, 0.05702104791998863, -0.060272011905908585, -0.013124947436153889, -0.042183876037597656, -0.06915522366762161, -0.025516580790281296, -0.002594277262687683, 0.01949121057987213, -0.009088846854865551, 0.037014756351709366, 0.035569462925195694, 0.027469415217638016, -0.08875678479671478, -0.009185167960822582, -0.06889669597148895, 0.00012518787116277963, 0.044742338359355927, 0.07289725542068481, -0.013658243231475353, -0.057453546673059464, 0.010079294443130493, 0.015102598816156387, 0.0075137498788535595, 0.008458303287625313, -0.008435527794063091, -0.05071679875254631, 0.01536432933062315, 0.025335507467389107, 0.047645118087530136, 0.00022285243903752416, -0.046130914241075516, 0.06522974371910095, 0.06894394010305405, 0.082496777176857, 0.1306329071521759, 0.08201567083597183, -0.043454624712467194, 0.0525062158703804, -0.05088888108730316, -0.011977992951869965, -0.08024515211582184, -0.11681828647851944, 0.0045723565854132175, -0.05078680440783501, -0.058899324387311935, 0.018092572689056396, -2.64861904990923e-34, 0.04313058778643608, -0.0616067610681057, -0.012594430707395077, 0.03854447230696678, 0.012256496585905552, -0.019302615895867348, -0.001038555521517992, -0.030940765514969826, 0.0781397894024849, 0.06913930922746658, -0.09622859209775925, 0.04343797266483307, 0.04707586392760277, 0.040532875806093216, 0.0342782624065876, -0.09946181625127792, -0.001641407492570579, 0.04847834259271622, 0.007398598827421665, -0.04066330939531326, 0.04877458140254021, 0.04494429752230644, -0.12480514496564865, -0.007510289549827576, -0.017909593880176544, -0.0016891546547412872, 0.00923355482518673, -0.04245400056242943, -0.04074525833129883, -0.0911129042506218, -0.07129930704832077, 0.03275439515709877, -0.0013777912827208638, 0.08965638279914856, -0.0515633225440979, 0.005128880031406879, -0.006231116596609354, 0.04371149465441704, -0.0007905188831500709, -0.006510671693831682, 0.008376792073249817, 0.07190239429473877, 0.0007872932474128902, 0.011492816731333733, 0.06748761981725693, 0.0007569169974885881, -0.009727217257022858, -0.0032207451295107603, 0.044809628278017044, -0.024376312270760536, 0.01723206415772438, 0.09835279732942581, -0.007786525879055262, 0.03349541872739792, 0.018855925649404526, 0.03300868719816208, -0.024400444701313972, -0.04347221180796623, 0.049810927361249924, 0.011686976067721844, -0.02034350298345089, -0.0936940610408783, 0.03368210047483444, 0.05153881758451462, -0.05325409770011902, 0.09195438772439957, 0.06761473417282104, -0.018610350787639618, 0.0074539813213050365, 0.050639525055885315, -0.09773898124694824, -0.07493310421705246, 0.035755619406700134, 0.01215485017746687, -0.030110163614153862, -0.0005904532736167312, 0.08196457475423813, 0.11165517568588257, -0.015654733404517174, 0.08551734685897827, 0.03181130439043045, 0.012853551656007767, -0.03980637341737747, -0.01863108016550541, -0.0016160147497430444, 0.09454847127199173, -0.03489520028233528, -0.0555180087685585, -0.09509549289941788, -0.045445844531059265, -0.059257637709379196, -0.031657032668590546, 0.050123583525419235, 0.0184854157269001, 0.021543217822909355, 1.5756499663838688e-32, 0.022679924964904785, 0.003055562963709235, -0.027661072090268135, 0.02848113887012005, 0.06208857521414757, -0.021688176319003105, -0.06093158200383186, 0.029094628989696503, -0.04028761386871338, -0.06886414438486099, 0.014673968777060509, -0.026144471019506454, -0.08868768066167831, 0.0004395267169456929, 0.01740206405520439, -0.030581189319491386, -0.00843227282166481, 0.03113613650202751, -0.009237568825483322, 0.01840677484869957, -0.07820247113704681, 0.12858961522579193, 0.019152769818902016, -0.03050989843904972, 0.0034193990286439657, 0.02378019317984581, -0.02738017775118351, -0.07015831023454666, 0.09204339236021042, 0.05611301586031914, -0.1092011034488678, 0.013091362081468105, 0.016739482060074806, -0.03154122829437256, 0.05675942078232765, 0.0145953968167305, -0.06919443607330322, 0.021388117223978043, -0.05886742100119591, 0.05089529976248741, 0.03788667544722557, 0.010068733245134354, -0.0299115851521492, -0.042350541800260544, 0.051483940333127975, 0.022739218547940254, 0.009432729333639145, -0.01959223486483097, 0.011857206001877785, -0.00363020203076303, 0.028384573757648468, -0.01747128553688526, 0.00964090134948492, -0.04583997651934624, 0.016155080869793892, -0.032783228904008865, -0.06882889568805695, -0.042555272579193115, 0.02032526209950447, 0.02132466994225979, 0.040914420038461685, -0.0006529605598188937, -0.1010698452591896, 0.01914175972342491],
    "identifier": "tools/python_travel_tools.py:search_best_flight_deals:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "search_best_flight_deals",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Search for local restaurants in a given city",
    "embedding": [0.03798858821392059, -0.04657931625843048, -0.011398650705814362, 0.028581848368048668, -0.11727867275476456, -0.010034419596195221, -0.025176234543323517, -0.020027564838528633, -0.05125103145837784, -0.06834744662046432, 0.09409487992525101, -0.06950779259204865, -0.07856032997369766, -0.005058875773102045, 0.058749791234731674, -0.12231554090976715, 0.14632371068000793, 0.049912240356206894, 0.0712350383400917, -0.10100103169679642, -0.06333282589912415, 0.03607771173119545, -0.08604415506124496, 0.040425319224596024, 0.06884682923555374, 0.013884320855140686, -0.008455404080450535, 0.06503163278102875, -0.023227108642458916, 0.026814468204975128, -0.0011845723493024707, 0.016377968713641167, 0.0753914937376976, 0.06957433372735977, 0.08677135407924652, -0.05367974564433098, 0.04154102876782417, -0.09607863426208496, 0.03879356011748314, 0.09418433159589767, 0.064088836312294, 0.03285256400704384, 0.030740272253751755, 0.050172898918390274, -0.057107120752334595, 0.019899064674973488, 0.0069643971510231495, 0.05421574413776398, 0.029962308704853058, -0.058867745101451874, -0.05166315659880638, 0.014933330938220024, -0.026293594390153885, 0.02087307535111904, 0.07827865332365036, 0.019131753593683243, -0.024168506264686584, -0.01870235987007618, 0.004125144798308611, 0.027960781008005142, 0.017175370827317238, 0.002097274409607053, 0.0003514573036227375, -0.0202341191470623, 0.04110360145568848, -0.045091647654771805, -0.008040097542107105, 0.01983761228621006, -0.006987569388002157, -0.08105846494436264, -0.011753984726965427, 0.012289034202694893, -0.08380076289176941, 0.06028979271650314, -0.03627662733197212, -0.05597703531384468, -0.005701227113604546, -0.005631936714053154, -0.06510791182518005, 0.004034397657960653, 0.06983470171689987, 0.0014564708108082414, -0.04388248920440674, 0.02258721925318241, -0.02152934856712818, 0.004767083562910557, -0.004714541602879763, -0.013570007868111134, 0.07277456670999527, 0.06828088313341141, -0.07266105711460114, 0.01179495733231306, -0.051696933805942535, -0.07453502714633942, 0.00030173338018357754, 0.0499083437025547, -0.10701973736286163, 0.0372750461101532, 0.0396420955657959, 0.05803952366113663, 0.03743164986371994, 0.04849330335855484, 0.042345281690359116, 0.003513768082484603, 0.03303490951657295, -0.010325285606086254, -0.06813205778598785, -0.009383637458086014, 0.014523142948746681, 0.02199588529765606, -0.047777485102415085, 0.10222863405942917, -0.0219129528850317, -0.026303237304091454, -0.01789719983935356, 0.012079479172825813, 0.09219807386398315, -0.013750378973782063, -0.04733129218220711, 0.022794581949710846, -0.029085855931043625, 0.055521201342344284, -0.02502843178808689, 0.03612484410405159, -0.1123824343085289, 0.005364653654396534, -0.12346673756837845, 0.036791808903217316, 0.012531748041510582, -0.033893510699272156, -0.020030038431286812, 0.012813582085072994, 0.022664234042167664, -0.006053283344954252, 0.020931033417582512, 0.0017111527267843485, 0.014398408122360706, -0.01906750351190567, 0.03770824521780014, -0.023418206721544266, 0.07054092735052109, -0.05589427426457405, 0.08667785674333572, -0.04024689272046089, 0.038941048085689545, 0.034003909677267075, -0.0347837395966053, -0.01679573953151703, -0.07450037449598312, -0.09226758778095245, 0.053493570536375046, -0.06600212305784225, 0.014718174934387207, 0.008844994939863682, 0.017482321709394455, -0.03568768501281738, 0.04563280940055847, 0.0062933918088674545, 0.034845009446144104, 0.025492588058114052, -0.02811037376523018, -0.009448925964534283, 0.038247112184762955, 0.01914675161242485, -0.06251924484968185, 0.02007448300719261, 0.04757014662027359, 0.005854693707078695, -0.04661424458026886, 0.08443443477153778, 0.01596425473690033, 0.019765736535191536, -0.014051662757992744, 0.03039286471903324, -0.12502096593379974, 0.02343759313225746, -0.004373560193926096, 0.01088848989456892, 0.015812160447239876, -0.030266592279076576, -0.11536779999732971, -0.003973399754613638, 0.016727663576602936, 0.06586533039808273, 0.02059258706867695, 0.019072597846388817, 0.07389092445373535, 0.000947131309658289, 0.04412782937288284, 0.020954281091690063, 0.03740852698683739, -0.07202500849962234, 0.1737690269947052, -0.034842729568481445, 0.019794253632426262, -0.006129120010882616, 0.015538849867880344, 0.002549156779423356, 0.06611543148756027, -0.018511315807700157, 0.05244581773877144, -0.02000916190445423, -0.020152980461716652, -0.008266217075288296, -0.02108379639685154, 0.03995581343770027, 0.07932315021753311, 0.02728915959596634, 0.025457728654146194, -0.029679927974939346, 0.016330702230334282, 0.1318606585264206, 0.05905197560787201, 0.04512745887041092, 0.061180830001831055, -0.06894279271364212, 0.01947738043963909, -0.037096451967954636, -0.13531574606895447, 0.055165957659482956, -0.021529149264097214, -0.02093690074980259, -0.09430596232414246, 2.527209814841229e-33, 0.03810882940888405, -0.11672010272741318, 0.04021918401122093, -0.046274930238723755, -0.03137695789337158, -0.06306066364049911, 0.013238233514130116, -0.10910077393054962, 0.06843283027410507, 0.0032345938961952925, -0.008045271039009094, -0.011064535938203335, 0.12499522417783737, 0.012493887916207314, 0.04323800653219223, 0.08456911891698837, 0.057650305330753326, 0.0127835962921381, -0.061160631477832794, 0.08952286094427109, -0.006060136016458273, 0.04106535762548447, -0.07108078896999359, 0.07455965131521225, -0.01587310992181301, 0.09021969884634018, 0.026237763464450836, -0.003114797407761216, -0.0968853309750557, -0.046247292309999466, -0.035819437354803085, -0.0535394586622715, 0.025609871372580528, 0.004983651917427778, -0.07772047072649002, 0.07448533922433853, 0.03989551216363907, -0.02744101546704769, -0.024456825107336044, 0.057362474501132965, 0.06550996005535126, -0.04236987978219986, 0.005749281495809555, 0.02324543707072735, -0.040361255407333374, 0.06361344456672668, 0.04165088012814522, -0.06416276842355728, 0.006850721314549446, -0.04963529855012894, 0.09103062003850937, 0.008770518936216831, -0.04199932515621185, 0.03139128163456917, -0.02364685945212841, 0.0504007562994957, -0.056404221802949905, 0.06335931271314621, 0.010842782445251942, -0.07791389524936676, -0.005618359427899122, -0.012543825432658195, -0.023740502074360847, 0.01565099135041237, -0.028686977922916412, -0.0024851018097251654, 0.07517239451408386, 0.04360757768154144, 0.03574834391474724, -0.06018024682998657, 0.04275023192167282, 0.038695648312568665, -0.00997556746006012, -0.014981810934841633, -0.08803720772266388, 0.053221024572849274, 0.05116608366370201, 0.03172362968325615, -0.016866788268089294, -0.008820057846605778, -0.06332919746637344, 0.01560152880847454, 0.008308476768434048, -0.014032772742211819, -0.06887345761060715, 0.08366227149963379, -0.006352615542709827, 0.032432835549116135, -0.02030744031071663, 0.02346501313149929, -0.020720895379781723, -0.04586181789636612, 0.08214793354272842, -0.06601795554161072, -0.0301413182169199, 1.8504047262204916e-32, -0.0035608720500022173, -0.016048913821578026, -0.05440223217010498, 0.12029891461133957, 0.01734667271375656, -0.075686015188694, -0.012026248499751091, 0.0007735274266451597, 0.030884746462106705, 0.01257790345698595, -0.06269527226686478, 0.046107951551675797, -0.0963667780160904, -0.040256600826978683, -0.08885633945465088, -0.026604099199175835, 0.03966347500681877, -0.0012782869162037969, -0.005171571858227253, -0.015200330875813961, 0.046648744493722916, 0.004452744964510202, -0.029031936079263687, -0.05804820358753204, 0.012389399111270905, -0.045801714062690735, -0.06247246265411377, 0.014733865857124329, 0.0343933179974556, 0.028108777478337288, -0.02325485832989216, -0.06833548098802567, -0.01644773781299591, 0.009837156161665916, 0.03453797847032547, -0.06668534129858017, -0.06232263147830963, 0.027753325179219246, -0.07206703722476959, -0.025738149881362915, 0.029113898053765297, -0.04598502069711685, 0.007233525160700083, -0.015710018575191498, 0.02126113325357437, -0.003967668861150742, 0.04725804179906845, -0.0449150875210762, 0.08560995012521744, 0.014445116743445396, -0.1295013725757599, 0.013388496823608875, -0.017258191481232643, -0.03172976151108742, -0.0635300874710083, -0.04506644234061241, -0.043202295899391174, -0.07119974493980408, 0.05004993453621864, -0.029045337811112404, -0.007927333004772663, 0.04179103299975395, -0.08808430284261703, 0.03256402537226677],
    "identifier": "tools/python_travel_tools.py:search_local_restaurants:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "search_local_restaurants",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\nimport rosetta\n\n\n# Tools in Rosetta are decorated with `@rosetta.tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@rosetta.tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@rosetta.tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@rosetta.tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@rosetta.tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@rosetta.tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@rosetta.tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@rosetta.tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Set up an out-of-office email reply.",
    "embedding": [-0.03532901406288147, 0.011809125542640686, 0.03587882220745087, 0.034525249153375626, 0.03808086737990379, -0.056786030530929565, -0.053997863084077835, -0.0038069782312959433, -0.025176452472805977, -0.06756647676229477, -0.03706229478120804, 0.04942736402153969, -0.029167860746383667, -0.0151652991771698, 0.08254099637269974, -0.018690573051571846, 0.0848822370171547, -0.055961281061172485, -0.005759638734161854, 0.08520118147134781, -0.0288875550031662, -0.04169532284140587, -0.08848616480827332, 0.0260126031935215, 0.04062392935156822, -0.03334471955895424, 0.04351600259542465, -0.005187647882848978, -0.0938427746295929, -0.021459661424160004, 0.010989516973495483, 0.0078504653647542, 0.009146645665168762, 0.015132158994674683, -0.014894532971084118, 0.05015648528933525, 0.08211589604616165, -0.03458184376358986, -0.039044301956892014, -0.03584729880094528, 0.004130494315177202, -0.017767900601029396, 0.03101499378681183, -0.01275646686553955, 0.004201725125312805, 0.013101998716592789, 0.04346263408660889, 0.06736226379871368, -0.002675422467291355, 0.015557119622826576, 0.031040912494063377, -0.03814452514052391, -0.07099062204360962, 0.09538092464208603, 0.04038777947425842, 0.03342680260539055, 0.02193768322467804, 0.00922522135078907, 0.05543840676546097, -0.03163134679198265, 0.013699017465114594, -0.04881397262215614, -0.0013387189246714115, 0.030199745669960976, -0.04356173798441887, 0.07415110617876053, -0.05456293001770973, 0.07277876883745193, 0.015706414356827736, -0.05337699502706528, -0.0765894204378128, -0.014609257690608501, -0.07503587007522583, 0.06596925854682922, 0.03043099120259285, 0.07511153817176819, -0.08359233289957047, -0.020532799884676933, 0.02991301193833351, 0.0924363061785698, -0.059615608304739, -0.009080324321985245, -0.03441628813743591, 0.021405737847089767, 0.0029848532285541296, 0.011829911731183529, 0.03188394755125046, 0.03899947926402092, 0.09652677178382874, 0.06174851581454277, 0.03986852616071701, -0.010578070767223835, 0.07511323690414429, 0.008934822864830494, -0.04016583785414696, -0.005782030988484621, -0.02003561519086361, -0.013608084991574287, -0.06823308765888214, 0.0922635942697525, -0.016000734642148018, 0.04752769321203232, 0.03430192917585373, -0.12208119034767151, -0.019257495179772377, -0.032724492251873016, -0.009210350923240185, 0.008222227916121483, 0.0037829347420483828, -0.03525494784116745, -0.038628388196229935, -0.08864074945449829, -0.0021236592438071966, -0.07403860986232758, 0.02402438037097454, 0.01994157023727894, 0.03299811854958534, 0.047442588955163956, 0.007200845517218113, -0.01009458303451538, 0.08246927708387375, 0.02845885045826435, -0.12654708325862885, -0.09732948988676071, 0.04629390314221382, -0.0356607548892498, -0.005576517898589373, -0.029509861022233963, 0.010300371795892715, 0.12406633794307709, 0.07602062076330185, 0.08738555014133453, 0.03315853700041771, 0.004521792754530907, 0.03691893443465233, 0.013401479460299015, 0.02259552665054798, 0.029591364786028862, -0.021620042622089386, 0.042797964066267014, 0.1759323924779892, -0.12653250992298126, -0.037539027631282806, 0.06995127350091934, 0.029277054592967033, 0.09327076375484467, 0.07310768961906433, -0.01633974350988865, 0.023547038435935974, -0.13760846853256226, -0.012259301729500294, 0.02812766283750534, 0.027727259323000908, 0.05088372156023979, -0.02034630998969078, -0.02447516657412052, 0.05340799316763878, 0.004117575474083424, -0.024662932381033897, 0.005716026294976473, -0.031032053753733635, 0.04092089831829071, -0.02950645424425602, -0.0029600381385535, -0.012141506187617779, -0.018925916403532028, -0.009776470251381397, 0.04190587252378464, -0.002533092861995101, -0.05129016935825348, 0.04246867448091507, -0.01246089767664671, 0.013724727556109428, 0.056696344166994095, 0.10443328320980072, 0.004272963851690292, 0.03757965564727783, 0.06024520844221115, 0.037387099117040634, 0.03944194316864014, -0.007771999575197697, 0.0007026942330412567, -0.0733739510178566, -0.02918252907693386, 0.03669893369078636, -0.04783570021390915, 0.12514226138591766, -0.00859863217920065, 0.06307416409254074, 0.04924079775810242, 0.024201758205890656, 0.03532981127500534, -0.03333134949207306, -0.009782122448086739, -0.021318644285202026, -0.05304650962352753, -0.06705021858215332, -0.04436454921960831, 0.06297444552183151, 0.009211324155330658, -0.049162622541189194, 0.02221263013780117, -0.08683573454618454, -0.02012527361512184, 0.007809120696038008, -0.03865689039230347, -0.017660275101661682, -0.07687728852033615, -0.027976300567388535, 0.06927137076854706, -0.014774725772440434, 0.00300987483933568, 0.06748013198375702, 0.08847591280937195, -0.00675409147515893, -0.03550943732261658, -0.033088356256484985, 0.05522698163986206, -0.06796055287122726, -0.05615903064608574, -0.04682951048016548, -0.013034382835030556, 0.04745785892009735, 8.947649940108166e-33, 0.05032701417803764, -0.03814932703971863, -0.10763262212276459, -0.06539731472730637, 0.037972066551446915, 0.1119011864066124, 0.06697986274957657, 0.03896377980709076, 0.002476035850122571, 0.05227617546916008, -0.02359212562441826, 0.015007701702415943, 0.07247771322727203, 0.02214382030069828, 0.03544936701655388, -0.05189189314842224, 0.061011988669633865, 0.035142574459314346, -0.07579857110977173, 0.09539907425642014, -0.04954170808196068, -0.04690084606409073, -0.0998377725481987, 0.024849634617567062, -0.03711414709687233, 0.0027885385788977146, -0.006663539446890354, -0.013802862726151943, -0.0405317060649395, -0.004774846136569977, -0.04231445491313934, 0.05413847044110298, -0.06713298708200455, -0.044252071529626846, 0.031812503933906555, 0.041082702577114105, -0.04568064212799072, -0.0014636951964348555, 0.1147633045911789, 0.04598277062177658, 0.09559234231710434, 0.03053053468465805, -0.04556436836719513, 0.07862185686826706, 0.041464123874902725, -0.04844476282596588, -0.051201749593019485, -0.08121185004711151, -0.04567287489771843, 0.011264018714427948, -0.09650658816099167, 0.006629559677094221, 0.09799136221408844, -0.015430914238095284, -0.07300151884555817, -0.039602939039468765, 0.018926678225398064, -0.09723098576068878, -0.043367817997932434, -0.007533265743404627, -0.06945322453975677, -0.05010087788105011, 0.09913124144077301, -0.0017386211548000574, 0.02731936052441597, 0.014397232793271542, 0.07409784942865372, 0.03160524740815163, 0.04801235347986221, -0.06939993798732758, 0.04136655852198601, -0.04357590153813362, -0.020173463970422745, -0.017440900206565857, -0.0039886957965791225, -0.015589938499033451, -0.047640327364206314, -0.11922597140073776, -0.08592873066663742, -0.025875788182020187, -0.00437138369306922, -0.007776586804538965, 0.07178565859794617, 0.023270122706890106, -0.02818370796740055, -0.017799686640501022, -0.009463130496442318, -0.017663855105638504, 0.06428276747465134, -0.020052332431077957, -0.0029503791593015194, 0.0015109229134395719, 0.0224431362003088, 0.01732443831861019, 0.00808027759194374, 3.477637735707144e-32, -0.033981963992118835, 0.02542894519865513, 0.0874292254447937, -0.015673985704779625, 0.009759743697941303, 0.0057411896996200085, 0.031179362908005714, -0.005155195016413927, -0.07946452498435974, -0.08899276703596115, -0.06319326907396317, -0.12222041934728622, -0.0014419466024264693, 0.06331974267959595, 0.05664609372615814, 0.023183714598417282, -0.03855250030755997, -0.06783485412597656, -0.008062031120061874, -0.016538985073566437, -0.0074267010204494, 0.024596843868494034, 0.028737666085362434, 0.0029567487072199583, 0.022153958678245544, 0.017858808860182762, -0.03731607645750046, 0.03752419725060463, -0.08601544052362442, 0.07755334675312042, -0.05350875109434128, 0.004697287455201149, -0.05388152599334717, -0.00837975088506937, -0.09013382345438004, 0.01383604109287262, 0.0011238339357078075, 0.007875651121139526, -0.0459393635392189, -0.016277143731713295, -0.04534106329083443, -0.08353043347597122, -0.013850444927811623, 0.04538648575544357, 0.07080013304948807, -0.08030849695205688, 0.04474889859557152, -0.0027016508392989635, -0.022141171619296074, 0.02314460091292858, -0.06383314728736877, -0.06015731394290924, 0.021476611495018005, 0.08883298188447952, 0.007523851469159126, 0.021372685208916664, -0.02726544253528118, -0.11253244429826736, -0.019899602979421616, 0.030380042269825935, -0.05903078243136406, 0.08880551159381866, -0.016842365264892578, -0.018280718475580215],
    "identifier": "tools/python_travel_tools.py:setup_out_of_office_reply:git_1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
    "name": "setup_out_of_office_reply",
    "record_kind": "python_function",
    "source": "tools/python_travel_tools.py",
    "version":
    {
      "identifier": "1f813bfc957a0ce2ba515dff23b2c0f831f494dd",
      "timestamp": "2024-10-01T09:26:29.662873Z"
    }
  },
  {
    "description": "Create a new travel-rewards member.",
    "embedding": [0.045682333409786224, -0.014476495794951916, 0.02238844707608223, 0.04441751912236214, 0.0008759304764680564, 0.023003414273262024, 0.08113749325275421, 0.016045400872826576, -0.04046105220913887, -0.04562407732009888, -0.01636061631143093, -0.07041460275650024, -0.030974408611655235, 0.0806984081864357, 0.06317055225372314, -0.013839307241141796, -0.007423155475407839, 0.07364513725042343, 0.028760068118572235, 0.030428273603320122, -0.047592826187610626, -0.08789052814245224, -0.0003468503418844193, 0.0995553582906723, 0.02346927858889103, -0.04580485820770264, -0.014768192544579506, 0.06792724877595901, 0.04843689128756523, -0.03583789989352226, 0.01287563145160675, 0.04349113628268242, -0.02606520988047123, -0.02777191996574402, 0.033784810453653336, 0.08361627161502838, -0.01098436489701271, -0.005689040757715702, -0.06531104445457458, 0.002873149001970887, -0.018295764923095703, -0.10166452825069427, -0.041565220803022385, 0.00835348293185234, 0.037185803055763245, -0.08920451998710632, -0.02018752507865429, 0.018384987488389015, 0.07880248874425888, -0.04553767293691635, 0.06477739661931992, -0.0699925422668457, 0.023450981825590134, 0.006402389612048864, 0.006265066564083099, -0.04091527685523033, 0.03540731221437454, -0.09120843559503555, -0.03635776415467262, -0.03070439025759697, -0.03645709529519081, -0.05343715474009514, 0.03395986184477806, 0.0006034502293914557, -0.09811165183782578, -0.05789875611662865, -0.105177141726017, 0.02184155397117138, 0.02197260782122612, -0.04393526166677475, 0.026556160300970078, 0.03006085380911827, -0.024784807115793228, 0.07135450839996338, 0.010684986598789692, 0.030877437442541122, -0.0913102775812149, 0.03490622714161873, 0.02848336659371853, 0.013271803967654705, -0.018606042489409447, -0.00334116886369884, -0.051088325679302216, 0.014676266349852085, 0.06408540904521942, -0.035825785249471664, 0.029486892744898796, 0.006732752081006765, -0.07281249016523361, 0.04967665299773216, 0.012722915969789028, -0.0012068512151017785, 0.11121019721031189, 0.06722287088632584, -0.09833773225545883, -0.019315816462039948, -0.06971923261880875, 0.0319204106926918, 0.0007743747555650771, 0.08218785375356674, 0.03653789311647415, 0.07990146428346634, 0.017931649461388588, 0.05107433721423149, -0.06918511539697647, -0.03480298072099686, -0.007400567643344402, 0.0020088176243007183, 0.11546237021684647, -0.04842402786016464, -0.05809789150953293, 0.03957498446106911, 0.022394997999072075, 0.01030648685991764, -0.05481034144759178, 0.07091754674911499, -0.14574745297431946, 0.03522103279829025, 0.024046586826443672, 0.013787172734737396, 0.06413578987121582, -0.0851772278547287, -0.009652002714574337, 0.05186112970113754, -0.08119706064462662, -0.01619807817041874, 0.09504719078540802, 0.005855234805494547, -0.0030430469196289778, 0.13270069658756256, 0.021392913535237312, 0.14516030251979828, -0.014348190277814865, 0.0015041986480355263, -0.07735603302717209, -0.07367347180843353, -0.0518430732190609, -0.09156292676925659, -0.02719026617705822, 0.026786407455801964, 0.11581537872552872, 0.03137276694178581, -0.05377279222011566, -0.0328558087348938, -0.0003363052674103528, -0.07027806341648102, 0.10928882658481598, -0.03564153239130974, 0.05366222560405731, -0.004458266776055098, -0.0006564760697074234, -0.06588104367256165, 0.054137177765369415, 0.034000445157289505, -0.02505643293261528, -0.016179557889699936, 0.06823384761810303, -0.007115975953638554, -0.004896563943475485, 0.07262937724590302, -0.0571894496679306, -0.0016916607273742557, 0.009673716500401497, 0.015858536586165428, 0.025069575756788254, 0.020030375570058823, -0.03810302913188934, -0.023867622017860413, -0.06407914310693741, -0.045207876712083817, -0.07621899992227554, 0.03841773048043251, -0.01948196440935135, 0.012668169103562832, 0.15156763792037964, 0.025187894701957703, 0.045578476041555405, 0.11599095165729523, -0.04866829514503479, -0.10221318900585175, 0.020834004506468773, -0.03828021511435509, -0.09251028299331665, -0.07977904379367828, 0.031388238072395325, 0.02240019105374813, -0.012086150236427784, -0.08306902647018433, 0.09947948902845383, -0.0034298780374228954, -0.005725593771785498, 0.05523644760251045, -0.03797748684883118, -0.027498215436935425, 0.02664434351027012, -0.010259730741381645, -0.019045671448111534, -0.009274699725210667, 0.04136150702834129, 0.025057638064026833, -0.08593551069498062, -0.004163006320595741, -0.0217710193246603, -0.036027368158102036, 0.010491672903299332, 0.049083150923252106, 0.028221890330314636, -0.05995843932032585, -0.07176816463470459, 0.019095947965979576, 0.04328399896621704, 0.06443578749895096, 0.06483987718820572, -0.049016304314136505, -0.004944805055856705, 0.0005941393319517374, -0.030942918732762337, 0.004462647717446089, -0.00727298716083169, -0.003785648848861456, 0.0031332566868513823, 0.036235373467206955, -0.0349198542535305, 1.1508340221783714e-32, -0.011069420725107193, -0.03555770963430405, 0.07040109485387802, -0.04292492941021919, 0.03728233277797699, -0.050410348922014236, -0.0013918845215812325, 0.013110516592860222, -0.04554373025894165, 0.06253933906555176, -0.09872704744338989, 0.03910273313522339, 0.05313199386000633, 0.05213822051882744, -0.08302041888237, -0.10624675452709198, 0.049795035272836685, 0.08622359484434128, -0.0003174120793119073, 0.006930593401193619, -0.00686961505562067, 0.1346980780363083, -0.06338552385568619, -0.015353125520050526, 0.0636928379535675, 0.043140485882759094, 0.07613062113523483, -0.06229574233293533, 0.004928351379930973, 0.011785885319113731, 0.03319898247718811, -0.01590024121105671, -0.07846159487962723, -0.035479675978422165, -0.03152037411928177, 0.03787359222769737, -0.002010773168876767, 5.1433897169772536e-05, 0.0033342079259455204, 0.11346441507339478, -0.0017792967846617103, -0.011658512987196445, 0.0118029173463583, 0.035023096948862076, 0.03995789214968681, 0.11137901246547699, 0.05355418846011162, -0.04551341384649277, -0.021540001034736633, -0.030136920511722565, -0.056171905249357224, -0.02358837053179741, 0.06619735807180405, 0.034374356269836426, -0.02472873218357563, 0.07117141038179398, 0.005436031613498926, -0.10536757856607437, 0.056096401065588, -0.0032087708823382854, -0.05225950479507446, -0.07660498470067978, 0.049248628318309784, 0.0730472132563591, 0.030882274731993675, -0.024413226172327995, -0.0006999973556958139, 0.07235301285982132, -0.0406096950173378, -0.09552411735057831, -0.03492952510714531, 0.012106819078326225, 0.029524467885494232, -0.05187275633215904, -0.05173557251691818, -0.05729406699538231, 0.08771579712629318, 0.07194016873836517, -0.037125762552022934, -0.027317404747009277, -0.007003801874816418, 0.022513993084430695, 0.09484746307134628, 0.003245574189350009, 0.019405337050557137, -0.014870467595756054, 0.047624845057725906, -0.010038718581199646, -0.04063655808568001, -0.01765143685042858, -0.023348549380898476, -0.012479101307690144, 0.0633855015039444, 0.04007531702518463, -0.007041688077151775, 1.7739827528008638e-32, -0.034552350640296936, -0.012838375754654408, -0.03337918221950531, 0.0867779552936554, 0.08427616953849792, -0.0034121908247470856, -0.005294498056173325, -0.04019332304596901, 0.012777471914887428, 0.048171281814575195, 0.030214540660381317, -0.06181376054883003, 0.06336024403572083, 0.006081931758671999, 0.019475409761071205, -0.018207348883152008, -0.02927129529416561, 0.07195199280977249, -0.033409424126148224, -0.025749217718839645, -0.009924606420099735, 0.06856831908226013, 0.05624395236372948, -0.012143056839704514, -0.028245940804481506, 0.0041330172680318356, -0.031213724985718727, -0.002305977512151003, 0.037858348339796066, -0.10060723125934601, -0.1060546413064003, 0.005642494186758995, 0.0016074632294476032, -0.011993411928415298, 0.00710119167342782, -0.031086985021829605, -0.027229832485318184, -0.0112083051353693, -0.015900002792477608, 0.029079904779791832, -0.08485881984233856, 0.03352976590394974, 0.04860152304172516, 0.017679447308182716, -0.04100155830383301, 0.07921262085437775, -0.017126381397247314, -0.08877760916948318, 0.0061824144795536995, -0.004677837248891592, -0.0016351990634575486, -0.028508836403489113, 0.05895902216434479, -0.008329161442816257, 0.016238700598478317, -0.02915242128074169, -0.0422811359167099, -0.04946465417742729, -0.009477739222347736, -0.03340529277920723, 0.0028422693721950054, -0.03423679992556572, -0.011090376414358616, 0.06070176512002945],
    "identifier": "tools/rewards_service.yaml:create_new_member_create_post:git_dc0cb338186d2d99332c584ab7e750461e94e678",
    "name": "create_new_member_create_post",
    "operation":
    {
      "method": "post",
      "path": "/create"
    },
    "record_kind": "http_request",
    "source": "tools/rewards_service.yaml",
    "specification":
    {
      "filename": "services/rewards_spec.json"
    },
    "version":
    {
      "identifier": "dc0cb338186d2d99332c584ab7e750461e94e678",
      "timestamp": "2024-10-01T09:26:29.714296Z"
    }
  },
  {
    "description": "Get the rewards associated with a member.",
    "embedding": [-0.024517551064491272, 0.0036878634709864855, -0.0263834111392498, 0.028614528477191925, -0.03115428239107132, 0.03213663026690483, 0.15884287655353546, 0.01454206369817257, 0.005319925956428051, -0.04399276524782181, 0.0068929195404052734, -0.06947898864746094, -0.014091040939092636, 0.08031154423952103, -0.00234741042368114, 0.0033385802526026964, 0.04464346915483475, 0.0813320130109787, 0.07013458758592606, -0.020605172961950302, -0.026470042765140533, -0.1252032220363617, 0.03196142241358757, 0.0191615279763937, 0.03293168544769287, -0.11701943725347519, -0.03912746533751488, -0.0023884985130280256, 0.01861780509352684, -0.012858334928750992, 0.042465418577194214, -0.017182879149913788, 0.06405407935380936, -0.00650897016748786, -0.00906356330960989, 0.08663684129714966, 0.02824298106133938, 0.027027977630496025, -0.05499240756034851, -0.006483910139650106, 0.004936048295348883, -0.07521512359380722, -0.09106329083442688, 0.04861224815249443, 0.04347459226846695, -0.07387787848711014, -0.022502576932311058, -0.0867844894528389, 0.008522256277501583, -0.0304108913987875, 0.0541924424469471, -0.021327229216694832, 0.06071879714727402, 0.09203171730041504, 0.05256064981222153, 0.035970281809568405, 0.003942645154893398, -0.06645938009023666, -0.05643696337938309, -0.0019124618265777826, -0.07051309943199158, -0.03751515597105026, -0.04453074187040329, -0.004317200742661953, -0.022250592708587646, -0.05353076756000519, -0.07995939999818802, 0.02577587403357029, -0.017438042908906937, -0.09608613699674606, 0.005831756163388491, -0.03670920804142952, 0.009965411387383938, 0.012467690743505955, 0.008933906443417072, 0.06427597254514694, -0.04920702055096626, -0.03454376757144928, 0.00661542359739542, -0.006811250001192093, -0.06750927120447159, 0.044308848679065704, -0.003794661723077297, -0.05650181323289871, 0.104703389108181, -0.009073490276932716, 0.05890477076172829, -0.016116846352815628, 0.05884409323334694, 0.07120172679424286, -0.014439411461353302, 0.08952543884515762, -0.008649011142551899, -0.02350105345249176, -0.04618775099515915, 0.022523559629917145, -0.04513103887438774, -0.027292432263493538, 0.027543948963284492, 0.12031316012144089, -0.03275207802653313, 0.08172153681516647, 0.011505426838994026, -0.02252713032066822, -0.03176571801304817, -0.047210197895765305, -0.039858367294073105, 0.012051337398588657, 0.04059414938092232, -0.0785653218626976, -0.0815860852599144, 0.036914605647325516, 0.038453251123428345, 0.0030834421049803495, 0.030562466010451317, 0.014547786675393581, -0.058722108602523804, 0.000810583122074604, 0.0299496129155159, 0.019830049946904182, 0.09940043836832047, -0.003335251472890377, 0.023906564339995384, 0.07813720405101776, -0.05318882688879967, -0.017564328387379646, 0.058545276522636414, -0.02510376274585724, 0.06739484518766403, 0.04374884441494942, -0.002512770937755704, 0.08737394958734512, -0.04717562347650528, 0.012436161749064922, 0.017226533964276314, -0.10678946226835251, 0.013798215426504612, -0.021020835265517235, -0.08434619009494781, 0.05636191740632057, 0.12044516205787659, -0.0361478365957737, -0.0566471666097641, -0.023167980834841728, -0.06574220955371857, -0.009658721275627613, 0.06739182025194168, -0.016054561361670494, 0.027622031047940254, -0.034393560141325, 0.05348890647292137, 0.016145607456564903, 0.031245343387126923, 0.03662565350532532, -0.0342630110681057, -0.0012404286535456777, 0.026388006284832954, 0.008515301160514355, -0.023837046697735786, -0.04680183157324791, -0.04980212822556496, -0.06303498893976212, 0.03255162760615349, 0.048542845994234085, 0.022192753851413727, -0.016515590250492096, 0.025422755628824234, -0.07109002768993378, -0.01633603870868683, -0.042539991438388824, 0.014327329583466053, -0.010029633529484272, -0.07229123264551163, 0.018104860559105873, 0.07444614171981812, 0.02587805688381195, 0.05698322132229805, 0.07367124408483505, 0.022195544093847275, -0.054197877645492554, -0.037408314645290375, 0.029085321351885796, -0.046859391033649445, -0.05007890239357948, 0.04817519709467888, 0.08231903612613678, -0.020024137571454048, -0.023049142211675644, 0.06836520880460739, -0.04962863773107529, -0.006646112538874149, -0.04085540771484375, -0.13506600260734558, 0.012585104443132877, 0.03573592007160187, -0.055309925228357315, 0.027501052245497704, -0.03330264985561371, 0.004275321029126644, 0.03973262757062912, -0.00936347246170044, -0.017812535166740417, -0.05442346632480621, 0.019961953163146973, -0.020952755585312843, -0.04588193818926811, -0.04986196011304855, -0.04443822056055069, -0.019674429669976234, -0.055099617689847946, 0.020610664039850235, 0.05454593151807785, 0.06195973604917526, 0.017079420387744904, 0.07135502994060516, -0.02840551920235157, -0.0729093849658966, -0.04389335215091705, -0.07924478501081467, 0.005863100290298462, 0.03417770564556122, -0.0069662234745919704, -0.057278651744127274, 1.6675915509070217e-32, -0.03358627110719681, -0.021995367482304573, 0.09908808022737503, -0.06655421853065491, 0.04785158485174179, 0.0027801888063549995, 0.008687123656272888, 0.057638175785541534, -0.058996282517910004, 0.029264051467180252, -0.03212396427989006, 0.07284541428089142, -0.025770699605345726, 0.07137075066566467, 0.017123015597462654, -0.07941774278879166, -0.007800096180289984, 0.1263510137796402, 0.02273627370595932, 0.0024486950132995844, -0.062415603548288345, 0.11216608434915543, -0.003234976204112172, 0.0324256494641304, 0.049918048083782196, 0.005513794254511595, 0.019379926845431328, -0.1091078594326973, -0.03223457187414169, -0.02277698926627636, 0.06650858372449875, -0.09612233191728592, -0.05340762808918953, 0.04979947581887245, -0.04711693152785301, -0.02119424194097519, 0.032146770507097244, 0.011033525690436363, 0.015662020072340965, -0.026170214638113976, 0.009116972796618938, -0.05730411410331726, -0.048417672514915466, 0.057170551270246506, -0.021044444292783737, 0.053959570825099945, 0.015064582228660583, -0.04236634075641632, -0.05559695512056351, 0.02326628379523754, -0.008620520122349262, -0.04589769244194031, 0.14993776381015778, 0.06023947149515152, 0.013716126792132854, 0.06934817135334015, -0.04220190271735191, -0.05716099590063095, 0.09265515953302383, 0.04351518303155899, -0.03765559941530228, -0.044807709753513336, -0.04110169783234596, 0.09614602476358414, -0.04046397656202316, -0.002562037669122219, 0.0014498772798106074, 0.09203462302684784, -0.04372928664088249, -0.019317861646413803, -0.05237867310643196, 0.030356092378497124, 0.02216925285756588, -0.07213479280471802, -0.06290512531995773, 0.04180534556508064, -0.0011648352956399322, 0.055765751749277115, -0.0009527999209240079, -0.04104182496666908, -0.07720055431127548, -0.03178443759679794, 0.09170568734407425, 0.013133509084582329, -0.025995424017310143, -0.005196681246161461, 0.09335605055093765, 0.06130940467119217, 0.029104862362146378, -0.05123670771718025, 0.004699195269495249, -0.01690305955708027, 0.048437248915433884, -0.012121286243200302, 0.021206017583608627, 2.2714462315338956e-32, -0.008236975409090519, 0.008620524778962135, -0.01819421537220478, 0.09470025449991226, 0.0447949655354023, 0.05690646544098854, -0.05694906786084175, -0.013512510806322098, 0.026024337857961655, 0.06514184176921844, 0.01019893866032362, -0.06758178025484085, 0.004685899708420038, -0.05135715380311012, 0.08431374281644821, -0.04152878746390343, -0.04414019733667374, 0.06090150028467178, -0.03781379759311676, -0.06677721440792084, 0.03715306892991066, 0.06863532960414886, 0.03843458369374275, -0.03429782763123512, -0.08306155353784561, 0.10005515068769455, -0.017694175243377686, 0.012973500415682793, 0.04801411181688309, 0.005122147500514984, -0.014949172735214233, 0.0014774119481444359, 0.059274785220623016, -0.0804755687713623, 0.09882999211549759, 0.07851436734199524, -0.015032821334898472, -0.0777350440621376, 0.017225293442606926, 0.07792963832616806, -0.03899582102894783, 0.009700547903776169, 0.006840113550424576, 0.00404404615983367, 0.020405899733304977, 0.07104093581438065, -0.07526220381259918, -0.10223805159330368, 0.07055633515119553, -0.04567968100309372, -0.023431312292814255, -0.058604978024959564, -0.018330233171582222, -0.01592966914176941, 0.03245196118950844, -0.03147857263684273, 0.07030689716339111, -0.04010699689388275, 0.10513119399547577, -0.06288829445838928, 0.04340989515185356, -0.01102306880056858, -0.05169234797358513, 0.0118904123082757],
    "identifier": "tools/rewards_service.yaml:get_member_rewards_rewards__member_id__get:git_dc0cb338186d2d99332c584ab7e750461e94e678",
    "name": "get_member_rewards_rewards__member_id__get",
    "operation":
    {
      "method": "get",
      "path": "/rewards/{member_id}"
    },
    "record_kind": "http_request",
    "source": "tools/rewards_service.yaml",
    "specification":
    {
      "filename": "services/rewards_spec.json"
    },
    "version":
    {
      "identifier": "dc0cb338186d2d99332c584ab7e750461e94e678",
      "timestamp": "2024-10-01T09:26:29.714296Z"
    }
  }],
  "kind": "tool",
  "source_dirs": ["tools"],
  "version":
  {
    "identifier": "f0882d179ef7dfb35dc67d29d6ac221aeda154bd",
    "is_dirty": false,
    "timestamp": "2024-10-01T09:26:29.459075Z"
  }
}
