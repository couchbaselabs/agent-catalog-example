{
  "embedding_model": "sentence-transformers/all-MiniLM-L12-v2",
  "items": [
  {
    "annotations":
    {
      "ccpa_2019_compliant": "true",
      "gdpr_2016_compliant": "true"
    },
    "description": "Fetch snippets of travel blogs using a user's interests.\n",
    "embedding": [-0.027521472424268723, -0.0842025950551033, -0.0366249643266201, -0.0033154909033328295, 0.06585810333490372, -0.012026769109070301, 0.08438055962324142, 0.001451876130886376, -0.05519222468137741, 0.04457646235823631, -0.035456325858831406, 0.0060350894927978516, -0.042680591344833374, 0.08868627995252609, 0.0668971911072731, -0.008495601825416088, 0.01929430663585663, 0.027411697432398796, 0.008085108362138271, 0.05120275169610977, 0.013780646026134491, 0.005606692284345627, -0.05138358473777771, 0.0788334459066391, 0.019961005076766014, 0.0009709987789392471, -0.1051308661699295, 0.043659500777721405, 0.0224863700568676, 0.0351998470723629, 0.009438179433345795, 0.08187728375196457, -0.0008332362631335855, -0.010346576571464539, 0.09477709978818893, 0.04015648365020752, -0.0004455174203030765, 0.04072071984410286, 0.07406669110059738, 0.06240440532565117, -0.0008168268832378089, -0.05974160134792328, -0.04284333810210228, 0.015750747174024582, -0.011170095764100552, 0.016943108290433884, 0.022171610966324806, 0.011419395916163921, 0.033161457628011703, -0.030514391139149666, -0.11945082992315292, -0.05835708975791931, -0.04130477458238602, -0.05720897391438484, -0.015932317823171616, -0.030430519953370094, -0.05082773417234421, -0.06163148954510689, -0.0744825154542923, -0.011971604079008102, -0.0010927815455943346, -0.04426124691963196, 0.024386785924434662, 0.04841700196266174, -0.05890459939837456, -0.004910089075565338, -0.051229674369096756, 0.11117255687713623, 0.05598089471459389, -0.06750445067882538, -0.04071590676903725, 0.03983701393008232, -0.06145475432276726, 0.10014577209949493, 0.03563878685235977, -0.0664607360959053, -0.01054318156093359, -0.04043180122971535, -0.07960642129182816, -0.058089479804039, -0.03792767971754074, -0.010363330133259296, 0.01505933329463005, -0.06032479926943779, 0.006813361309468746, -0.03750477731227875, 0.03359211981296539, -0.0015866267494857311, 0.027577802538871765, 0.05177631601691246, -0.03289813548326492, -0.10685072839260101, -0.0032621498685330153, 0.006028217263519764, 0.006183521822094917, 0.014935903251171112, -0.041122518479824066, -0.018812280148267746, 0.00663096783682704, 0.07651649415493011, 0.030463626608252525, 0.029226016253232956, 0.10246340185403824, -0.00045612125541083515, -0.02372226119041443, 0.02933676354587078, -0.04581486061215401, 0.03016011416912079, 0.10524176061153412, -0.0347701758146286, 0.0016932475846260786, 0.16445408761501312, 0.03528435528278351, -0.06208024546504021, 0.03251347690820694, -0.10479351878166199, -0.032555922865867615, 0.06007974594831467, 0.04933791235089302, 0.04283379018306732, 0.04350978136062622, -0.06651626527309418, 0.02421632967889309, 0.03495992347598076, -0.060834337025880814, -0.04731905460357666, 0.029894478619098663, -0.010787432081997395, 0.05093809589743614, 0.030426567420363426, 0.060547225177288055, 0.13637837767601013, 0.011524339206516743, 0.03708304837346077, -0.057012978941202164, -0.09921500086784363, -0.05022982507944107, 0.002997963223606348, -0.015392805449664593, 0.10328827798366547, 0.06389874219894409, 0.08103149384260178, -0.07446010410785675, -0.005636322312057018, -0.010525260120630264, 0.020227959379553795, 0.06748126447200775, -0.038597457110881805, -0.014722529798746109, -0.0751936212182045, 0.08237221837043762, -0.12081834673881531, 0.009412472136318684, -0.027070302516222, 0.02215094119310379, 0.040224287658929825, 0.005276159383356571, 0.06756536662578583, -0.06875156611204147, -0.03301319107413292, -0.09778807312250137, -0.027460025623440742, -0.022594206035137177, 0.0381057970225811, -0.06878962367773056, -0.015273048542439938, -0.0157936979085207, -0.03248707577586174, -0.07603338360786438, -0.08115112036466599, -0.016573946923017502, 0.011513120494782925, -0.05865764245390892, 0.022887136787176132, -0.06914366036653519, 0.10407871752977371, 0.02917461469769478, -0.007825474254786968, 0.03279215097427368, -0.09292666614055634, -0.013959607109427452, -0.06200360879302025, -0.004626730922609568, 0.03217317909002304, 0.0040014320984482765, -0.0007606289000250399, 0.02456481009721756, -0.01265085581690073, 0.0702202171087265, 0.08932537585496902, 0.008338693529367447, -0.0465659499168396, 0.09252136200666428, 0.058312080800533295, 0.03838545083999634, -0.009231994859874249, -0.032273080199956894, -0.006163032725453377, 0.009154661558568478, -0.006065530236810446, 0.047353338450193405, -0.09481644630432129, -0.05797750875353813, -0.024135978892445564, -0.016600994393229485, -0.07886326313018799, -0.015156343579292297, 0.06454991549253464, 0.0009581486228853464, -0.023322807624936104, 0.02991008199751377, 0.055122386664152145, 0.047103118151426315, -0.04585959389805794, 0.05991829186677933, -0.07403919100761414, -0.01203511469066143, 0.022013088688254356, 0.03438812494277954, 0.004133574664592743, -0.013941824436187744, -0.0500979870557785, -0.04464113712310791, 8.278634228068954e-33, -0.012937434017658234, 0.046009521931409836, 0.04204839840531349, 0.005844943691045046, -0.01742478832602501, 0.01163922343403101, 0.03599857538938522, -0.018871769309043884, 0.029431691393256187, 0.0164810698479414, -0.164930060505867, -0.014579840935766697, 0.016078827902674675, 0.07378998398780823, 0.02800006791949272, 0.01127946749329567, 0.07129665464162827, 0.02344103343784809, -0.08282258361577988, 0.1274326741695404, -0.03984682634472847, 0.03919012099504471, -0.10001479089260101, -0.039488885551691055, 0.1053994819521904, 0.032720744609832764, 0.05332335829734802, -0.06859397143125534, 0.0050343675538897514, 0.0020413482561707497, 0.03904440626502037, 0.007303559221327305, -0.06368768215179443, 0.01996445097029209, -0.02052304893732071, 0.025860516354441643, -0.03137560561299324, 0.0727447122335434, 0.012693029828369617, 0.05863471329212189, 0.1540287435054779, 0.011551350355148315, 0.019727496430277824, 0.04576202481985092, -0.018757866695523262, 0.014792483299970627, -0.012746796943247318, 0.09542782604694366, 0.0751626044511795, -0.034554775804281235, 0.040446821600198746, 0.0060614123940467834, -0.019269505515694618, -0.009228157810866833, 0.015468901954591274, -0.04005606845021248, -0.052546869963407516, -0.052480198442935944, 0.038406021893024445, -0.038336366415023804, -0.08473006635904312, -0.040669627487659454, 0.015072389505803585, -0.014485749416053295, 0.03142256662249565, -0.08020231127738953, 0.0033974871039390564, -0.012084205634891987, -0.0658399686217308, -0.04503349959850311, 0.06889581680297852, -0.011469067074358463, 0.04201212152838707, -0.08331459760665894, 0.07663176953792572, 0.029630089178681374, 0.08497948944568634, 0.08099419623613358, 0.012738923542201519, 0.006762949749827385, 0.023056071251630783, 0.030176332220435143, -0.0032219416461884975, -0.06601308286190033, 0.02274956740438938, 0.020126333460211754, -0.05881758779287338, 0.049569468945264816, -0.05322672054171562, -0.045209646224975586, 0.012437356635928154, -0.04483487829566002, 0.0467696487903595, 0.0014000049559399486, -0.01858113333582878, 3.096600654140924e-32, -0.07568464428186417, -0.039744578301906586, -0.03569250553846359, 0.008204035460948944, 0.04193528741598129, -0.01843532733619213, -0.006814745254814625, 0.07750965654850006, 0.029828378930687904, 0.05778557062149048, 0.0031479126773774624, -0.07083263248205185, -0.06100566312670708, 0.06766114383935928, 0.03693796694278717, -0.027513651177287102, 0.08202119916677475, 0.03525231406092644, -0.004516709130257368, -0.009903296828269958, -0.0022459998726844788, 0.07826045900583267, 0.004250981379300356, -0.09670310467481613, 0.00816477369517088, 0.014618424698710442, -0.04127667471766472, -0.11606983840465546, 0.058370765298604965, -0.017770709469914436, -0.04001039266586304, 0.014853564091026783, -0.02689247578382492, -0.038558151572942734, -0.00021408060274552554, -0.017169097438454628, -0.029032886028289795, -0.047282908111810684, -0.02119729109108448, 0.011407501064240932, 0.029317688196897507, -0.09816660732030869, 0.09483426064252853, -0.035346657037734985, -0.05181266367435455, 0.01154738012701273, -0.030884435400366783, -0.024682462215423584, 0.01967158541083336, -0.01026203017681837, -0.06807661056518555, -0.07139965146780014, 0.09176292270421982, 0.018512694165110588, 0.03397401049733162, -0.060319606214761734, -0.005131279584020376, -0.007699344307184219, 0.0014265722129493952, -0.04062700644135475, 0.0005970605998300016, 0.007545544300228357, -0.0541514977812767, 0.017416218295693398],
    "identifier": "src/resources/agent_c/tools/blogs_from_interests.yaml:get_travel_blog_snippets_from_user_interests:git_c33204b0bb39c954e10dbcc1e930cee814561945",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"user_interests\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "name": "get_travel_blog_snippets_from_user_interests",
    "record_kind": "semantic_search",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "src/resources/agent_c/tools/blogs_from_interests.yaml",
    "vector_search":
    {
      "bucket": "travel-sample",
      "collection": "article",
      "embedding_model": "sentence-transformers/all-MiniLM-L12-v2",
      "index": "articles-index",
      "scope": "inventory",
      "text_field": "text",
      "vector_field": "vec"
    },
    "version":
    {
      "identifier": "c33204b0bb39c954e10dbcc1e930cee814561945",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.870513Z"
    }
  },
  {
    "description": "Find a list of direct routes between two airports using source_airport and destination_airport.\n",
    "embedding": [0.06763260066509247, -0.013151392340660095, -0.06174253672361374, 0.02478102222084999, 0.06794992834329605, 0.03502584248781204, -0.07320229709148407, -0.027989646419882774, -0.0216694213449955, 0.013633214868605137, -0.022702950984239578, -0.07794513553380966, -0.02180541306734085, -0.011490478180348873, 0.024583011865615845, 0.0035249446518719196, 0.021607276052236557, 0.06606464833021164, 0.0052206749096512794, 0.043391551822423935, 0.07627523690462112, 0.05907292664051056, -0.012614382430911064, 0.05083595961332321, 0.018447108566761017, 0.09019484370946884, -0.051578935235738754, 0.04645613580942154, 0.0843881294131279, 0.01356838271021843, 0.0946824923157692, 0.047309599816799164, -0.08917377889156342, -0.03758298605680466, 0.06745926290750504, 0.020261038094758987, 0.012150426395237446, 0.08826599270105362, 0.03797582909464836, -0.08465307950973511, 0.06550159305334091, -0.010876163840293884, 0.06124330312013626, 0.00665447348728776, -0.01584112085402012, -0.04586773365736008, 0.02101992256939411, 0.04525219649076462, 0.04593149572610855, -0.00976455770432949, -0.0040601701475679874, -0.061044901609420776, -0.05857224762439728, 0.040562767535448074, 0.016566045582294464, 0.004620131570845842, 0.03902953118085861, -0.08819793164730072, -0.018773581832647324, -0.08103648573160172, -0.10638920962810516, -0.07763475924730301, -0.008653273805975914, -0.023888535797595978, -0.009603846818208694, 0.07796769589185715, -0.003770788200199604, -0.0047440920025110245, 0.0036345506086945534, -0.06096402555704117, -0.008458488620817661, 0.06341876834630966, -0.0487871877849102, -0.024654006585478783, -5.368779238779098e-05, -0.07176877558231354, 0.04435557499527931, 0.04291284829378128, -0.054889433085918427, -0.001092711347155273, -0.008985413238406181, -0.015638602897524834, -0.04674536734819412, 0.04626692086458206, -0.021163588389754295, -0.05201252922415733, -0.038106519728899, 0.02484426088631153, 0.04759107530117035, -0.07407084107398987, 0.022869808599352837, 0.03229164704680443, -0.014895305037498474, 0.032918255776166916, 0.07488082349300385, -0.03733633831143379, -0.00962498877197504, -0.02081155590713024, 0.07951268553733826, 0.00800781138241291, 0.1247217059135437, 0.024262992665171623, -0.06748460233211517, 0.07699809968471527, -0.023345651105046272, 0.005219137296080589, 0.009254288859665394, -0.02405671402812004, -0.010119828395545483, 0.032291874289512634, -0.007710363250225782, 0.046521469950675964, -0.016747960820794106, -0.0785200446844101, -0.021815938875079155, 0.07354249805212021, -0.001548422034829855, 0.010127431713044643, -0.0035228433553129435, -0.024491535499691963, -0.023985274136066437, -0.09013289213180542, 0.0811084434390068, 0.01918783038854599, -0.03482430800795555, -0.07091576606035233, 0.0018505892949178815, -0.12431494891643524, 0.05930464714765549, -0.0003662319213617593, 0.024414649233222008, 0.03155668452382088, -0.05800761282444, -0.0064324927516281605, -0.07025529444217682, 0.007126965560019016, 0.0008167735068127513, -0.050582099705934525, -0.06007871776819229, 0.03145807236433029, 0.015204822644591331, -0.011897951364517212, 0.012751882895827293, -0.018251730129122734, 0.040751565247774124, 0.00023509077436756343, -0.07612510770559311, -0.05708152428269386, 0.023020422086119652, -0.001339384587481618, -0.01886473409831524, -0.07707473635673523, 0.14504900574684143, -0.01847671903669834, -0.09021342545747757, 0.0010700107086449862, 0.04484882578253746, 0.03328615799546242, 0.018084269016981125, 0.061872564256191254, 0.04098739102482796, 0.01967032067477703, -0.10910115391016006, 0.0030900456476956606, 0.017862020060420036, 0.060009848326444626, 0.0055800979025661945, 0.032500457018613815, -0.09454047679901123, -0.0022534593008458614, -0.005202115513384342, -0.03016301989555359, -0.013819040730595589, 0.015026401728391647, -0.10097512602806091, -0.018911296501755714, 0.02570222318172455, 0.06280121207237244, -0.03082064539194107, -0.01676582358777523, 0.022775085642933846, -0.04450632259249687, -0.0027046327013522387, -0.05528675764799118, 0.028079988434910774, 0.03348207846283913, 0.07616545259952545, -0.030074724927544594, -0.021687475964426994, 0.047077298164367676, -0.0017690666718408465, 0.028457636013627052, 0.051902201026678085, 0.059589456766843796, -0.017857680097222328, -0.021930253133177757, 0.05274944752454758, -0.0102164838463068, -0.04070684313774109, -0.038956839591264725, 0.0393550843000412, 0.07593938708305359, -0.0020061498507857323, -0.05357631295919418, -0.12719030678272247, -0.06872736662626266, 0.02726057544350624, 0.003583475947380066, -0.0414460152387619, 0.101469986140728, -0.02370358072221279, 0.034965880215168, 0.016604220494627953, 0.057443857192993164, -0.010377400554716587, -0.1370362937450409, -0.01103928592056036, -0.062062036246061325, -0.045686688274145126, 0.03444870561361313, -0.12021838128566742, 0.05898955091834068, 0.02354518137872219, -1.4397743172329313e-33, 0.016949055716395378, -0.0031928974203765392, 0.010010434314608574, -0.03455805405974388, 0.024009322747588158, -0.030916884541511536, 0.09165102243423462, -0.03140255808830261, 0.10859239846467972, 0.11945918202400208, -0.053111981600522995, -0.08463673293590546, 0.024210114032030106, 0.04874638468027115, 0.039946142584085464, -0.12226992100477219, 0.028488537296652794, 0.0058854250237345695, -0.0741102546453476, 0.04427938163280487, -0.020883934572339058, -0.0037360722199082375, -0.09723340719938278, -0.1613115519285202, 0.009349044412374496, 0.05422151833772659, 0.01933296024799347, 0.019404519349336624, -0.058553457260131836, -0.0035678944550454617, -0.07561863213777542, -0.031083615496754646, 0.04051652550697327, 0.0569893978536129, -0.010431692935526371, 0.09618160873651505, -0.030386799946427345, 0.01824495755136013, 0.04145431891083717, -0.045760925859212875, 0.03395704925060272, 0.022624779492616653, 0.020875100046396255, 0.035992737859487534, 0.05243229866027832, 0.05931553244590759, -0.04846321791410446, -0.06195683777332306, -0.04077142849564552, -0.07177477329969406, 0.11685800552368164, 0.11289956420660019, -0.12051273882389069, -0.023732898756861687, 0.02398681454360485, 0.004312073811888695, -0.01409127376973629, -0.05628383532166481, 0.06260360777378082, -0.005296498537063599, -0.04001463204622269, -0.05793045088648796, 0.03980639949440956, 0.00966730248183012, -0.03407582640647888, -0.015866676345467567, -0.03490261361002922, -0.0016222632257267833, 0.09895564615726471, -0.015933219343423843, -0.03465013951063156, 0.0434134416282177, -0.012420657090842724, 0.11271806806325912, -0.04377991333603859, -0.037853553891181946, 0.023042654618620872, 0.0709785744547844, -0.07293981313705444, 0.004335504025220871, -0.05674261599779129, 0.054684314876794815, -0.005325602367520332, -0.017881767824292183, -0.023136330768465996, 0.12788055837154388, -0.05845484137535095, -0.003823013510555029, -0.02372390404343605, -0.013992151245474815, -0.03548675402998924, 0.0631132423877716, 0.0591888427734375, -0.026160120964050293, 0.08709206432104111, 3.9324870462973724e-32, 0.024036934599280357, 0.05563231185078621, -0.05587146058678627, 0.06887456774711609, -0.0028402863536030054, 0.018224269151687622, -0.01674468070268631, -0.03209457919001579, 0.006706242449581623, 0.008797643706202507, -0.023753304034471512, 0.06868021190166473, -0.08213526010513306, 0.0583556666970253, 0.00772675359621644, 0.049069877713918686, -0.04946237802505493, -0.03298059105873108, 0.03947613388299942, -0.04360894113779068, -0.06824010610580444, 0.01364726573228836, -0.061315879225730896, -0.02583455853164196, -0.007674460299313068, 0.0454535111784935, -0.045981284230947495, -0.03339574486017227, 0.030851619318127632, -0.004997085779905319, 0.035843703895807266, -0.021367771551012993, 0.01762515865266323, 0.046013254672288895, -0.0010502164950594306, -0.03128613531589508, -0.000537920102942735, -0.05960681289434433, 0.044798146933317184, 0.003414634382352233, -0.020655229687690735, 0.012696294113993645, 0.001470927381888032, -0.040642473846673965, 0.03757593035697937, -0.027543529868125916, 0.012708144262433052, -0.1180008128285408, -0.02603444643318653, -0.015678679570555687, 0.002704673446714878, -0.0009723964612931013, 0.06317832320928574, -0.01143723912537098, 0.007841113023459911, -0.08571583777666092, 0.004962998442351818, -0.06337916105985641, 0.0958988294005394, -0.08207167685031891, 0.012481805868446827, 0.1059814915060997, -0.02260524407029152, -0.004975974094122648],
    "identifier": "src/resources/agent_c/tools/find_direct_flights.sqlpp:find_direct_routes_between_airports:git_c33204b0bb39c954e10dbcc1e930cee814561945",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"source_airport\": { \"type\": \"string\" },\n    \"destination_airport\": { \"type\": \"string\" }\n  }\n}\n",
    "name": "find_direct_routes_between_airports",
    "output": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"airlines\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"layovers\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"from_airport\": { \"type\": \"string\" },\n      \"to_airport\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "query": "/*\nname: find_direct_routes_between_airports\n\ndescription: >\n    Find a list of direct routes between two airports using source_airport and destination_airport.\n\ninput: >\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"source_airport\": { \"type\": \"string\" },\n        \"destination_airport\": { \"type\": \"string\" }\n      }\n    }\n\noutput: >\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"airlines\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"layovers\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"from_airport\": { \"type\": \"string\" },\n          \"to_airport\": { \"type\": \"string\" }\n        }\n      }\n    }\n\nsecrets:\n    - couchbase:\n        conn_string: CB_CONN_STRING\n        username: CB_USERNAME\n        password: CB_PASSWORD\n*/\n\nFROM   `travel-sample`.inventory.route r\nWHERE  r.sourceairport = $source_airport AND\n       r.destinationairport = $destination_airport\nSELECT VALUE { \"airlines\"     : [ r.airline ],\n               \"layovers\"     : [],\n               \"from_airport\" : r.sourceairport,\n               \"to_airport\"   : r.destinationairport }\nLIMIT  10;\n",
    "record_kind": "sqlpp_query",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "src/resources/agent_c/tools/find_direct_flights.sqlpp",
    "version":
    {
      "identifier": "c33204b0bb39c954e10dbcc1e930cee814561945",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.822035Z"
    }
  },
  {
    "description": "Find a list of routes between two airports with one layover. The routes always start at source_airport and end at destination_airport.\n",
    "embedding": [0.1396380364894867, -0.007170070894062519, -0.08346028625965118, -0.002706564497202635, 0.037803951650857925, 0.03421637415885925, -0.07646365463733673, 0.008244111202657223, -0.03101615607738495, 0.009322373196482658, -0.023016398772597313, -0.07046724110841751, -0.02173512801527977, 0.003523976542055607, -0.0038387246895581484, 0.013238802552223206, -0.015244094654917717, 0.08737517148256302, 0.018248844891786575, 0.027043862268328667, 0.0637061819434166, 0.04567946493625641, -0.02516811341047287, 0.05096467211842537, -0.014494356699287891, 0.10034101456403732, -0.01657305285334587, -0.01253510918468237, 0.07289436459541321, -0.009950103238224983, 0.054616689682006836, 0.03604930266737938, -0.07701794803142548, -0.059488385915756226, 0.06476980447769165, 0.027719059959053993, 0.00244071613997221, 0.09979937225580215, 0.04406280443072319, -0.06555283069610596, 0.04830912500619888, 0.026693208143115044, 0.09336564689874649, -0.0007054173620417714, -0.02168436348438263, -0.013978698290884495, 0.017188621684908867, 0.006479594390839338, 0.05930498614907265, -0.007406537886708975, 0.03434723615646362, -0.05565445125102997, -0.054900873452425, 0.059957459568977356, 0.014789779670536518, 0.012642310932278633, 0.07416179776191711, -0.06121094524860382, -0.016261272132396698, -0.028903229162096977, -0.08842159062623978, -0.07795695960521698, -0.025590863078832626, -4.949454159941524e-05, 0.016759492456912994, 0.10432975739240646, 0.007804695051163435, 0.0032572157215327024, -0.028114328160881996, -0.03667972609400749, -0.04112447798252106, 0.021950192749500275, -0.07301999628543854, -0.04054359346628189, -0.01710018888115883, -0.045412272214889526, 0.05782894790172577, 0.03797921538352966, -0.03706943243741989, 0.021732335910201073, 0.0020975014194846153, -0.010423342697322369, 0.004779353272169828, 0.05352390557527542, -0.041237495839595795, -0.061420124024152756, -0.02674677036702633, 0.05902629345655441, 0.01795336790382862, -0.06457198411226273, 0.03364801034331322, 0.007880437187850475, 0.04119102656841278, 0.045973408967256546, 0.07624432444572449, 0.007297412026673555, 0.030713515356183052, -0.01254073902964592, 0.08051549643278122, 0.024692798033356667, 0.0935135930776596, -0.025519054383039474, 0.02697071060538292, 0.09898250550031662, -0.012715036049485207, 0.018605394288897514, -0.0332709476351738, -0.06026451662182808, 0.013300808146595955, 0.040964171290397644, -0.03733613342046738, 0.026435457170009613, 0.023246530443429947, -0.07458999752998352, -0.004235224798321724, 0.06548631936311722, 0.018304364755749702, 0.006230115424841642, -0.02544611692428589, -0.023651113733649254, -0.03914479538798332, -0.023821678012609482, 0.06284454464912415, -0.027763403952121735, -0.032767340540885925, -0.06688939034938812, 0.043091002851724625, -0.12734486162662506, 0.06405897438526154, -0.07142578810453415, 0.0558910071849823, 0.034814316779375076, -0.05549519509077072, -0.03657039627432823, -0.04843372106552124, -0.02044720947742462, -0.051557376980781555, -0.0380144938826561, -0.074053555727005, 0.002454651752486825, -0.05058686435222626, -0.0258419681340456, 0.062425196170806885, -0.05730225518345833, 0.043461307883262634, -0.0024474654346704483, -0.08603627979755402, -0.09518519043922424, 0.025874502956867218, -0.041908182203769684, -0.06254791468381882, -0.06530270725488663, 0.1435788869857788, -0.009573191404342651, -0.07855559140443802, -0.00897307600826025, 0.017254317179322243, 0.01710609905421734, 0.007091949228197336, 0.101932592689991, 0.005323201883584261, 0.05509323999285698, -0.12642306089401245, -0.03400983288884163, -0.008003524504601955, 0.06056081876158714, -0.02290395274758339, 0.03116138093173504, -0.06118028238415718, -0.005018577910959721, -0.011267358437180519, -0.025580234825611115, 0.0038581581320613623, 0.016400540247559547, -0.09411308169364929, -0.03583019971847534, 0.0355956144630909, 0.05882660672068596, -0.03128410875797272, -0.06749680638313293, -0.02524346113204956, -0.04255276918411255, -0.00406469963490963, -0.056725628674030304, 0.037539321929216385, -0.0005974848172627389, 0.0626937597990036, -0.020313382148742676, -0.01559662725776434, -0.001155068981461227, -0.014491250738501549, 0.004165350459516048, 0.07234563678503036, 0.07892190665006638, -0.017263228073716164, 0.001102994428947568, 0.011678952723741531, -0.027552349492907524, 0.0006809839978814125, -0.06230374053120613, -0.020643673837184906, 0.10238111019134521, -0.013201942667365074, -0.03464537486433983, -0.1363353431224823, -0.02806103229522705, 0.05305175110697746, -0.02468118630349636, -0.02990872599184513, 0.08863351494073868, -0.011540244333446026, 0.00955977849662304, 0.015445142984390259, 0.07333683967590332, -0.04597010463476181, -0.13350535929203033, -0.03434242680668831, -0.060811854898929596, -0.10841482877731323, 0.043020252138376236, -0.10700932145118713, 0.04632874205708504, 0.02584601752460003, 1.3329458498076827e-33, 0.050074316561222076, -0.0427614226937294, -0.021808983758091927, 0.012048698961734772, 0.05624198168516159, -0.029278386384248734, 0.10239411145448685, -0.04838283732533455, 0.08414682000875473, 0.15236656367778778, -0.025796568021178246, -0.07860933989286423, 0.03991831839084625, 0.07205235958099365, -0.0017406917177140713, -0.1151197999715805, 0.04770241305232048, 0.01356992032378912, -0.05308425799012184, 0.020605307072401047, -0.020875537768006325, -0.024769386276602745, -0.11726715415716171, -0.13388574123382568, 0.04313923418521881, 0.05747557803988457, 0.036793094128370285, 0.021752990782260895, -0.047604095190763474, 0.00494987890124321, -0.0387289933860302, -0.07276631146669388, 0.09080412238836288, 0.022231334820389748, -0.03373754024505615, 0.12979060411453247, -0.08018859475851059, 0.02371870167553425, 0.03936073184013367, -0.007523354608565569, 0.018227025866508484, 0.013694649562239647, 0.05068710818886757, 0.035555653274059296, 0.04697350040078163, 0.025118065997958183, -0.0709167867898941, -0.009003055281937122, -0.025256311520934105, -0.07932154089212418, 0.0673968642950058, 0.10863657295703888, -0.08444871753454208, -0.011886193417012691, 0.05322827398777008, 0.007101839408278465, 0.009171140380203724, -0.006593134719878435, 0.046771541237831116, 0.011751075275242329, -0.039807531982660294, -0.06203259900212288, 0.07907230406999588, 0.020508205518126488, -0.008235658518970013, -0.05763730779290199, -0.03618099167943001, 0.03019789792597294, 0.08182502537965775, -0.0033569701481610537, -0.05164996534585953, 0.03459908813238144, -0.053912337869405746, 0.07076971232891083, -0.024328209459781647, -0.04656251519918442, 0.0406123548746109, 0.0029331010300666094, -0.05900907889008522, 0.013017049990594387, -0.07547986507415771, 0.04881097376346588, -0.011318624950945377, -0.03427007421851158, -0.031183525919914246, 0.08382034301757812, -0.04384149610996246, 0.04664162918925285, 0.03728464990854263, 0.01650630310177803, -0.040615491569042206, 0.04007365182042122, 0.03512875363230705, -0.05797235295176506, 0.010081431828439236, 5.739751423716274e-32, 0.05066082254052162, 0.057700760662555695, -0.011035525240004063, 0.019742099568247795, 0.014574970118701458, 0.043147340416908264, 0.03443245217204094, -0.049418043345212936, -0.018662938848137856, -0.028969647362828255, -0.03310363367199898, 0.07120735943317413, -0.048060860484838486, 0.05842043086886406, -0.014840977266430855, 0.023163802921772003, -0.030404968187212944, -0.030752032995224, -0.00423951493576169, -0.04432423785328865, -0.10029371082782745, -0.02051628567278385, -0.0667833685874939, -0.003699162509292364, 0.0013555395416915417, 0.04647354036569595, -0.026929602026939392, -0.02616671286523342, 0.03179200738668442, -0.005925806239247322, 0.04273882880806923, 0.021016089245676994, 0.004562449175864458, 0.02296714298427105, 0.05068214237689972, -0.05836746469140053, 0.02966718189418316, -0.05501499027013779, 0.022937584668397903, 0.012067587114870548, -0.023216487839818, -0.012862506322562695, -0.005756067577749491, -0.019054541364312172, -0.0041016642935574055, -0.013567459769546986, 0.04926234856247902, -0.0818459540605545, 0.002088143490254879, 0.004547580145299435, -0.01417931541800499, -0.005036652088165283, 0.07655829191207886, 0.0011759086046367884, 0.02481543831527233, -0.10080647468566895, 0.00021918915444985032, -0.030406596139073372, 0.046130239963531494, -0.10507157444953918, -0.00023348585818894207, 0.09464704245328903, -0.04444347694516182, 0.004432761576026678],
    "identifier": "src/resources/agent_c/tools/find_one_layover_flights.sqlpp:find_routes_with_one_layover:git_c33204b0bb39c954e10dbcc1e930cee814561945",
    "input": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"source_airport\": { \"type\": \"string\" },\n    \"destination_airport\": { \"type\": \"string\" }\n  }\n}\n",
    "name": "find_routes_with_one_layover",
    "output": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"airlines\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"layovers\": {\n        \"type\": \"array\",\n        \"items\": { \"type\": \"string\" }\n      },\n      \"from_airport\": { \"type\": \"string\" },\n      \"to_airport\": { \"type\": \"string\" }\n    }\n  }\n}\n",
    "query": "/*\nname: find_routes_with_one_layover\n\ndescription: >\n    Find a list of routes between two airports with one layover.\n    The routes always start at source_airport and end at destination_airport.\n\ninput: >\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"source_airport\": { \"type\": \"string\" },\n        \"destination_airport\": { \"type\": \"string\" }\n      }\n    }\n\noutput: >\n    {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"airlines\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"layovers\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"from_airport\": { \"type\": \"string\" },\n          \"to_airport\": { \"type\": \"string\" }\n        }\n      }\n    }\n\nsecrets:\n    - couchbase:\n        conn_string: CB_CONN_STRING\n        username: CB_USERNAME\n        password: CB_PASSWORD\n*/\n\nFROM  `travel-sample`.inventory.route r1,\n      `travel-sample`.inventory.route r2\nWHERE  r1.sourceairport = $source_airport AND\n       r1.destinationairport = r2.sourceairport AND\n       r2.destinationairport = $destination_airport\nSELECT VALUE { \"airlines\"     : [r1.airline, r2.airline],\n               \"layovers\"     : [r1.destinationairport],\n               \"from_airport\" : r1.sourceairport,\n               \"to_airport\"   : r2.destinationairport }\nLIMIT  10;",
    "record_kind": "sqlpp_query",
    "secrets": [
    {
      "couchbase":
      {
        "conn_string": "CB_CONN_STRING",
        "password": "CB_PASSWORD",
        "username": "CB_USERNAME"
      }
    }],
    "source": "src/resources/agent_c/tools/find_one_layover_flights.sqlpp",
    "version":
    {
      "identifier": "c33204b0bb39c954e10dbcc1e930cee814561945",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.771468Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Book a flight using the provided ticket information",
    "embedding": [0.07964880019426346, -0.01892813853919506, -0.034237202256917953, 0.04087970033288002, 0.019528867676854134, 0.007520368322730064, 0.12816505134105682, 0.047011133283376694, 0.001661222893744707, 0.02355436235666275, -0.01706801913678646, 0.018638664856553078, -0.07241135090589523, -0.015392071567475796, -0.004064055159687996, 0.014077779836952686, 0.05484424903988838, 0.0060828025452792645, 0.011817164719104767, 0.03255566582083702, 0.01629418507218361, 0.024236131459474564, -0.10591598600149155, 0.08768223226070404, 0.024603916332125664, 0.008425327017903328, 0.02663617953658104, 0.008889390155673027, 0.012042393907904625, -0.0013659590622410178, -0.028945960104465485, 0.06696529686450958, 0.049536190927028656, -0.007986907847225666, 0.0021285831462591887, -0.035613998770713806, -0.07248246669769287, 0.06310909241437912, -0.03365078195929527, -0.052422285079956055, 0.060892798006534576, -0.04390201345086098, -0.015174428932368755, 0.06504574418067932, 0.024981550872325897, 0.03474283963441849, -0.00662382785230875, 0.02338004857301712, 0.012037255801260471, 0.1016775444149971, -0.03237546235322952, -0.006227412726730108, 0.02062809094786644, -0.024457812309265137, 0.08035934716463089, 0.04440922662615776, -0.038535140454769135, -0.10515644401311874, -0.010233152657747269, -0.03387516736984253, -0.044975582510232925, -0.09114997088909149, -0.006379575468599796, 0.016451247036457062, -0.05269337072968483, 0.03754545748233795, -0.054799120873212814, 0.054786164313554764, 0.027508283033967018, -0.03594021126627922, -0.026382843032479286, 0.10874536633491516, -0.0639149621129036, 0.0024481862783432007, 0.030694520100951195, -0.019944893196225166, -0.011753802187740803, -0.050312481820583344, 0.08277206867933273, 0.01529525313526392, 0.031455185264348984, -0.011598839424550533, 0.019632821902632713, 0.055370669811964035, 0.024751339107751846, 0.014584437012672424, -0.06307467818260193, -0.027157096192240715, 0.05681612715125084, -0.010094997473061085, 0.04766210913658142, -0.08436998724937439, -0.005597319919615984, 0.03166288882493973, -0.09785506874322891, 0.027394883334636688, -0.0020093207713216543, -0.09966196864843369, 0.044272586703300476, 0.06824658811092377, 0.07821105420589447, 0.07123085111379623, 0.002149270148947835, 0.017594991251826286, 0.001698580221273005, -0.0574161596596241, 0.04146631434559822, 0.03877319023013115, 0.058933649212121964, -0.04501327499747276, -0.0748412162065506, 0.026087496429681778, -0.0017494730418547988, -0.011575600132346153, -0.03969390690326691, 0.037664689123630524, -0.016423163935542107, 0.08857043087482452, 0.000724479672499001, -0.1460103988647461, -0.003103322349488735, -0.09914763271808624, 0.051437437534332275, 0.051937758922576904, -0.05948073789477348, -0.05252041667699814, 0.09039299190044403, -0.06756556034088135, 0.0016742144944146276, 0.00737669738009572, 0.015840718522667885, -0.03291437402367592, -0.058281224220991135, 0.023439696058630943, -0.12406475096940994, 0.021814897656440735, 0.007725036237388849, -0.007560907397419214, -0.08304989337921143, -0.08614327758550644, 0.1059068813920021, 0.013976114802062511, -0.053164124488830566, 0.06271816790103912, 0.0015694997273385525, 0.07623545080423355, 0.04078975319862366, -0.02136501483619213, -0.015257827937602997, -0.0019159727962687612, -0.049373071640729904, 0.04435288906097412, 0.022549735382199287, -0.024974694475531578, -0.06445000320672989, 0.03923949599266052, 0.056338224560022354, -0.01875631883740425, 0.04511548578739166, 0.011856695637106895, 0.014520987868309021, -0.0946185439825058, 0.003030418651178479, 0.04636860266327858, -0.009089399129152298, -0.024450356140732765, 0.010195339098572731, 0.01851815916597843, -0.011717896908521652, 0.04134717956185341, -0.06138173118233681, 0.06948480755090714, -0.1031036376953125, -0.007897925563156605, -0.034648023545742035, 0.07252627611160278, 0.001851739943958819, 0.054247062653303146, 0.03401109203696251, -0.058026272803545, -0.02375529520213604, -0.009022695012390614, -0.027287853881716728, 0.027516288682818413, -0.014237917959690094, -0.04353398457169533, 0.028584493324160576, -0.015292690135538578, -0.005297972355037928, 0.00506950868293643, 0.030955864116549492, -0.018321078270673752, 0.0323038287460804, -0.010913379490375519, 0.035391248762607574, -0.02306809462606907, 0.03723422810435295, -0.09215398877859116, 0.01143522746860981, 0.0031081552151590586, -0.054655298590660095, 0.03980855643749237, -0.037248656153678894, 0.0307731032371521, -0.0051219891756772995, 0.024388575926423073, -0.07192891091108322, 0.01682858169078827, 0.044026825577020645, 0.10321901738643646, 0.07988739013671875, 0.1111045628786087, 0.0028898322489112616, -0.027094654738903046, 0.09319764375686646, 0.006155079230666161, -0.025445062667131424, -0.040412940084934235, -0.022895218804478645, 0.0005165941547602415, -0.1021217554807663, -0.00935629103332758, 0.03289531171321869, 1.4180326308595116e-33, -0.054288849234580994, -0.04340897873044014, -0.046899840235710144, -0.08285990357398987, -0.0058241174556314945, -0.009439605288207531, -0.008342496119439602, -0.12240847945213318, 0.033635299652814865, 0.04918545112013817, -0.05728999525308609, 0.06299987435340881, -0.0013789613731205463, 0.020407073199748993, -0.007564235012978315, -0.060386013239622116, -0.018397772684693336, -0.006487309467047453, -0.07267404347658157, -0.0020795827731490135, -0.0300692617893219, 0.004339870996773243, -0.10963629931211472, -0.07654473185539246, 0.05099969357252121, 0.024200133979320526, 0.04158281162381172, 0.02263553999364376, -0.024226080626249313, -0.009674087166786194, 0.020452026277780533, -0.06466136127710342, 0.00441014114767313, 0.009705188684165478, -0.05901549383997917, -0.08140537887811661, 0.08108513802289963, 0.11103171110153198, -0.0845056027173996, 0.07095565646886826, -0.03312103450298309, 0.08675475418567657, -0.032906513661146164, 0.030646897852420807, 0.08085746318101883, -0.05017462745308876, 0.034235745668411255, -0.0013929413398727775, 0.05619310215115547, 0.06414143741130829, 0.04464384540915489, 0.023616047576069832, -0.027326270937919617, 0.06010967865586281, -0.012052587233483791, -0.0022531647700816393, -0.015168390236794949, -0.05876656249165535, 0.08404321223497391, -0.03955943509936333, 0.014108880423009396, -0.08130514621734619, 0.0944719910621643, -0.02458491362631321, -0.026491492986679077, 0.02992338128387928, -0.03513149172067642, 0.006369908340275288, -0.014941188506782055, 0.015604556538164616, -0.11056052148342133, -0.0418720543384552, -0.039475008845329285, 0.027909763157367706, 0.04416254535317421, 0.008878459222614765, 0.028620420023798943, 0.10030092298984528, -0.021430490538477898, 0.06747016310691833, 0.006156381219625473, -0.011742699891328812, -0.029176490381360054, 0.023740267381072044, 0.04334889352321625, 0.08654502034187317, 0.009840543381869793, -0.0556841678917408, -0.07030946016311646, -0.06579248607158661, -0.0509796179831028, -0.03537113964557648, -0.030670834705233574, -0.07284709811210632, -0.024893298745155334, 3.328417534894336e-34, -0.047619786113500595, 0.0027364969719201326, 0.03604704141616821, 0.03384414687752724, 0.006524130702018738, 0.02637271024286747, -0.0033360051456838846, -0.012681163847446442, -0.06225082278251648, -0.08944923430681229, -0.06458940356969833, -0.0033855184447020292, -0.061684682965278625, 0.018351316452026367, 0.01007363572716713, -0.04712044447660446, -0.03859329596161842, -0.02665366232395172, 0.004804996307939291, -0.02227296493947506, 0.04024328663945198, 0.05955018848180771, 0.005112900864332914, 0.01314413733780384, 0.08926767855882645, 0.014693362638354301, -0.04543408378958702, 0.025637099519371986, 0.06037972867488861, 0.041998520493507385, -0.10405223071575165, -9.317360672866926e-05, 0.09813510626554489, 0.039866942912340164, 0.02177831530570984, -0.006264327093958855, -0.045200493186712265, -0.04792948439717293, 0.050351906567811966, 0.09918753057718277, 0.0065337796695530415, 0.052793949842453, -0.04305360093712807, 0.017160564661026, 0.14707249402999878, -0.0794299840927124, 0.01370795164257288, -0.06787040829658508, 0.013443763367831707, 0.007297557312995195, 0.0033018814865499735, -0.08991075307130814, 0.11881713569164276, 0.027645204216241837, 0.02268887311220169, -0.013549592345952988, -0.07604557275772095, -0.0843627080321312, 0.10691288113594055, -0.012781202793121338, -0.028627367690205574, 0.13585354387760162, -0.05579386651515961, 0.02792101353406906],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:book_flight:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "book_flight",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Calculate the travel costs based on distance, fuel efficiency, and fuel price",
    "embedding": [0.16308048367500305, 0.007964524440467358, -0.10284174233675003, 0.06895141303539276, 0.02659647725522518, -0.03926452621817589, -0.04548750817775726, 0.034332387149333954, -0.0882045105099678, -0.05976754054427147, 0.03350056707859039, -0.049486126750707626, -0.07212571799755096, 0.06723733246326447, -0.012649044394493103, -0.053465522825717926, 0.07916897535324097, -0.007809242699295282, -0.030371928587555885, -0.06065640598535538, 0.07716646790504456, -0.05107725411653519, 0.00416776817291975, 0.006148317828774452, 0.04723595082759857, 0.12147124856710434, -0.04953531548380852, 0.06134747341275215, 0.0012296338099986315, 0.05231369286775589, 0.0008209854131564498, -0.008366512134671211, -0.009221266955137253, -0.0339730940759182, 0.0962454229593277, 0.0004874611331615597, 0.0043963841162621975, 0.053704142570495605, 0.03132343664765358, 0.047038573771715164, 0.013770771212875843, -0.038864269852638245, -0.0450625903904438, 0.05767818167805672, 0.03279728814959526, -0.04227989539504051, 0.018661154434084892, -0.03220314532518387, 0.06376484036445618, 0.023940490558743477, 0.0009818591643124819, -0.044975798577070236, -0.058820150792598724, -0.06330443173646927, 0.0235532745718956, -0.023468676954507828, -0.028244011104106903, -0.050129108130931854, -0.0017763642827048898, -0.06982836127281189, -0.03404586389660835, -0.04914189875125885, -0.00869048573076725, -0.0034357598051428795, -0.02308071404695511, -0.029939791187644005, 0.02344738319516182, 0.03676474466919899, 0.013270564377307892, -0.06958261132240295, -0.08520899713039398, 0.02704663574695587, -0.0067132203839719296, -0.11786193400621414, 0.021147282794117928, -0.023490598425269127, 0.011925388127565384, 0.08006241917610168, 0.011473648250102997, -0.035560596734285355, 0.01714019477367401, -0.022887174040079117, -0.12161023169755936, 0.05339283123612404, 0.11869023740291595, -0.06801676750183105, 0.06650707870721817, 0.030223986133933067, -0.08028442412614822, 0.0067478748969733715, 0.010733057744801044, 0.000759346701670438, -0.02792961522936821, -0.004563273396342993, -0.019466301426291466, 0.025124089792370796, -0.004146594554185867, -0.032843559980392456, 0.05698953941464424, 0.015650708228349686, 0.04908962547779083, -0.006374398712068796, -0.0437484048306942, -0.043686721473932266, -0.0689871534705162, 0.012888094410300255, -0.007320578210055828, -0.0355013906955719, 0.04505033791065216, -0.020175157114863396, 0.06720846891403198, 0.008103104308247566, -0.03271304443478584, -0.021294323727488518, -0.03061620704829693, 0.03278493136167526, 0.07061415165662766, -0.029865704476833344, 0.029038142412900925, 0.051310598850250244, -0.048355117440223694, -0.09566546976566315, 0.00989607535302639, 0.05082157254219055, -0.06553879380226135, -0.07865805178880692, 0.04544644430279732, -0.004593813791871071, -0.14151357114315033, -0.05882728099822998, 0.07351863384246826, 0.046002089977264404, -0.10644420981407166, 0.013771439902484417, -0.09012000262737274, -0.01412872038781643, 0.00790675263851881, -0.020064719021320343, -0.02978825755417347, 0.0361538827419281, 0.08655589073896408, -0.06340260803699493, 0.09169013798236847, -0.032074764370918274, 0.06779462844133377, 0.011329480446875095, -0.02779855951666832, -0.03799526393413544, -0.036921776831150055, -0.04039602726697922, 0.040589094161987305, -0.09519416093826294, 0.006240892224013805, 0.007670949213206768, -0.016496755182743073, -0.05428936704993248, 0.03393939137458801, -0.010476555675268173, -0.006716242991387844, 0.10989436507225037, -0.05204017832875252, 0.024450188502669334, 0.006624611094594002, 0.024104271084070206, -0.023078424856066704, 0.11318332701921463, -0.009820056147873402, -0.006636269390583038, -0.08831944316625595, -0.027788758277893066, 0.0011791465803980827, 0.03096162900328636, -0.028616826981306076, 0.10427746921777725, 0.05958138778805733, -0.042297035455703735, 0.013345710001885891, 0.07850862294435501, -0.07581504434347153, -0.04692353680729866, 0.028712069615721703, -0.05255524069070816, -0.020823948085308075, -0.01704709231853485, -0.003403671784326434, -0.03446812927722931, -0.0037415095139294863, -0.0022404820192605257, -0.08513979613780975, 0.11315324157476425, 0.04311457276344299, -0.016974689438939095, 0.07168830931186676, 0.012694796547293663, -0.025894004851579666, -0.002386557636782527, 0.02384866587817669, 0.049017421901226044, 0.052838388830423355, -0.055798690766096115, 0.06658019125461578, -0.007671724539250135, 0.07875847816467285, -0.0013744855532422662, -0.017788590863347054, -0.017726123332977295, -0.0405501089990139, -0.018997730687260628, -0.07069483399391174, 0.07493500411510468, 0.01006893441081047, 0.002233573468402028, 0.045656293630599976, 0.016256898641586304, 0.03127816319465637, -0.08627501875162125, -0.04902943596243858, 0.025659849867224693, -0.03417159244418144, -0.008165591396391392, -0.061068132519721985, -0.07834471017122269, -0.04636939615011215, -1.5416604737614454e-33, 0.02697617933154106, 0.06879410147666931, 0.013904848136007786, -0.0011774447048082948, 0.051073890179395676, -0.021237337961792946, 0.045211952179670334, -0.03771612420678139, 0.1431361734867096, 0.08813855051994324, -0.12220430374145508, -0.015709487721323967, 0.011551886796951294, 0.01773773320019245, -0.0065063475631177425, -0.029066631570458412, 0.0729898065328598, -0.09187159687280655, -0.08997203409671783, 0.045755743980407715, -0.027646875008940697, 0.023746369406580925, -0.12485264241695404, -0.03112746588885784, -0.0016253495123237371, -0.004685552325099707, 0.033584050834178925, -0.025573579594492912, -0.03225648030638695, 0.029818067327141762, 0.020668774843215942, -0.058152854442596436, 0.027868544682860374, 0.10051295161247253, -0.08261573314666748, 0.028512591496109962, 0.018847068771719933, 0.07507582753896713, 0.043283797800540924, 0.017022892832756042, 0.07205737382173538, -0.031613364815711975, -0.01760621927678585, -0.009645501151680946, 0.0832660049200058, 0.08284341543912888, 0.02150535024702549, -0.048963457345962524, 0.018299374729394913, -0.028499606996774673, 0.07545503228902817, 0.05228912830352783, -0.09798365831375122, 0.046661585569381714, -0.023281743749976158, -0.01430827658623457, 0.009846336208283901, -0.020684055984020233, -0.0502176508307457, 0.019797485321760178, 0.015846803784370422, -0.0501495786011219, 0.069633349776268, 0.04358542710542679, -0.024844761937856674, 0.019346624612808228, 0.032061073929071426, -0.11333116143941879, 0.07148406654596329, -0.04232368990778923, -0.046912580728530884, 0.021389340981841087, 0.017589572817087173, -0.005013552960008383, -0.01405299175530672, 0.007784749381244183, 0.06862685084342957, 0.07246667146682739, -0.0014880055096000433, 0.06517636030912399, -0.047469623386859894, -0.015204150229692459, 0.012389950454235077, -0.005260089412331581, -0.03761390224099159, 0.025416621938347816, -0.05459991842508316, -0.033181361854076385, -0.014406496658921242, 0.07208353281021118, 0.0026003706734627485, 0.01549789123237133, 0.008144337683916092, 0.03160442039370537, -0.016193745657801628, 2.293809717684702e-32, 0.0622321180999279, -0.02436807192862034, -0.07293226569890976, 0.0788656622171402, -0.03983509913086891, 0.009556399658322334, 0.05961083620786667, 0.10511566698551178, -0.062043026089668274, -0.054455626755952835, 0.05402904003858566, 0.001158360973931849, -0.02041948214173317, 0.09777072817087173, -0.08499259501695633, 0.02485291287302971, -0.005690364167094231, 0.045796383172273636, 0.0044565629214048386, 0.042100828140974045, -0.011448665522038937, 0.10709451138973236, -0.0496627613902092, 0.00519597576931119, 0.03308165445923805, -0.02414865605533123, -0.0530511699616909, 0.007187060080468655, 0.04489023983478546, -0.07790182530879974, -0.012874333187937737, 0.01092969998717308, -0.051742371171712875, 0.04141658544540405, -0.032940130680799484, -0.014790448360145092, -0.018269909545779228, 0.06550857424736023, -0.006231856532394886, 0.09788941591978073, 0.05477013811469078, 0.03412419557571411, -5.830062218592502e-05, -0.0008160687866620719, 0.09060163795948029, 0.0053848079405725, -0.05269920825958252, -0.054062966257333755, -0.05156852304935455, -0.026802528649568558, 0.011226983740925789, -0.0017179773421958089, 0.017183324322104454, 0.03451474383473396, -0.11048203706741333, -0.11054053902626038, -0.0041823252104222775, -0.012239355593919754, -0.022176310420036316, -0.018096473067998886, 0.002683552447706461, 0.01932370476424694, -0.022271405905485153, -0.01335205789655447],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:calculate_travel_costs:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "calculate_travel_costs",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Check if the given AITA code is valid (i.e., represents an airline).",
    "embedding": [0.0479990690946579, -0.00783295463770628, -0.053702276200056076, -0.06574389338493347, -0.013180719688534737, 0.01663023978471756, 0.04521177336573601, -0.04296514391899109, -0.10229284316301346, 0.056518714874982834, 0.02116408199071884, -0.08204247057437897, 0.003356416244059801, 0.05203119292855263, 0.02566978707909584, 0.026851946488022804, 0.01780632697045803, -0.03397674858570099, -0.024040579795837402, 0.03190701827406883, 0.05717192590236664, 0.06264160573482513, -0.07300324738025665, 0.0033402093686163425, -0.01670704036951065, 0.06733904033899307, 0.04298681020736694, 0.05024260655045509, 0.0520985871553421, 0.036094579845666885, 0.012029929086565971, -0.016112148761749268, 0.040995098650455475, 0.05142015591263771, 0.06873491406440735, -0.019707174971699715, -0.0415288507938385, -0.0379859060049057, 0.05953030660748482, -0.03581460565328598, -0.036844514310359955, -0.06841050088405609, -0.04993341863155365, -0.004137509502470493, 0.013494422659277916, 0.06603845208883286, 0.00460057845339179, 0.03243337571620941, 0.02976072020828724, 0.034744203090667725, 0.01912597008049488, -0.030311046168208122, -0.003321160562336445, 0.01649314910173416, 0.023875350132584572, -0.059961214661598206, 0.0382407121360302, 0.006255172658711672, -0.008964113891124725, -0.022245002910494804, 0.022641191259026527, -0.03451421111822128, -0.03684122860431671, 0.04600200429558754, 0.04635397344827652, 0.03634566813707352, -0.03375152871012688, -0.026902850717306137, 0.04436226561665535, -0.158514142036438, 0.013988814316689968, -0.014227563515305519, -0.07133695483207703, 0.10233157873153687, 0.04081730544567108, 0.09919893741607666, 0.009821288287639618, 0.059575457125902176, 0.02550569735467434, -0.005896307062357664, -0.026953646913170815, -0.01811656355857849, -0.014026684686541557, 0.06282584369182587, 0.04975995793938637, -0.0024742865934967995, -0.06811992079019547, 0.0016159340739250183, 0.04696024954319, -0.05863230302929878, 0.02816111035645008, -0.005683968309313059, 0.012719486840069294, 0.057697441428899765, 0.024852443486452103, 0.08090554177761078, -0.04467049613595009, -0.027775589376688004, -0.013536620885133743, 0.05803292989730835, 0.06832914799451828, 0.052552640438079834, -0.021618420258164406, 0.00167265220079571, -0.05409551411867142, 0.06583734601736069, 0.13801203668117523, -0.06560292840003967, 0.0540333017706871, -0.061298515647649765, -0.023435421288013458, 0.0552450455725193, 0.09789537638425827, -0.0608496367931366, -0.018088260665535927, 0.08535919338464737, 0.035169102251529694, 0.03229070454835892, -0.016307827085256577, 0.005514515098184347, 0.00414753844961524, -0.10353121161460876, 0.028331231325864792, 0.038682736456394196, 0.006782961543649435, -0.09877892583608627, 0.022993242368102074, -0.05081850290298462, 0.005877820309251547, -0.018913252279162407, 0.016730554401874542, 0.01977541670203209, -0.02395249344408512, -0.029195819050073624, -0.13211563229560852, 0.052299223840236664, -0.0013836091384291649, 0.018350152298808098, -0.061599887907505035, -0.05737823247909546, 0.013277524150907993, -0.06530364602804184, 0.01624986156821251, 0.020019102841615677, -0.012342563830316067, -0.032782331109046936, -0.015459434129297733, 0.03706931695342064, 0.03902459517121315, -0.06480305641889572, 0.14037226140499115, -0.034216322004795074, 0.04529616981744766, 0.04353080689907074, -0.050752319395542145, 0.05523613467812538, 0.050207603722810745, 0.042724691331386566, 0.006037865299731493, 0.004525014199316502, 0.01457457710057497, -0.04891624674201012, 0.012460743077099323, 0.027843330055475235, 0.01068970002233982, 0.037833333015441895, -0.036338143050670624, 0.019026117399334908, -0.02331540733575821, 0.04017956554889679, -0.045227158814668655, 0.016205551102757454, -0.02442515827715397, -0.009209126234054565, 0.0021392148919403553, -0.006956011056900024, 0.10131371021270752, 0.07355934381484985, -0.03023870848119259, 0.02766483835875988, -0.034428734332323074, -0.08088916540145874, -0.05452275648713112, -0.06909788399934769, 0.001573150628246367, 0.03774016723036766, 0.054706644266843796, -0.03988303244113922, 0.004751814994961023, -0.059708211570978165, 0.011360560543835163, 0.058354802429676056, 0.00250871479511261, 0.03825283423066139, 0.006847000680863857, -0.10886272042989731, 0.01231392566114664, -0.036332789808511734, -0.0037578409537672997, -0.005463268142193556, -0.033903270959854126, 0.06257600337266922, -0.026928378269076347, -0.028910541906952858, -0.002960704267024994, 0.009061346761882305, -0.0041024149395525455, -0.056285157799720764, -0.017547274008393288, 0.029358606785535812, 0.02423292212188244, 0.07628404349088669, 0.02268390730023384, -0.015472611412405968, 0.07576936483383179, -0.002758480841293931, 0.037569042295217514, -0.05159033462405205, 0.007907893508672714, -0.09182300418615341, -0.06407760828733444, -0.11798686534166336, 0.02046283893287182, 1.4382166035470995e-32, -0.006098078563809395, -0.0005462441476993263, -0.005701992195099592, -0.008820022456347942, 0.020968882367014885, -0.06003960594534874, 0.03925946727395058, -0.010911005549132824, 0.03476594388484955, 0.013943519443273544, 0.04978206008672714, 0.07267765700817108, -0.04908471554517746, -0.010170136578381062, 0.054542604833841324, -0.09209473431110382, -0.0424022376537323, 0.016942808404564857, 0.047697409987449646, 0.07126583158969879, -0.006378843914717436, 0.049267858266830444, 0.04756369814276695, -0.005008377134799957, -0.024163680151104927, 0.005162105895578861, -0.08717457205057144, -0.028605792671442032, -0.0021052551455795765, -0.025356357917189598, 0.029722530394792557, 0.04140738397836685, 0.011395489796996117, 0.16809101402759552, -0.029988152906298637, -0.05952376499772072, 0.07818837463855743, 0.0018430157797411084, -0.00930724572390318, 0.013098292984068394, -0.009306425228714943, 0.09519245475530624, -0.11023622006177902, 0.07415460050106049, 0.01400098204612732, -0.07474245131015778, 0.043984174728393555, 0.0020880638621747494, -0.002626650268211961, -0.08290673792362213, -0.043747782707214355, -0.05123268440365791, 0.0842776820063591, -0.01955374702811241, 0.05920406058430672, 0.1684253066778183, -0.00689323153346777, -0.015608738176524639, 0.023032063618302345, 0.001272206543944776, -0.010658353567123413, -0.06009995564818382, 0.02867239899933338, -0.012942635454237461, -0.014077724888920784, -0.06317682564258575, 0.039503272622823715, 0.04598182439804077, 0.029718253761529922, 0.03626066818833351, 0.08092255890369415, -0.014081364497542381, -0.13517449796199799, 0.0314667709171772, -0.05013466998934746, -0.06373514980077744, 0.012718831188976765, 0.002085904125124216, -0.044451650232076645, -0.018110135570168495, -0.07410138100385666, 0.001940013375133276, -0.07109160721302032, 0.01092439703643322, 0.05116889998316765, 0.018862608820199966, 0.011621055193245411, 0.016140321269631386, -0.07749287784099579, 0.022324301302433014, 0.015902619808912277, 0.08265551924705505, -0.025811608880758286, -0.050754670053720474, -0.027376508340239525, 3.6216792869738547e-32, 0.007496949750930071, -0.019132966175675392, -0.04414445906877518, 0.04989296570420265, 0.006927354261279106, -0.03255940601229668, -0.06938431411981583, -0.17849764227867126, -0.14492367208003998, -0.0924312025308609, -0.04789905250072479, 0.08547882735729218, -0.08119840919971466, -0.030352845788002014, -0.018759174272418022, 0.03262200206518173, -0.03878866136074066, -0.0003822309663519263, -0.04541075974702835, 0.00834723748266697, 0.007527925074100494, 0.023144938051700592, -0.030900925397872925, -0.03192833438515663, -0.042978350073099136, -0.008851278573274612, -0.017396604642271996, -0.007862008176743984, 0.0647767037153244, 0.01583588495850563, -0.05998492240905762, 0.038830410689115524, 0.08028256893157959, -0.030549868941307068, -0.05752788111567497, -0.0024122928734868765, 0.13635191321372986, 0.0020589877385646105, 0.01151393074542284, -0.003402148839086294, 0.03962956368923187, 0.006779207848012447, -0.07836566120386124, -0.025378739461302757, 0.14677967131137848, -0.023707188665866852, 0.02846277877688408, -0.07996153831481934, 0.02098884806036949, -0.06226186081767082, -0.0019722990691661835, -0.04189431294798851, 0.07513535767793655, 0.050702325999736786, -0.013867311179637909, -0.023869657889008522, -0.06280822306871414, -0.08954089134931564, 0.014969546347856522, -0.00568450428545475, 0.08150644600391388, 0.08069118857383728, -0.035902466624975204, -0.02795114926993847],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:check_if_airport_exists:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "check_if_airport_exists",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Check travel restrictions for a specific country",
    "embedding": [0.05784578248858452, -0.03992399573326111, -0.03408869728446007, -0.05232186242938042, 0.09741562604904175, -0.01938711479306221, 0.09477212280035019, -0.01057361625134945, -0.08482974022626877, 0.06823787093162537, 0.0061416542157530785, -0.02235817164182663, -0.025236360728740692, 0.043294891715049744, -0.024506527930498123, -0.0910910815000534, 0.009827462956309319, 0.06010518595576286, -0.0038259834982454777, -0.028006453067064285, 0.0563085563480854, 0.01778814196586609, -0.04470732808113098, 0.042883869260549545, -0.0023070017341524363, 0.14241968095302582, 0.026640037074685097, 0.01020144484937191, 0.021042782813310623, 0.04960384964942932, 0.005188634153455496, -0.0458102710545063, -0.08266697824001312, -0.03266306594014168, 0.08756199479103088, -0.03067505732178688, -0.03369436040520668, -0.015910493209958076, 0.020704831928014755, 0.05523466318845749, 0.08667220175266266, -0.052764784544706345, 0.050375599414110184, -0.03201950341463089, -0.011790310963988304, 0.023038677871227264, 0.10409445315599442, -0.01830870844423771, 0.007284860126674175, 0.024089081212878227, 0.03366835042834282, 0.011579141020774841, -0.0004959130892530084, -0.0784980058670044, 0.046653710305690765, -0.1554805487394333, -0.035331841558218, -0.029330801218748093, -0.0370829775929451, -0.041078001260757446, 0.001071056118234992, -0.03823886811733246, -0.01045939326286316, -0.004286077804863453, -0.02710472047328949, 0.09196088463068008, 0.023212211206555367, 0.026694996282458305, 0.04168882220983505, -0.030458809807896614, -0.04344077780842781, 0.07060220837593079, -0.05942334607243538, 0.06479749828577042, 0.026867611333727837, 0.0036249407567083836, -0.014220903627574444, 0.06956523656845093, 0.009102607145905495, -0.0413484200835228, -0.0027775494381785393, -0.00489112688228488, 0.02954881079494953, -0.05692756175994873, 0.023632582277059555, -0.04224595054984093, -0.01660342328250408, 0.04444224759936333, 0.012515313923358917, 0.001968149794265628, 0.017409367486834526, 0.009503615088760853, -0.013788877055048943, 0.08392713963985443, -0.057527605444192886, -0.025281887501478195, 0.02332894690334797, -0.0271582193672657, 0.01299028005450964, 0.04364198073744774, 0.0735541582107544, -0.0143164973706007, 0.01740787737071514, 0.05695857107639313, -0.03894314542412758, 0.06402163207530975, 0.03537917509675026, 0.04556736350059509, 0.029734304174780846, -0.006789668928831816, -0.01220625638961792, 0.07929833978414536, 0.03315519541501999, -0.03698427602648735, -0.05842451751232147, -0.054216232150793076, -0.006830212660133839, -0.006660474464297295, 0.018636470660567284, -0.013382020406425, 0.018131263554096222, -0.07289768755435944, 0.03218217194080353, -0.04198518395423889, 0.030501335859298706, 0.019220324233174324, 0.02162730135023594, -0.010067303664982319, 0.05347876995801926, -0.012154079042375088, 0.03137560933828354, 0.059934768825769424, -0.048491161316633224, 0.05005619302392006, -0.08296654373407364, -0.027417602017521858, -0.04899837449193001, 0.004886707756668329, -0.06327614933252335, -0.010715136304497719, 0.01074070855975151, -0.050444409251213074, 0.09768715500831604, -0.02168947644531727, 0.09206431359052658, -0.04780668392777443, -0.03327197581529617, 0.0940634161233902, 0.022887738421559334, -0.0931364968419075, 0.04345240071415901, -0.00583204859867692, 0.03306715562939644, -0.011470291763544083, -0.03405274450778961, -0.0381653793156147, 0.08353407680988312, 0.05464303493499756, -0.01899011805653572, 0.057213664054870605, 0.037167854607105255, -0.06337078660726547, 0.023468347266316414, 0.00951236579567194, -0.08509590476751328, 0.08058682829141617, -0.05139036104083061, -0.03238822892308235, -0.08590248227119446, -0.047684233635663986, -0.046836547553539276, 0.07844796031713486, -0.021022427827119827, 0.01666950434446335, -0.035893764346838, 0.01457372959703207, -0.028538046404719353, 0.09637956321239471, -0.10789517313241959, 0.011405913159251213, -0.030144929885864258, -0.13955816626548767, 0.016795175150036812, -0.003677031258121133, -0.03586125001311302, 0.03160135820508003, 0.05230818688869476, -0.09911713004112244, 0.08151781558990479, 0.03816184028983116, 0.003933342173695564, -0.01501914206892252, 0.052053000777959824, 0.04338731989264488, 0.03939766064286232, 0.0052061122842133045, -0.04973969608545303, -0.0036654381547123194, 0.012854394502937794, -0.01050152163952589, 0.034558989107608795, 0.045939598232507706, -0.04866920784115791, 0.04013650119304657, -0.012174044735729694, 0.024026719853281975, -0.00861565675586462, -0.07839342951774597, -0.05233549699187279, 0.07641973346471786, 0.06440497189760208, 0.03950762376189232, 0.04160456731915474, -0.08241090178489685, -0.0494510717689991, 0.02802307903766632, 0.06283237785100937, -0.05883375182747841, -0.02109668031334877, -0.024312829598784447, -0.05842427536845207, -0.0549033060669899, -0.05380989983677864, 7.165327201825012e-33, -0.017586011439561844, -0.039749544113874435, 0.04256058111786842, -0.04938725009560585, 0.09959243983030319, -0.05200323835015297, 0.07112157344818115, -0.004836937878280878, 0.07796057313680649, 0.0015349669847637415, 0.023830674588680267, -0.0637659877538681, 0.10575778782367706, 0.01834181882441044, -0.026233607903122902, -0.012434723787009716, -0.05202241241931915, -0.04228075593709946, -0.03143247961997986, 0.08400809019804001, -0.05402205139398575, -0.025741007179021835, -0.061212681233882904, -0.04157077893614769, -0.006084899418056011, 0.012005974538624287, -0.06830836087465286, -0.06472080945968628, -0.04100818186998367, 0.0035658450797200203, 0.03817267343401909, 0.05633412301540375, -0.07840914279222488, 0.08459144085645676, -0.060401301831007004, -0.0993296355009079, -0.02690238133072853, 0.11646654456853867, 0.06210068613290787, 0.11840201169252396, 0.02975018508732319, 0.05039649456739426, 0.04571911320090294, 0.10150257498025894, -0.027892066165804863, 0.05375724285840988, 0.07932168245315552, 0.036249056458473206, -0.00014408054994419217, -0.0853177160024643, 0.044207800179719925, 0.011130859144032001, 0.10341773927211761, 0.0418611541390419, 0.010284272953867912, 0.021820124238729477, -0.01490959245711565, -0.0929298996925354, 0.028923535719513893, -0.051255010068416595, -0.10138209164142609, -0.07877790927886963, -0.02199925296008587, -0.08663815259933472, -0.02808462828397751, 0.04499916732311249, 0.0467037707567215, -0.033645935356616974, 0.08027853071689606, -0.01932354085147381, 0.04692016541957855, -0.03723486512899399, -0.09222553670406342, 0.056135233491659164, 0.04123863950371742, 0.05154535174369812, 0.08986252546310425, 0.0730087012052536, -0.04376634582877159, 0.04411405697464943, 0.024415627121925354, 0.04862485080957413, -0.09360268712043762, 0.006239868234843016, 0.002833669539541006, 0.03849248215556145, -0.037933599203825, -0.013514302670955658, 0.05623472481966019, -0.00718055572360754, -0.13874930143356323, 0.015144160948693752, -0.009914982132613659, -0.025661209598183632, 0.011264449916779995, 4.6353235675196646e-33, 0.023270057514309883, 0.003976397216320038, -0.02706625871360302, 0.0642586424946785, -0.015963928773999214, 0.024306638166308403, -0.017365535721182823, -0.06483614444732666, -0.05674782767891884, 0.010653482750058174, -0.026587441563606262, 0.03404827043414116, -0.04398663714528084, -0.004280402325093746, -0.01596083864569664, 0.03475329279899597, 0.04147578775882721, 0.01752275601029396, -0.019213343039155006, -0.005779571831226349, -0.01133112795650959, 0.03265753388404846, -0.02763850800693035, 0.03700501099228859, 0.04519648477435112, -0.004149997606873512, -0.07497991621494293, -0.005335167050361633, 0.0042806765995919704, -0.047663986682891846, -0.036341141909360886, -0.019836289808154106, -0.03448282927274704, -0.0702754408121109, -0.003286331659182906, -0.09474857896566391, -0.08992655575275421, -0.038925718516111374, -0.08864154666662216, 0.03360757976770401, 0.05078296735882759, 0.06308528035879135, 0.10058245062828064, 0.015608071349561214, 0.035373639315366745, -0.10493376106023788, 0.041823580861091614, -0.016949977725744247, -0.028508419170975685, 0.03246498107910156, -0.008683049120008945, 0.028923971578478813, 0.09577161073684692, 0.06805367767810822, -0.02760128118097782, 0.039126258343458176, 0.056889984756708145, -0.07778144627809525, -0.047045107930898666, -0.025015272200107574, -0.02994895726442337, 0.0023506642319262028, -0.04007105529308319, 0.01384207047522068],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:check_travel_restrictions:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "check_travel_restrictions",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Create a packing checklist.",
    "embedding": [-0.000988502288237214, -0.007106590550392866, -0.012291481718420982, -0.006053267512470484, 0.051758456975221634, 0.009433601051568985, -0.00335166254080832, 0.04129369929432869, -0.08263348042964935, -0.04434908181428909, -0.03621142357587814, -0.06170763075351715, 0.007265591993927956, -0.01519001554697752, 0.02337067574262619, -0.07427823543548584, -0.0018134891288354993, -0.04563919082283974, 0.003501689760014415, -0.08746987581253052, 0.04769125580787659, -0.05931586027145386, 0.03694775328040123, -0.07242324203252792, 0.04788580909371376, 0.03949185088276863, 0.0245542973279953, -0.017814651131629944, 0.005401324946433306, -0.023285014554858208, -0.020878981798887253, 0.00836192350834608, 0.05677352845668793, -0.0033490080386400223, -0.011483593843877316, 0.04691162332892418, 0.07912207394838333, 0.03868147358298302, -0.006174959242343903, -0.051740359514951706, 0.010516076348721981, 0.036655180156230927, 0.06683187931776047, 0.005001867190003395, -0.03325923904776573, -0.054673317819833755, 0.057775869965553284, 0.055850349366664886, 0.052355483174324036, 0.034160763025283813, 0.020149264484643936, -0.0039644683711230755, -0.08352891355752945, -0.03228607401251793, -0.029844220727682114, -0.0886576846241951, 0.044480301439762115, -0.05373971164226532, -0.047712620347738266, -0.01387941837310791, 0.011978262104094028, -0.06715317815542221, 0.011641777120530605, 0.06024128571152687, 0.057402629405260086, 0.06635119020938873, -0.02968166209757328, 0.030292566865682602, -0.028060829266905785, 0.028137920424342155, -0.023992180824279785, 0.06368598341941833, -0.05870911106467247, 0.0882742777466774, 0.028715798631310463, 0.01296087447553873, 0.04735029861330986, 0.023272089660167694, -0.042768318206071854, 0.0646129921078682, -0.16631831228733063, 0.02746201492846012, 0.012288049794733524, 0.005135794170200825, -0.006385143846273422, -0.04372817277908325, 0.014845923520624638, 0.031805623322725296, -0.01783735491335392, -0.02086128666996956, 0.0569150447845459, 0.006374997552484274, 0.04767625778913498, -0.01001171488314867, -0.06765663623809814, 0.058400411158800125, -0.03126499801874161, -0.07027057558298111, -0.03063753992319107, 0.08623456209897995, 0.003787256544455886, -0.05541681870818138, 0.060019973665475845, -0.0016640882240608335, -0.07342134416103363, -0.0002814527542795986, 0.01529359444975853, -0.04267824441194534, 0.015337699092924595, 0.013925311155617237, -0.021351691335439682, 0.08413489907979965, 0.0052765849977731705, 0.003808534238487482, -0.05114717409014702, 0.03405855596065521, 0.013105743564665318, 0.0983380600810051, 0.025109106674790382, 0.04951845481991768, 0.0346086360514164, -0.0016105098184198141, 0.052432771772146225, -0.01826367899775505, -0.008170543238520622, -0.043580561876297, -0.008359276689589024, -0.05668303370475769, 0.02494485303759575, 0.004694355186074972, -0.07367014139890671, 0.09810137748718262, 0.07242843508720398, -0.09374404698610306, -0.025397703051567078, 0.02018227055668831, 0.020969776436686516, 0.041925787925720215, 0.03538331761956215, 0.0055802613496780396, -0.001031846390105784, 0.03826833888888359, 0.03652200475335121, -0.04804054647684097, 0.06988631933927536, 0.045705486088991165, 0.020976288244128227, -0.020311778411269188, -0.017190752550959587, -0.12787632644176483, 0.00037002211320213974, -0.09130901843309402, 0.07045479118824005, 0.013008413836359978, -0.04817105829715729, 0.05320969223976135, 0.14162765443325043, -0.02512727491557598, 0.028483815491199493, 0.02801627665758133, 0.09969159215688705, 0.04722360149025917, -0.035881929099559784, 0.03555125743150711, -0.07937630265951157, 0.013912665657699108, 0.03630343824625015, -0.008257701992988586, 0.007816373370587826, -0.04608296975493431, 0.1005149781703949, 0.04574940726161003, 0.017919398844242096, 0.08758018165826797, -0.026508307084441185, 0.04451766237616539, -0.0027371353935450315, 0.07327815145254135, -0.04303408041596413, -0.029271123930811882, -0.026269182562828064, -0.050137877464294434, -0.11454225331544876, -0.06335482001304626, 0.09915345162153244, -0.1208181083202362, 0.0039355698972940445, -0.10678920149803162, 0.09438375383615494, 0.047513507306575775, -0.011858190409839153, 0.0912918895483017, 0.033357176929712296, 0.025440586730837822, 0.012666561640799046, -0.028855077922344208, 0.06014999374747276, 0.00878963340073824, -0.041891150176525116, 0.052855852991342545, -0.04814057797193527, -0.0001911383296828717, -0.038509394973516464, -0.059508759528398514, -0.011556976474821568, 0.02830253355205059, 0.0008195785339921713, -0.10896331071853638, 0.020058777183294296, -0.01931115984916687, -0.017480507493019104, 0.021518858149647713, 0.028912318870425224, -0.07014194130897522, 0.04648217558860779, 0.033318206667900085, 0.03862185403704643, -0.007621238008141518, -0.048935793340206146, -0.07861077785491943, 0.06523584574460983, -0.11905992031097412, -0.055737052112817764, 8.109684098445113e-33, 0.06017202138900757, 0.022068405523896217, 0.05427129566669464, -0.012904524803161621, 0.10748761147260666, -0.04765484482049942, 0.03137547895312309, -0.03898252919316292, 0.06451398879289627, 0.04178156703710556, -0.1039198637008667, 0.024988412857055664, 0.041013143956661224, 0.011149035766720772, -0.03449603542685509, -0.025381581857800484, -0.05752111226320267, -0.005817749537527561, 0.06213386729359627, -0.008906282484531403, -0.01703694649040699, 0.013667386956512928, -0.010119075886905193, 0.13470987975597382, -0.05119862034916878, 0.02255982719361782, -0.03248246759176254, -0.0562623105943203, 0.03652355819940567, 0.02461565099656582, -0.017489949241280556, -0.09621314704418182, -0.05394899845123291, 0.005401593632996082, 0.053950078785419464, -0.10381608456373215, 0.10874351114034653, 0.03054210916161537, 0.05836896970868111, -0.01080967579036951, -0.010820996016263962, -0.04798893630504608, -0.07685006409883499, 0.11533154547214508, -0.023408913984894753, -0.09151498973369598, 0.06544893234968185, -0.0008716906886547804, -0.026884775608778, -0.054988790303468704, -0.05866236239671707, 0.06604426354169846, -0.02598138526082039, -0.05740775913000107, -0.0343833826482296, 0.09380737692117691, -0.07354992628097534, -0.009669072926044464, 0.0609014518558979, -0.020615171641111374, -0.03535452485084534, 0.0188063383102417, 0.033136095851659775, -0.01762513630092144, 0.023400064557790756, -0.06737726926803589, -0.0027616226579993963, -0.03717725723981857, 0.001217433949932456, -0.009497814811766148, -0.06256204843521118, -0.010722284205257893, -0.026010597124695778, 0.018169475719332695, -0.04705718904733658, -0.016133254393935204, -0.02048671990633011, -0.017075376585125923, 0.04292992502450943, 0.053531747311353683, 0.0014659954467788339, -0.06089116632938385, 0.04566415771842003, 0.04971536993980408, 0.03355665132403374, 0.012962081469595432, 0.012061310932040215, 0.012607809156179428, 0.018790628761053085, 0.04270647093653679, -0.011964144185185432, -0.0552418977022171, 0.13511666655540466, -0.04192225635051727, 0.02875957451760769, 1.7497076189620327e-32, -0.03806612640619278, -0.02607845701277256, 0.03273269534111023, 0.03620848432183266, -0.02242477983236313, -0.020520806312561035, 0.09479639679193497, 0.001676224754191935, -0.047644831240177155, -0.03764567896723747, -0.002663158345967531, 0.01025178749114275, -0.062349557876586914, 0.05422762408852577, -0.04327739030122757, 0.020024467259645462, 0.014229870401322842, 0.06741359829902649, -0.09305770695209503, -0.05697961151599884, 0.0066637457348406315, 0.07710076868534088, 0.02834751084446907, 0.04682476073503494, 0.04107102379202843, -0.033381976187229156, -0.12317774444818497, -0.05701829865574837, 0.055421218276023865, -0.007059043273329735, 0.02243933081626892, 0.039061639457941055, 0.056188810616731644, -0.04770534858107567, 0.05191123113036156, -0.06096068397164345, -0.06980343163013458, 0.05301308259367943, -0.03826824948191643, -0.028414538130164146, -0.06070218235254288, -0.019306303933262825, 0.012481189332902431, 0.03847622871398926, -0.006198238115757704, 0.018118666484951973, -0.044739753007888794, -0.024238213896751404, -0.08786540478467941, 0.01636284589767456, -0.014253027737140656, -0.019293269142508507, 0.046450987458229065, 0.05874873325228691, -0.002227573888376355, 0.08806806057691574, -0.0661744475364685, 0.00873938761651516, 0.032687000930309296, -0.11346489191055298, -0.12058719247579575, 0.010499771684408188, 0.0036640302278101444, 0.08195571601390839],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:create_packing_checklist:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "create_packing_checklist",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Create a travel itinerary based on a list of destinations and duration",
    "embedding": [0.048420343548059464, -0.03349412977695465, -0.05183115229010582, -0.02027289941906929, 0.004903257824480534, -0.015270700678229332, 0.0425463505089283, -0.03254840150475502, -0.1140349879860878, -0.05000566318631172, 0.02303026057779789, -0.029411256313323975, -0.0755796954035759, 0.08163444697856903, -0.0010055984603241086, -0.07822137326002121, 0.015037167817354202, 0.05353962630033493, 0.022579075768589973, 0.028756141662597656, 0.055793486535549164, 0.04479304701089859, -0.0649070218205452, 0.019290316849946976, 0.03779588267207146, 0.12280852347612381, 0.017049361020326614, 0.03706184774637222, -0.036687929183244705, 0.07214869558811188, -0.05506520718336105, 0.043333981186151505, 0.01201677042990923, 0.03624330088496208, 0.02650715410709381, 0.030393021181225777, -0.021776044741272926, 0.0068817175924777985, -0.01184266060590744, 0.009235873818397522, 0.03732328861951828, -0.02548697218298912, 0.06973863393068314, -0.02614300325512886, -0.035539157688617706, -0.10537321120500565, 0.016297372058033943, -0.028070302680134773, 0.02078067511320114, 0.030771592631936073, -0.022793211042881012, -0.056978773325681686, -0.009400760754942894, -0.05798929184675217, -0.007469686213880777, 0.004538035951554775, -0.07302059233188629, -0.08145567774772644, 0.015016552060842514, -0.05519462749361992, -0.024984363466501236, -0.08433423936367035, 0.037822332233190536, 0.033031344413757324, -0.003917901311069727, 0.055301930755376816, -0.0036767867859452963, 0.051555536687374115, 0.021451711654663086, -0.03765407204627991, -0.10868767648935318, 0.02943033166229725, -0.06549838930368423, 0.03163981810212135, 0.03533301129937172, -0.06325067579746246, 0.010854526422917843, 0.047810863703489304, 0.0012215524911880493, -0.01471881102770567, 0.028848988935351372, -0.03749611973762512, -0.005770441144704819, 0.032007187604904175, 0.0861639603972435, -0.06082917004823685, -0.05431148782372475, -0.046499259769916534, -0.00036288160481490195, 0.034430425614118576, 0.04035215824842453, -0.01723049208521843, -0.006970226764678955, 0.013955025002360344, -0.04994627833366394, 0.01173944678157568, -0.02490643598139286, -0.01668507233262062, 0.049322500824928284, -0.00021644314983859658, 0.06493156403303146, 0.018383439630270004, -0.045962024480104446, -0.01486162655055523, -0.05713653564453125, 0.011518347077071667, -0.014370365999639034, -0.052912790328264236, 0.04762812331318855, -0.000572794524487108, -0.0156533382833004, 0.08076517283916473, 0.019443044438958168, -0.06797231733798981, 0.03890177235007286, -0.00811187457293272, -0.0073957559652626514, 0.05544225871562958, 0.0513516329228878, 0.04464368894696236, 0.003791525261476636, -0.10570256412029266, 0.027135049924254417, 0.017772728577256203, -0.12325899302959442, -0.0560491569340229, 0.07758650928735733, 0.0006466534687206149, -0.07308099418878555, -0.028674114495515823, 0.03361469879746437, 0.06764812022447586, 0.01016856636852026, 0.044178396463394165, -0.1172691285610199, 0.01149889174848795, -0.007213015574961901, -0.07817225903272629, 0.011725902557373047, -0.008948829025030136, 0.05614222586154938, 0.014413443394005299, 0.06439715623855591, -0.07601720839738846, 0.07529298216104507, 0.045392535626888275, 0.030216842889785767, -0.060108449310064316, 0.007374722044914961, -0.007186186965554953, 0.0010537656489759684, -0.0916447713971138, 0.049141816794872284, -0.014367545023560524, -0.04548792913556099, 0.013833881355822086, 0.03450433909893036, -0.02106325328350067, 0.03320466727018356, 0.07627928256988525, -0.026490936055779457, -0.04615287855267525, 0.07300127297639847, 0.056770019233226776, -0.01742352545261383, 0.10539767146110535, 0.03278803080320358, 0.0030834858771413565, -0.06915159523487091, -0.07516525685787201, -0.007690681144595146, 0.02734033763408661, -0.02731446363031864, -0.004348187241703272, 0.02779660001397133, 0.05669557675719261, -0.04642659053206444, 0.08492378890514374, -0.0217435359954834, -0.004951385781168938, 0.07623807340860367, -0.0691017135977745, 0.014848429709672928, 0.004381805658340454, 0.0289134681224823, -0.06564436852931976, 0.028639700263738632, -0.06022388115525246, 0.0836508646607399, 0.07291268557310104, -0.0003146305098198354, -0.038074567914009094, 0.08086274564266205, 0.02232670970261097, 0.054920267313718796, -0.04763468727469444, 0.03528149798512459, 0.09297066926956177, 0.06132599338889122, -0.05659845843911171, 0.0023753319401293993, -0.012700813822448254, 0.01973387785255909, -0.0026229482609778643, 0.043143536895513535, 0.01799766533076763, -0.08164575695991516, -0.03822724148631096, 0.025983113795518875, 0.041845183819532394, 0.04826343432068825, 0.01712501049041748, 0.03250183165073395, -0.007772563956677914, 0.02279812842607498, -0.07075480371713638, -0.02818073332309723, -0.013617590069770813, -0.023179007694125175, 0.002063776832073927, 0.007199474144726992, 0.037606991827487946, -0.04782657325267792, -1.4375178961334555e-34, 0.04763592779636383, 0.024622667580842972, 0.030574379488825798, -0.016477014869451523, 0.09037475287914276, -0.07115794718265533, -0.029015641659498215, 0.020693926140666008, 0.028930334374308586, 0.04095908999443054, -0.0896865501999855, -0.07206634432077408, 0.048603955656290054, 0.0006132214912213385, -0.017806662246584892, -0.0008493096684105694, 0.10793698579072952, -0.02060980536043644, -0.0027568943332880735, 0.08584734052419662, -0.04720984399318695, 0.00992742832750082, -0.16946938633918762, -0.12277978658676147, 0.04773643612861633, 0.05708424001932144, 0.02800789289176464, -0.03252393752336502, 0.001537076197564602, 0.05800894275307655, 0.041339050978422165, -0.056604430079460144, -0.028507987037301064, -0.009400210343301296, -0.08788375556468964, 0.02243877947330475, 0.034647371619939804, 0.020521854981780052, -0.003615918103605509, 0.10444775223731995, 0.08145935088396072, -0.030011244118213654, -0.0164030808955431, 0.03443614020943642, 0.10022136569023132, 0.028712425380945206, 0.05271391198039055, 0.02101093716919422, 0.06375186145305634, -0.04669161140918732, 0.052944350987672806, 0.09334384649991989, -0.08700931817293167, 0.06710115075111389, -0.011814204975962639, -0.05598513409495354, -0.04674161970615387, -0.10563316941261292, 0.036382824182510376, -0.01257429551333189, -0.07777372747659683, -0.05906737223267555, 0.09565314650535583, 0.00048248274833895266, -0.006705759093165398, 0.003873425768688321, -0.01772560179233551, -0.0865006297826767, -0.0934833437204361, -0.06366465240716934, 0.0009025070467032492, 0.0379059873521328, -0.02727809175848961, 0.052555572241544724, -0.04083159565925598, -0.07617887109518051, 0.03887036070227623, 0.0841255784034729, -0.07233359664678574, 0.1158529669046402, -0.10981708019971848, 0.01828504540026188, -0.030386319383978844, 0.05374113842844963, 0.015776649117469788, 0.09795777499675751, -0.01522737555205822, 0.006640009116381407, -0.02492544986307621, 0.07505796104669571, -0.02170807681977749, 0.010634624399244785, 0.003249586094170809, -0.00934214610606432, -0.04198819398880005, 1.4955143124364057e-32, -0.06361851096153259, -0.025785833597183228, -0.0950532928109169, 0.044470448046922684, 0.016824420541524887, 0.023092614486813545, 0.06283899396657944, -0.04207492992281914, 0.006821586284786463, -0.023466022685170174, 0.0019526530522853136, 0.027763059362769127, -0.03386857733130455, 0.08707340061664581, -0.02338278479874134, 0.026132751256227493, -0.039303068071603775, -0.010149640031158924, 0.015205093659460545, 0.0001942932140082121, 0.0411713682115078, 0.018093954771757126, -0.08014313131570816, -0.030239645391702652, 0.035637710243463516, -0.09248104691505432, -0.10317136347293854, -0.032251402735710144, 0.05339577794075012, -0.008723306469619274, -0.09795558452606201, 0.044963445514440536, -0.022897612303495407, 0.006261299829930067, -0.03250931575894356, -0.08630065619945526, -0.03215007856488228, -0.030755087733268738, 0.02593882940709591, 0.02564249373972416, -0.0021958788856863976, 0.09310708194971085, 0.011338853277266026, 0.050530269742012024, 0.0880911722779274, -0.06563875079154968, 0.054955706000328064, 0.004788311664015055, -0.06835470348596573, -0.011959937401115894, -0.06140327826142311, -0.0821865126490593, 0.13346511125564575, 0.01703067310154438, 0.025899779051542282, 0.017075296491384506, -0.023019950836896896, 0.028717176988720894, 0.023787857964634895, -0.10462146997451782, -0.013641332276165485, -0.002164995763450861, -0.03352067992091179, 0.026178378611803055],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:create_travel_itinerary:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "create_travel_itinerary",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find car rental services in a specific location",
    "embedding": [0.0154121657833457, -0.004620620049536228, -0.01721358299255371, 0.0470796599984169, 0.00031726007000543177, 0.05476567894220352, -0.014180204831063747, 0.0566147044301033, 0.031085727736353874, -0.022622084245085716, 0.0852498933672905, -0.04327453300356865, -0.01006828062236309, 0.06565871089696884, 0.02614380605518818, -0.1017647311091423, 0.1269608438014984, 0.046641428023576736, 0.04171149805188179, -0.08416862785816193, 0.028575338423252106, 0.003333017462864518, -0.04107341542840004, 0.018736660480499268, 0.03054868057370186, 0.037054646760225296, 0.007074445020407438, 0.07999090850353241, -0.03808113560080528, 0.04346787929534912, -0.009727075695991516, -0.0072113145142793655, 0.008256712928414345, -0.011096467263996601, 0.07047045975923538, 0.01687222346663475, -0.06380712240934372, 0.04194708541035652, 0.069059818983078, -0.0005862514371983707, 0.027497224509716034, -0.016092777252197266, -0.05596371740102768, 0.06895916908979416, -0.05004211887717247, 0.005586754065006971, 0.09348063170909882, 0.09807086735963821, 0.06522344797849655, -0.1248529925942421, -0.021730290725827217, -0.00989441480487585, -0.006403573323041201, 0.02124595269560814, -0.018036747351288795, 0.012614766135811806, -0.0027600503526628017, -0.04283292591571808, -0.10345913469791412, -0.0014002787647768855, 0.06417778879404068, -0.030145326629281044, -0.039171669632196426, -0.024969877675175667, 0.017522921785712242, 0.005150352604687214, 0.009403474628925323, 0.006909139920026064, -0.10091039538383484, -0.06435630470514297, -0.0212237685918808, 0.05575104057788849, -0.09662171453237534, 0.052014097571372986, -0.04333152621984482, 0.05202161520719528, 0.03631547838449478, 0.034746747463941574, 0.0017301676562055945, -0.10619424283504486, 0.026634719222784042, -0.05400163680315018, 0.0039924210868775845, -0.008181382901966572, 0.04305531457066536, 0.021983148530125618, -0.016182558611035347, -0.04279406741261482, 0.001559355529025197, 0.015680452808737755, -0.06474772095680237, 0.08363752067089081, -0.07768478244543076, -0.0807291641831398, -0.055635906755924225, 0.03368831053376198, -0.04493557661771774, 0.010856312699615955, 0.03736858442425728, 0.036933545023202896, 0.06487156450748444, 0.02005608193576336, 0.050811756402254105, -0.014980281703174114, -0.026570115238428116, 0.0769018903374672, -0.0006056452402845025, -0.04057656228542328, 0.04981330782175064, 0.009566127322614193, 0.005909929517656565, 0.027727967128157616, -0.008999430574476719, -0.0407843254506588, 0.013739999383687973, -0.0763014480471611, 0.004638360347598791, 0.055791471153497696, 0.03217999264597893, 0.06322668492794037, -0.0559798926115036, -0.037649668753147125, -0.0010767726926133037, -0.001112635130994022, -0.05422944575548172, -0.01655523106455803, -0.0042801424860954285, -0.07563077658414841, 0.014890644699335098, -0.049419816583395004, -0.0435500405728817, 0.0735163539648056, 0.0005144691094756126, 0.01841173879802227, -0.041474971920251846, 0.05140260234475136, -0.0067176115699112415, 0.017550596967339516, -0.036269333213567734, 0.04542326182126999, 0.05281383916735649, -0.09253635257482529, 0.04178541898727417, 0.023176977410912514, 0.034790586680173874, -0.016668815165758133, -0.07189442962408066, -0.005519368685781956, -0.05648777261376381, -0.007767022587358952, 0.05489929020404816, -0.055931348353624344, 0.02730373479425907, -0.058106180280447006, -0.004043840803205967, -0.04793991893529892, 0.07065475732088089, -0.020364057272672653, 0.025387926027178764, 0.05322969704866409, -0.009733621031045914, 0.04496563598513603, 0.13438379764556885, 0.06069356948137283, -0.045848626643419266, 0.015108946710824966, -0.0016237470554187894, -0.09155303984880447, -0.04680197313427925, 0.09531541168689728, -0.032921258360147476, 0.012958892621099949, 0.043006353080272675, 0.09431209415197372, -0.05955781415104866, 0.00753432884812355, -0.06836854666471481, 0.05770844966173172, -1.7061398693840601e-06, 0.025316553190350533, -0.15842919051647186, -6.88553845975548e-05, -0.014810111373662949, 0.1092587560415268, -0.0016839482123032212, 0.008856602013111115, 0.05735594406723976, -0.07751110196113586, 0.06511449813842773, 0.010186033323407173, 0.05213300511240959, -0.09713589400053024, 0.12258230894804001, -0.0897764042019844, -0.09484925866127014, 0.012353833764791489, -0.05816565081477165, 0.04426358640193939, 0.06706911325454712, -0.0029744021594524384, 0.10052979737520218, -0.004962467588484287, 0.002015134086832404, -0.08031769096851349, -0.10305323451757431, 0.05070904269814491, -0.00711442856118083, -0.05018599331378937, -0.007607367355376482, -0.031119469553232193, 0.05196419358253479, 0.025410054251551628, 0.08565351366996765, 0.02047955058515072, 0.04154558852314949, -0.056781280785799026, -0.005848458968102932, -0.004984934814274311, -0.05709455907344818, -0.0083598792552948, -0.09014740586280823, -0.04197763279080391, -0.03998846933245659, 4.102640220920883e-33, 0.007661753334105015, -0.09276358038187027, 0.049710847437381744, -0.04486123099923134, 0.008548914454877377, -0.003908470273017883, 0.022613773122429848, -0.11309247463941574, 0.029457636177539825, 0.0829073116183281, -0.036004237830638885, 0.04694318771362305, 0.11468837410211563, 0.057093340903520584, 0.04222308471798897, 0.015588179230690002, -0.020433392375707626, -0.018165308982133865, -0.004397835116833448, 0.12657871842384338, -0.0580948069691658, 0.021619468927383423, -0.006591621786355972, 0.09175468236207962, 0.062292519956827164, 0.06242648884654045, -0.06511859595775604, -0.0206126905977726, 0.007902572862803936, 0.0058229113928973675, -0.09076474606990814, -0.08891357481479645, 0.02601063810288906, 0.024746187031269073, -0.05806439369916916, -0.004903084132820368, 0.06852540373802185, -0.005412943195551634, -0.011988655664026737, 0.009902541525661945, 0.019440259784460068, -0.08592088520526886, 0.019755732268095016, 0.02405078150331974, -0.005809685215353966, -0.00957645382732153, 0.023590702563524246, -0.0413181334733963, -0.007492517586797476, -0.017971472814679146, 0.05382564663887024, -0.05987299233675003, -0.041325680911540985, 0.05124102532863617, 0.02497488632798195, 0.07564505189657211, 0.0009999024914577603, 0.04560930281877518, -0.009519835002720356, 0.006393558345735073, 0.015051397494971752, 0.05395516753196716, 0.04160194844007492, -0.018754761666059494, -0.03146916627883911, -0.04710821434855461, 0.013388080522418022, -0.004011453129351139, -0.015956105664372444, -0.08668641746044159, -0.019653188064694405, 0.008399099111557007, -0.0018201724160462618, -0.006763786543160677, -0.006870335433632135, 0.02812054008245468, 0.08344858139753342, 0.037548236548900604, -0.012555276975035667, -0.03932565078139305, -0.02311643771827221, 0.057706356048583984, -0.0353405699133873, 0.008573407307267189, -0.07969178259372711, 0.0006707531283609569, 0.027575163170695305, 0.018214676529169083, 0.04966149851679802, -0.01515868864953518, -0.030400484800338745, 0.04974806681275368, 0.025438982993364334, -0.012065763585269451, -0.03315053507685661, 1.5206062679122644e-32, -0.06952988356351852, -0.02145875059068203, -0.030340304598212242, 0.04402569308876991, 0.026952244341373444, -0.015281135216355324, -0.00905927550047636, 0.0958210825920105, -0.05504007264971733, 0.04576293006539345, -0.057131536304950714, -0.04871666058897972, 0.021944880485534668, -0.07565158605575562, -0.10114476829767227, -0.013122349977493286, 0.024429183453321457, -0.04420044273138046, -0.005380331072956324, 0.06810391694307327, 0.007901189848780632, 0.07147550582885742, 0.07304861396551132, 0.032329775393009186, 0.02387126535177231, -0.059733953326940536, -0.024661289528012276, 0.004122155252844095, 0.11711395531892776, -0.03657527640461922, -0.06289813667535782, -0.0728151872754097, 0.02272123657166958, -0.0629383847117424, -0.0041518802754580975, -0.06442625820636749, 0.012842933647334576, 0.08199019730091095, 0.015058240853250027, 0.0025283140130341053, 0.07491093873977661, -0.004799673333764076, -0.0031034909188747406, 0.011767485179007053, -0.03619394823908806, -0.026849903166294098, 0.020908014848828316, -0.043188948184251785, 0.12070785462856293, -0.010682403109967709, -0.07751622796058655, -0.04373288154602051, 0.0097391027957201, 0.11345086246728897, -0.04239439591765404, -0.05728751793503761, -0.07467532157897949, -0.10193104296922684, -0.03314610943198204, 0.021316252648830414, -0.05963927134871483, 0.08269311487674713, -0.0496211014688015, -0.02321893349289894],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:find_car_rental_services:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "find_car_rental_services",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find hotels in a specific location",
    "embedding": [0.09909860789775848, 0.02094821259379387, -0.0312817320227623, 0.035294823348522186, 0.019641436636447906, 0.004589013289660215, 0.01579851284623146, -0.05960576981306076, 0.01148549560457468, -0.02455206960439682, 0.040652304887771606, -0.05484356731176376, 0.049488380551338196, 0.0375974141061306, 0.05767877399921417, -0.047697875648736954, 0.053481485694646835, 0.07608698308467865, 0.06712301820516586, -0.031208785250782967, 0.030304037034511566, 0.04111260175704956, -0.030613187700510025, 0.035791486501693726, 0.07355279475450516, -0.012804142199456692, 0.009953043423593044, 0.007586856372654438, -0.047088220715522766, 0.00592051912099123, -0.011788138188421726, 0.07667041569948196, -0.019887974485754967, -0.03025316260755062, 0.14415477216243744, 0.04635963961482048, -0.05031717196106911, -0.037277817726135254, 0.07596806436777115, 0.05027234926819801, 0.08807066828012466, 0.01378548052161932, 0.09389401972293854, 0.011931569315493107, -0.01668887957930565, -0.03557954728603363, 0.0561365969479084, 0.039407115429639816, 0.056281570345163345, 0.016634058207273483, -0.023471418768167496, 0.02453404664993286, -0.04602422937750816, 0.004724752623587847, 0.03294145315885544, 0.04818118363618851, -0.01612803153693676, -0.11217477172613144, -0.026515915989875793, 0.025952966883778572, 0.045113641768693924, -0.0021622772328555584, 0.05826042592525482, -0.052404843270778656, 0.035807784646749496, 0.029022114351391792, -0.06688957661390305, 0.012881113216280937, -0.04258096590638161, -0.051283594220876694, -0.031283583492040634, 0.049568530172109604, -0.01450955867767334, -0.007109907455742359, 0.026307130232453346, -0.014134841039776802, -0.015804581344127655, 0.0664292573928833, 0.010971760377287865, 0.00045528102782554924, -0.0044774990528821945, -0.06989738345146179, 0.00622192956507206, -0.006015701685100794, 0.014263960532844067, 0.018091319128870964, -0.03682353347539902, -0.059342727065086365, 0.05889218673110008, 0.039224062114953995, -0.008992331102490425, 0.04102287068963051, -0.11953704059123993, -0.04817964509129524, -0.008664076216518879, -0.01227301824837923, -0.08014659583568573, 0.0726320818066597, 0.07361403852701187, 0.06366429477930069, 0.05892593413591385, 0.0815962478518486, 0.01606718637049198, 0.03265036642551422, -0.03612080216407776, 0.04217654466629028, -0.0349825881421566, -0.06316907703876495, 0.07505728304386139, 0.05512416362762451, -0.08135904371738434, 0.052623823285102844, 0.03735925629734993, -0.006670151837170124, 0.030129985883831978, -0.07300844043493271, 0.05440988764166832, 0.09538520872592926, 0.011537615209817886, 0.06803213059902191, -0.008079292252659798, -0.017745491117239, 0.04530941694974899, 0.06806880235671997, -0.0930013507604599, -0.04349951073527336, -0.006705635692924261, -0.06300309300422668, 0.014744184911251068, -0.0008093023207038641, 0.016607733443379402, 0.08136067539453506, 0.021507421508431435, 0.054888397455215454, -0.08060809224843979, 0.026745937764644623, -0.0016208543675020337, -0.02155611664056778, -0.03549622371792793, -0.00017521715199109167, 0.006540210451930761, -0.03670051321387291, 0.07246116548776627, -0.0434860922396183, 0.057542040944099426, 0.0076354555785655975, -0.12276843935251236, -0.03131771460175514, -0.054936304688453674, -0.09638664126396179, 0.02107219584286213, -0.07228469103574753, 0.042169008404016495, -0.06245644390583038, 0.0020931402686983347, -0.03340798243880272, 0.04089566320180893, 0.02527790702879429, -0.00454502459615469, -0.02362889051437378, -0.02718888781964779, 0.020284533500671387, 0.0783408135175705, 0.044809143990278244, 0.011140897870063782, 0.051815081387758255, 0.016200220212340355, -0.0566059835255146, -0.157640278339386, 0.07938245683908463, -0.007846319116652012, 0.08885657042264938, 0.03238914906978607, 0.05105308070778847, -0.0828409492969513, -0.004314436111599207, -0.054581042379140854, 0.0326593741774559, -0.06317949295043945, -0.03231150656938553, -0.11932394653558731, -0.03367532417178154, 0.02177445776760578, 0.08369843661785126, 0.02690831571817398, 0.007184692192822695, 0.13735036551952362, -0.1204531118273735, 0.14145180583000183, 0.010858540423214436, -0.013127591460943222, -0.06062501668930054, 0.1074894368648529, -0.0027905316092073917, -0.05178562179207802, -0.007585462182760239, -0.049379367381334305, 0.014250855892896652, 0.04812817648053169, -0.019450882449746132, 0.09063567966222763, 0.008978564292192459, -0.021997783333063126, 0.01833927258849144, -0.037385646253824234, 0.07334516942501068, 0.05568607151508331, -0.025452138856053352, -0.013157128356397152, 0.010848717764019966, -0.006618446204811335, 0.040341492742300034, 0.005730790086090565, -0.017871204763650894, 0.09515856951475143, -0.045525748282670975, -0.047392889857292175, -0.06663711369037628, -0.07988448441028595, 0.02420790307223797, -0.027254551649093628, -0.06762778759002686, -0.05970878154039383, 2.4257444485561107e-33, 0.03396741673350334, -0.09052742272615433, 0.06685536354780197, -0.08494222164154053, -0.009285949170589447, -0.024100782349705696, 0.05546100065112114, -0.11223154515028, 0.0724458396434784, 0.044623855501413345, -0.036819882690906525, 0.023893961682915688, 0.08502025902271271, 0.03207340091466904, 0.07270341366529465, 0.045135248452425, 0.06732615828514099, -0.01826126128435135, -0.08078253269195557, 0.11701712012290955, -0.006492902524769306, -0.0008108718902803957, -0.07906900346279144, -0.0018958061700686812, -0.009658385068178177, 0.08352791517972946, -0.005062856711447239, -0.07796420902013779, -0.03729637339711189, -0.015909511595964432, -0.028090156614780426, -0.03332347422838211, -0.032772406935691833, 0.031986720860004425, -0.006651011295616627, 0.029291611164808273, 0.03673606365919113, 0.0351191945374012, -0.0344906784594059, 0.024573711678385735, 0.05652140825986862, -0.03441111743450165, -0.02830599993467331, 0.05111242085695267, 0.0193525068461895, 0.02957470715045929, 0.016427675262093544, 0.010510839521884918, 0.06360192596912384, 0.010915223509073257, 0.006595780607312918, -0.017527924850583076, -0.03623511269688606, 0.006714283488690853, -0.0033709011040627956, 0.01149301789700985, -0.04700770229101181, 0.012663882225751877, -0.038565970957279205, -0.0373014472424984, -0.005123746115714312, -0.026627564802765846, 0.03479019179940224, -0.03629845008254051, -0.07891782373189926, -0.04597867280244827, -0.056455690413713455, 0.026086419820785522, -0.013523758389055729, -0.04624241217970848, -0.032656263560056686, 0.060855429619550705, -0.04763181507587433, 0.03596697375178337, -0.009640192613005638, 0.0179706159979105, 0.05231217294931412, 0.049203332513570786, 0.0007230566116049886, -0.0037232402246445417, -0.038430407643318176, 0.08075843751430511, -0.0366191565990448, -0.06368620693683624, -0.04952708259224892, 0.050002895295619965, 0.0411873385310173, 0.00945848785340786, -0.02497473545372486, -0.006897840183228254, -0.08019263297319412, -0.005427748896181583, 0.057192422449588776, -0.04797463119029999, -0.05670325085520744, 1.4087305032510732e-32, -0.05941071733832359, -0.03300630301237106, -0.06688329577445984, 0.07013480365276337, -0.01708623394370079, -0.0398445799946785, -0.0108527522534132, 0.06181441992521286, -0.0263507217168808, 0.019361741840839386, -0.06561818718910217, -0.007425301242619753, -0.026307975873351097, -0.08213554322719574, -0.10850028693675995, 0.023020228371024132, -0.005361335352063179, -0.0334286130964756, -0.0020944613497704268, -0.006625582464039326, 0.06788162887096405, 0.012071207165718079, 0.00033556873677298427, -0.0029883168172091246, 0.09338946640491486, 0.02978561446070671, -0.09956087917089462, -0.0009395304950885475, 0.053887855261564255, -0.04274355620145798, -0.07378015667200089, -0.04942278191447258, -0.02057815156877041, 0.0030504511669278145, 0.027157435193657875, -0.034531645476818085, 0.0018893555970862508, 0.019305214285850525, -0.053595174103975296, -0.05545872822403908, 0.04638662934303284, -0.006751523818820715, 0.007782837841659784, -0.04047829285264015, -0.02198929525911808, -0.05348743498325348, 0.09734255075454712, -0.036388687789440155, 0.015291220508515835, -0.024683121591806412, -0.1396462321281433, 0.04811662435531616, 0.06408119946718216, 0.050369635224342346, -0.04863182455301285, -0.04813218116760254, -0.023853018879890442, -0.12891392409801483, 0.02106824330985546, 0.041065704077482224, -0.012819526717066765, 0.012572750449180603, -0.09022929519414902, -0.01813226379454136],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:find_hotel_by_location:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "find_hotel_by_location",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find local events happening in a city on a specific date",
    "embedding": [-0.022179322317242622, 0.031390052288770676, 0.010409370064735413, 0.008818221278488636, 0.03921749070286751, -0.012186999432742596, 0.03011399507522583, -0.037933602929115295, -0.07648109644651413, 0.031161924824118614, 0.025231704115867615, -0.06397107243537903, -0.16030628979206085, 0.049068633466959, 0.020033875480294228, -0.05579964444041252, 0.027202090248465538, 0.03422661870718002, 0.029805077239871025, -0.04190628230571747, -0.02034248597919941, 0.0023771312553435564, -0.09781116247177124, 0.07530947029590607, 0.05515897646546364, 0.0559999980032444, 0.02604850009083748, -0.006613037548959255, 0.0166483037173748, 0.07423578202724457, -0.07660458981990814, -0.019966863095760345, 0.028718924149870872, -0.02418496459722519, 0.11749540269374847, -0.03517584875226021, 0.057695645838975906, 0.03507613390684128, -0.024611877277493477, 0.04844948276877403, 0.05260831117630005, -0.012283535674214363, 0.10985690355300903, -0.012330874800682068, -0.038466304540634155, -0.004349138587713242, 0.012113872915506363, 0.021944265812635422, 0.0033810106106102467, -0.008402666077017784, -4.283148155082017e-05, -0.013252767734229565, -0.00761080626398325, -0.0022625986021012068, 0.02569355070590973, 0.06796372681856155, -0.047901347279548645, 0.006035283207893372, 0.07921088486909866, 0.023636741563677788, -0.0785534679889679, 0.02774573676288128, -0.057267408818006516, -0.02511020004749298, 0.01001843623816967, 0.01690409518778324, 0.09389803558588028, 0.05308955907821655, 0.06056736782193184, -0.07431413233280182, -0.017817702144384384, -0.0006875424878671765, 0.01661083474755287, 0.024319864809513092, -0.055537451058626175, -0.08865754306316376, 0.03752006217837334, -0.047818783670663834, -0.0026855666656047106, -0.049120329320430756, 0.06869828701019287, -0.01578671485185623, 0.055180586874485016, 0.008969646878540516, 0.040036290884017944, -0.034307777881622314, -0.04513129964470863, 0.07412473112344742, 0.07161266356706619, 0.029719749465584755, -0.0802246481180191, 0.04106241837143898, -0.008764839731156826, -0.010338223539292812, -0.03431088104844093, 0.07033664733171463, -0.02382357232272625, 0.09776254743337631, 0.07819141447544098, 0.06795395165681839, -0.023360416293144226, 0.08933410793542862, -0.03409178927540779, 0.002793571213260293, 0.04081776365637779, -0.04099847376346588, -0.14005017280578613, -0.04132716730237007, -0.06307000666856766, 0.024351099506020546, 0.011458766646683216, 0.06192849949002266, 0.026077082380652428, 0.005087997764348984, 0.09847865998744965, -0.019508590921759605, 0.06704219430685043, 0.013691348023712635, -0.0832229033112526, 0.008345129899680614, 0.007896706461906433, -0.006718214135617018, -0.10430420190095901, 0.04781307280063629, -0.03066949173808098, -0.012749901041388512, -0.0414486899971962, 0.03896946832537651, 0.04062756523489952, -0.07678701728582382, -0.03584752604365349, -0.020733989775180817, 0.05278850719332695, 0.0054465229623019695, 0.012099076993763447, -0.017624381929636, 0.008074368350207806, -0.020855166018009186, 0.03335482254624367, -0.04760954529047012, 0.033880602568387985, -0.10168866813182831, 0.038891278207302094, -0.04113728553056717, -0.010532481595873833, 0.010148253291845322, -0.02660963498055935, -0.007843319326639175, -0.06996382772922516, -0.08769065886735916, 0.05547692999243736, -0.09497945755720139, 0.009369065053761005, -0.021450288593769073, 0.063266821205616, -0.026193905621767044, 0.051198724657297134, 0.03154695779085159, 0.02062671259045601, -0.0342601016163826, -0.015313602052628994, 0.03310120850801468, 0.06112239137291908, 0.021686341613531113, -0.08630934357643127, -0.015998873859643936, 0.05799869820475578, 0.005537406541407108, 0.0016233345959335566, -0.011800716631114483, -0.07664844393730164, -0.001143757370300591, 0.04066658392548561, -0.043502237647771835, -0.04879099503159523, 0.06566963344812393, 0.0049817501567304134, 0.012618187814950943, 0.05538245290517807, -0.027635669335722923, -0.04867178201675415, -0.045942068099975586, 0.025045858696103096, 0.051585521548986435, 0.02444206364452839, -0.1519588828086853, 0.13981623947620392, 0.08110003173351288, 0.07310761511325836, 0.03330257907509804, 0.005155953578650951, -0.1053880974650383, 0.024428877979516983, 0.043150462210178375, 0.02597164548933506, 0.059046730399131775, -0.022819483652710915, -0.0014201122103258967, 0.10179689526557922, 0.013984396122395992, 0.03295404091477394, -0.09242410212755203, -0.04192950576543808, -0.06565502285957336, 0.052380021661520004, 0.019030028954148293, -0.015037556178867817, 0.04617464542388916, -0.02136663906276226, -0.06673108041286469, 0.06106382608413696, 0.0888531357049942, 0.10235852003097534, 0.007892834953963757, 0.001919570378959179, 0.01590471900999546, 0.01447999570518732, -0.04054969549179077, -0.0676296204328537, 0.012969906441867352, -0.06010431423783302, -0.06580720841884613, -0.031152980402112007, 5.591327409104507e-33, 0.0391138531267643, -0.044891469180583954, 0.06518619507551193, -0.07497640699148178, 0.027148490771651268, -0.01566394232213497, -0.007493265438824892, -0.049793705344200134, 0.036354243755340576, -0.007779724895954132, -0.0546707920730114, -0.08129671216011047, 0.09124751389026642, 0.006743256002664566, 0.05942930653691292, -0.005844230763614178, 0.0409151129424572, 0.0645679384469986, -0.09814979135990143, 0.12322118133306503, -0.03353579342365265, -0.01724649965763092, -0.09859564155340195, 0.02677314542233944, -0.025549251586198807, 0.03988217934966087, 0.04635177552700043, -0.10343901067972183, -0.031610067933797836, -0.03926141560077667, -0.06575275957584381, -0.09896291792392731, -0.01317458227276802, 0.020881781354546547, -0.12001485377550125, 0.07475798577070236, 0.07929997146129608, -0.05081290006637573, 0.020562950521707535, -0.012166706845164299, 0.025297394022345543, 0.018871866166591644, 0.017658621072769165, 0.046672273427248, -0.061328742653131485, 0.08089655637741089, -0.006558100692927837, 0.0362294539809227, -0.010468835942447186, 0.011778885498642921, -0.03076031804084778, 0.044947028160095215, 0.013258107006549835, 0.07556848227977753, 0.04260706901550293, 0.034575965255498886, -0.060255520045757294, -0.03583301603794098, -0.011370828375220299, 0.06549712270498276, -0.016103340312838554, -0.091584213078022, -0.02350263111293316, -0.010094664990901947, 0.0191874410957098, -0.026436926797032356, -0.006337794940918684, -0.018681012094020844, 0.03632218763232231, -0.01890854351222515, 0.09191510081291199, -0.012223614379763603, -0.12774033844470978, -0.01774585247039795, 0.011795967817306519, -0.013008168898522854, 0.043689824640750885, 0.0370304174721241, 0.060166891664266586, -0.005889123771339655, -0.0491892546415329, 0.05404261499643326, 0.02533690817654133, 0.023316670209169388, -0.04643445461988449, 0.12155748903751373, -0.013716952875256538, -0.00986466370522976, 0.011552947573363781, 0.0297439806163311, -0.017024481669068336, 0.005604814272373915, 0.04583033546805382, -0.027223845943808556, -0.028696350753307343, 1.8332701328157305e-32, 0.009901255369186401, 0.009975584223866463, -0.10732045024633408, -0.028263425454497337, 0.015488456934690475, -0.04253006353974342, 0.023454230278730392, 0.021658480167388916, 0.02788095735013485, -9.97430834104307e-05, 0.033104412257671356, -0.05518519505858421, -0.06844441592693329, -0.047900132834911346, -0.011816220358014107, -0.04642480984330177, 0.02231159433722496, -0.021426331251859665, 0.02561580203473568, -0.015117710456252098, 0.045056793838739395, 0.024402789771556854, -0.04083112254738808, -0.03057272359728813, 0.029151326045393944, -0.04996606707572937, -0.03745534271001816, 0.027004988864064217, 0.046108804643154144, 0.014270004816353321, 0.009380205534398556, -0.044429320842027664, -0.0026433381717652082, -0.04986605793237686, -0.039265234023332596, -0.09733344614505768, 0.012002402916550636, 0.0010913313599303365, -0.02174306847155094, 0.008342093788087368, 0.11900871247053146, -0.05066557973623276, 0.03169131278991699, 0.0216087456792593, 0.05329933762550354, -0.015389326959848404, -0.04926316812634468, -0.06253910064697266, 0.04098191484808922, -0.013780913315713406, -0.10833083838224411, -0.08454283326864243, 0.08045057952404022, -0.0557146780192852, -0.0009041886660270393, 0.05270620062947273, -0.02218748815357685, -0.01913328282535076, 0.007071340922266245, -0.08472317457199097, -0.009717484936118126, 0.06465775519609451, -0.06279472261667252, 0.09809383004903793],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:find_local_events:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "find_local_events",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find popular tourist attractions in a travel destination",
    "embedding": [0.05889371782541275, -0.06590110808610916, -0.012082088738679886, -0.022770008072257042, 0.026941971853375435, 0.047724802047014236, 0.10799799859523773, 0.02022327110171318, -0.06306051462888718, 0.03965019807219505, -0.013774080201983452, -0.030605001375079155, -0.07613968849182129, 0.08680891990661621, -0.0049804747104644775, -0.05825869366526604, 0.09569669514894485, 0.03940167278051376, 0.08209545910358429, -0.02512516640126705, 0.03234878182411194, -0.0006301662069745362, -0.00624475022777915, 0.12156548351049423, 0.0064574615098536015, -0.0070720696821808815, -0.018432525917887688, 0.05934910848736763, -0.017489425837993622, -0.0007568817236460745, -0.004934932570904493, 0.08624592423439026, 0.016973372548818588, -0.0047847512178123, 0.10787564516067505, 0.08440235257148743, -0.0520714670419693, -0.06722734868526459, 0.04098491370677948, 0.0586526021361351, 0.03946898505091667, -0.03629305213689804, 0.0555482916533947, 0.00035747478250414133, -0.015718284994363785, -0.04613151028752327, 0.08500538766384125, 0.0015774952480569482, 0.02403709851205349, 0.021209053695201874, -0.023123841732740402, -0.03441094979643822, -0.03373749926686287, -0.0432867631316185, 0.017599212005734444, -0.005282935220748186, -0.0736464112997055, -0.09056612104177475, -0.014388306066393852, 0.029805073514580727, 0.028837081044912338, -0.05222392827272415, 0.03637778013944626, -0.053613387048244476, -0.041503287851810455, 0.05028520151972771, 0.0431026928126812, 0.06296613812446594, -0.019663464277982712, -0.029249170795083046, 0.008218583650887012, 0.02017502300441265, -0.016552822664380074, 0.029432388022542, -0.005417513661086559, -0.07820569723844528, -0.011133873835206032, 0.03449934348464012, -0.06578332930803299, -0.03679215908050537, 0.08621615171432495, -0.057414647191762924, -0.06043437123298645, -0.025799071416258812, 0.049256954342126846, -0.02905362658202648, 0.02036050148308277, 0.023136742413043976, 0.0026702953036874533, -0.009587248787283897, -0.03119059093296528, 0.03877893090248108, -0.07192985713481903, 0.04571220651268959, -0.005331307649612427, 0.04636239632964134, -0.006698035169392824, -0.0147325424477458, 0.07079297304153442, 0.05069674924015999, 0.015610942617058754, 0.07569047063589096, 0.032151371240615845, 0.0027147929649800062, -0.046015363186597824, -0.02857871539890766, -0.033082325011491776, -0.029218219220638275, 0.03862117975950241, 0.02131398767232895, -0.056742846965789795, 0.09315455704927444, 0.01727617159485817, 0.01239030435681343, 0.042291074991226196, -0.07347114384174347, -0.019926371052861214, 0.05368697643280029, -0.030181586742401123, 0.003396091517060995, -0.025977294892072678, -0.04530975967645645, 0.0779263824224472, -0.004789429716765881, -0.04963052272796631, -0.04096575826406479, -0.0588940791785717, -0.0327468141913414, -0.01919209398329258, -0.0013271968346089125, 0.0019943893421441317, 0.06874366104602814, -0.00979667715728283, -0.0036095380783081055, -0.12556172907352448, -0.014418352395296097, -0.07242570072412491, -0.0874837189912796, -0.010810677893459797, 0.057899441570043564, 0.01906578801572323, 0.07098101824522018, 0.04887038469314575, -0.09140618145465851, 0.043217018246650696, 0.004815229680389166, -0.04817923903465271, -0.029587741941213608, -0.03243477642536163, -0.029627030715346336, 0.06958702951669693, -0.09252598136663437, -0.019331708550453186, -0.03469594940543175, 0.03653840348124504, -0.08256286382675171, 0.056998707354068756, 0.05255856364965439, -0.01868128404021263, 0.037186622619628906, 0.010195448994636536, 0.0035009223502129316, 0.0056958734057843685, 0.009590636007487774, -0.04544173553586006, 0.005915846209973097, 0.04996231943368912, 0.0062795174308121204, -0.07349951565265656, -0.014653037302196026, -0.10346455127000809, 0.024201959371566772, 0.030288269743323326, 0.020020047202706337, 0.061635822057724, 0.03066808544099331, -0.011264201253652573, -0.0033381334505975246, -0.029275527223944664, -0.07897332310676575, 0.014851509593427181, -0.011041193269193172, -0.01156175322830677, 0.055890511721372604, 0.04423363879323006, -0.03633762523531914, 0.08854668587446213, -0.05356183275580406, 0.054211702197790146, 0.059717774391174316, -0.008966806344687939, -0.043451618403196335, 0.07741983979940414, 0.04492604359984398, 0.060706283897161484, 0.04611051082611084, -0.07704098522663116, 0.013833421282470226, 0.07871260493993759, 0.041248951107263565, -0.026025380939245224, -0.09153705090284348, 0.0032780449837446213, -0.06428512185811996, -0.07659105956554413, 0.043642107397317886, 0.010914134792983532, 0.08214528113603592, 0.006450890097767115, 0.014088406227529049, 0.07770748436450958, 0.058520395308732986, 0.022041894495487213, -0.0297095887362957, -0.007764596492052078, -0.12154736369848251, 0.03047417290508747, -0.04645416513085365, 0.007296266034245491, 0.04407815262675285, -0.03004598803818226, 0.021067805588245392, -0.049476951360702515, 2.1007773822323585e-34, 0.01983809657394886, 0.04965910688042641, 0.11571840941905975, -0.0161251462996006, -0.04505935311317444, -0.06464242935180664, 0.013156387954950333, -0.06632627546787262, 0.05663364753127098, 0.06272734701633453, -0.10088003426790237, -0.04643409699201584, 0.12449824064970016, -0.00731873931363225, 0.037206295877695084, -0.00643178028985858, 0.06741874665021896, 0.03899006173014641, -0.0860716924071312, 0.12732699513435364, 0.015477784909307957, 0.010938218794763088, -0.1227962002158165, -0.13250671327114105, 0.04571814835071564, 0.08398640155792236, -0.0551416277885437, -0.14397606253623962, -0.01094390545040369, -0.06171564757823944, 0.041336286813020706, -0.03890299052000046, -0.01699184998869896, 0.008299061097204685, -0.05903642624616623, 0.12743575870990753, 0.09490631520748138, -0.023180827498435974, 0.00890517421066761, 0.06857006251811981, 0.10152014344930649, 0.04653371870517731, 0.021764643490314484, 0.04665958881378174, 0.014441948384046555, 0.07075487077236176, 0.017293568700551987, 0.012627687305212021, 0.06950005143880844, -0.05456750467419624, -0.03961323946714401, 0.0385032556951046, -0.028100084513425827, -0.004632997792214155, 0.011214799247682095, 0.0517120361328125, -0.09458758682012558, -0.0506092831492424, 0.00992583017796278, -0.022853663191199303, -0.02148902602493763, -0.07480933517217636, -0.029732100665569305, -0.06588788330554962, -0.046732593327760696, -0.05276035889983177, -0.03895269334316254, 0.03101254254579544, -0.045598506927490234, -0.04913241043686867, 0.0009277687058784068, 0.07052311301231384, -0.07284966856241226, -0.016691455617547035, -0.020039282739162445, -0.029034201055765152, 0.03938209265470505, 0.09535948932170868, -0.010470549575984478, -0.0004867889219895005, -0.014104412868618965, 0.05930471792817116, -0.006202883552759886, -0.07689453661441803, 0.09478514641523361, 0.07948098331689835, -0.07886776328086853, -0.05597870051860809, -0.038147520273923874, -0.0037236155476421118, -0.05673731863498688, -0.0010110647417604923, 0.016500331461429596, -0.04360637813806534, -0.02336093597114086, 2.612525321379789e-32, -0.02959592640399933, -0.020085923373699188, -0.057974524796009064, 0.024440007284283638, 0.03555982559919357, -0.049076441675424576, -0.024404654279351234, 0.08654443919658661, 0.02142472192645073, 0.02914954535663128, -0.06237078458070755, 0.005200708284974098, -0.08714967221021652, -0.022901790216565132, 0.030112406238913536, -0.008509033359587193, 0.00953581091016531, -0.0012851651990786195, -0.019149301573634148, -0.008929877541959286, -0.008998236618936062, 0.03200322017073631, 0.04548928886651993, -0.05168095976114273, -0.018748324364423752, -0.007855765521526337, -0.0638655573129654, -0.01619246043264866, 0.029297301545739174, 0.0029712729156017303, -0.06700856238603592, -0.0735708698630333, -0.09370912611484528, -0.03619010001420975, 0.06519422680139542, -0.027726510539650917, -0.001236260635778308, -0.021454818546772003, -0.03740296885371208, 0.029819585382938385, 0.03167083114385605, 0.0006337426602840424, 0.008989594876766205, 0.06618664413690567, 0.02229372411966324, 0.0427815280854702, 0.02682366594672203, -0.018670763820409775, -0.010751230642199516, -0.022475549951195717, -0.08414800465106964, -0.038863398134708405, 0.11010618507862091, 0.009000741876661777, -0.014992978423833847, -0.04589872807264328, -0.03780243173241615, -0.05234699323773384, 0.07443369179964066, -0.027377812191843987, 0.05581023544073105, 0.027799343690276146, -0.11311358213424683, 0.04083704203367233],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:find_tourist_attractions:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "find_tourist_attractions",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Find travel insurance options based on traveler information",
    "embedding": [0.03182162344455719, -0.011531694792211056, -0.060568466782569885, 0.01733407936990261, 0.04710384085774422, 0.021906765177845955, 0.09684133529663086, 0.05437197908759117, -0.020206566900014877, -0.010667364113032818, 0.07963434606790543, -0.024603184312582016, -0.0350332036614418, 0.043870892375707626, 0.011011899448931217, -0.08925501257181168, 0.05465155839920044, 0.02296636626124382, 0.016107680276036263, 0.03751789778470993, 0.008758770301938057, -0.001607370562851429, -0.07509899884462357, -0.02490920014679432, 0.06483679264783859, 0.06347758322954178, 0.0389663465321064, 0.06731805950403214, -0.013862879946827888, 0.02904430776834488, -0.058254748582839966, 0.04546521231532097, -0.07527104020118713, -0.027871746569871902, 0.02803269401192665, 0.03696678578853607, -0.07873476296663284, 0.06283767521381378, 0.0028913666028529406, 0.01817440055310726, 0.0268055722117424, -0.03215739503502846, -0.0374322384595871, -0.00901054684072733, 0.03189684450626373, -0.030392494052648544, 0.07990201562643051, 0.017305240035057068, 0.036667510867118835, 0.03392395004630089, -0.03899187594652176, -0.008710437454283237, -0.05049772933125496, -0.07788194715976715, 0.07035969197750092, -0.10770395398139954, -0.07129327952861786, -0.04464484378695488, -0.0986412987112999, -0.010019291192293167, -0.04649094119668007, -0.03876291587948799, 0.0832773745059967, 0.006938620004802942, -0.0844472125172615, 0.08459706604480743, 0.016703763976693153, 0.05137929692864418, -0.022825440391898155, -0.048405539244413376, 0.005017519928514957, 0.009545174427330494, -0.04832817241549492, 0.03100528195500374, 0.011147838085889816, 0.025218050926923752, -0.0391809307038784, 0.07077294588088989, -0.017641382291913033, 0.016948331147432327, 0.00828351080417633, -0.057828884571790695, -0.038616616278886795, -0.0012029589852318168, 0.054317083209753036, -0.044318657368421555, -0.033392392098903656, -0.06882155686616898, -0.025594208389520645, 0.03438863530755043, -0.02238636650145054, 0.0062811351381242275, -0.019575970247387886, 0.06014426052570343, 0.006478449795395136, 0.08421499282121658, -0.06403249502182007, -0.02673332579433918, 0.05202582851052284, 0.06713823229074478, -0.007611806970089674, -0.025673579424619675, 0.06248456984758377, -0.014691963791847229, -0.04512162506580353, -0.034506216645240784, 0.028895312920212746, 0.00105088553391397, 0.13587771356105804, 0.011073839850723743, 0.02660231851041317, 0.0749584436416626, 0.03203492984175682, -0.03770790994167328, -0.020070655271410942, -0.07018423080444336, 0.03882143273949623, -0.0013084248639643192, 0.07242460548877716, -0.07109697163105011, 0.04110587388277054, -0.06995654106140137, 0.015873095020651817, -0.027975190430879593, -0.08631435036659241, -0.054806847125291824, 0.03299133479595184, -0.03356444463133812, -0.028653621673583984, 0.04558447748422623, 0.03330659121274948, 0.09614923596382141, 0.017688201740384102, -0.023803649470210075, -0.12313493341207504, -0.03502236679196358, -0.0133369667455554, -0.03656276687979698, -0.05924363434314728, 0.03687329962849617, 0.0780874639749527, 0.006675185635685921, 0.03660052642226219, 0.01808127947151661, -0.00916293729096651, -0.005101848393678665, -0.06112818792462349, 0.00960067193955183, 0.060579001903533936, -0.03365681692957878, -0.02220764197409153, -0.08694029599428177, 0.07638198882341385, 0.0031055710278451443, -0.044182248413562775, 0.005295244045555592, 0.09590653330087662, 0.0440993495285511, -0.06018758565187454, 0.016262345016002655, 0.005533549003303051, -0.029054630547761917, 0.07327631860971451, 0.08725178241729736, -0.041057441383600235, 0.06394553184509277, 0.008515613153576851, -0.00032471970189362764, -0.08761445432901382, -0.11095453798770905, 0.00265014567412436, 0.02933618053793907, 0.012114521116018295, 0.02521180920302868, 0.007417772430926561, 0.045207854360342026, -0.06430397182703018, 0.05230420455336571, -0.06405847519636154, -0.08715933561325073, -0.02177632413804531, -0.01967855542898178, 0.002665630541741848, 0.014117589220404625, 0.02169046364724636, 0.05606963858008385, 0.028627192601561546, -0.018106812611222267, 0.0020588142797350883, 0.07768074423074722, -0.008728192187845707, -0.10164684057235718, 0.04246656224131584, 0.04367680475115776, 0.029946845024824142, -0.14255385100841522, 0.03705523908138275, 0.01162695325911045, 0.03242623060941696, 0.03793687745928764, 0.05667858570814133, -0.01564115658402443, -0.06747156381607056, 0.010886501520872116, -0.09737231582403183, 0.008735798299312592, 0.0038457901682704687, 0.04928647726774216, -0.03198587894439697, 0.017480406910181046, 0.0496361218392849, 0.06659503281116486, 0.01906113512814045, -0.0011309992987662554, 0.08859134465456009, -0.05554727092385292, -0.046173613518476486, -0.04855434224009514, 0.024261564016342163, -0.016500182449817657, -0.02640816941857338, 0.02389955334365368, -0.019508089870214462, -2.70825963842587e-33, -0.0646037608385086, -0.021342763677239418, 0.056769855320453644, -0.049173615872859955, 0.028443224728107452, -0.003148691961541772, -0.07653574645519257, -0.0700189620256424, 0.1251627802848816, 0.052998609840869904, -0.12384382635354996, -0.01379223819822073, 0.09192650020122528, -0.038833245635032654, 0.07124512642621994, 0.011595301330089569, -0.02992631308734417, -0.0537598580121994, -0.02064354531466961, 0.1550818383693695, -0.03509249538183212, 0.0067939856089651585, -0.1282636970281601, 0.028627902269363403, 0.10389651358127594, 0.043003082275390625, 0.013888384215533733, -0.09300997108221054, 0.00024806553847156465, 0.01527690701186657, -0.05130550265312195, -0.05244274064898491, 0.008445600047707558, 0.08726418763399124, -0.1176413744688034, -0.01104198768734932, 0.020380618050694466, 0.011409075930714607, 0.02182801626622677, 0.049334779381752014, 0.046708136796951294, -9.645583486417308e-05, 0.026800207793712616, 0.07527665048837662, 0.007349384482949972, 0.021862730383872986, -0.003977571614086628, -0.03142983838915825, 0.07222197204828262, 0.006699228193610907, 0.10900119692087173, 0.06298475712537766, -0.008751122280955315, 0.06552400439977646, -0.03467914089560509, 0.038940224796533585, -0.025164352729916573, -0.043353453278541565, 0.0273227971047163, -0.046271633356809616, -0.03646158054471016, 0.031487930566072464, 0.03806695714592934, -0.050968069583177567, -0.06716246902942657, 0.011407856829464436, -0.05316454544663429, -0.028671512380242348, -0.03506101667881012, -0.07292727380990982, -0.05188780650496483, -0.09678363800048828, -0.07392846792936325, -0.031736232340335846, 0.043821949511766434, 0.0059435260482132435, 0.06969769299030304, 0.09677734225988388, -0.018039705231785774, 0.06797641515731812, -0.0030479023698717356, 0.016748366877436638, -0.04077087715268135, 0.031717266887426376, -0.021339228376746178, 0.05011804401874542, -0.07602110505104065, -0.03783654421567917, -0.029744325205683708, 0.05329451709985733, -0.10560601949691772, -0.01548277959227562, 0.00487480079755187, -0.002344322158023715, -0.11685264855623245, 2.701396514658594e-32, 0.04391421377658844, -0.07638544589281082, -0.007063917815685272, 0.029093923047184944, -0.012903820723295212, -0.010953238233923912, -0.02079976536333561, 0.10793674737215042, -0.03694137930870056, -0.010798112489283085, -0.028615528717637062, -0.01338694617152214, -0.00436650263145566, -0.025012992322444916, -0.018872251734137535, 0.028031647205352783, 0.014913495630025864, 0.008601541630923748, 0.06488536298274994, 0.012321103364229202, -0.04706433787941933, 0.07507981359958649, 0.010986872017383575, 0.03681468218564987, 0.03197463974356651, -0.0371890515089035, -0.04779705032706261, -0.03145816549658775, 0.0017299705650657415, 0.013482230715453625, -0.08955983817577362, -0.07781851291656494, 0.022277895361185074, -0.017945660278201103, -0.013392326422035694, -0.00793683435767889, 0.007735684048384428, 0.020942149683833122, -0.02821909822523594, 0.036768294870853424, 0.06074695289134979, 0.020992185920476913, 0.05476272851228714, -0.025354716926813126, 0.03411121293902397, 0.053308989852666855, -0.02145216055214405, -0.039197374135255814, 0.011918325908482075, 0.024443114176392555, -0.057876039296388626, -0.05691514536738396, 0.11817590892314911, 0.07648394256830215, -0.10517013072967529, -0.03965694084763527, -0.05334106832742691, -0.0761701688170433, 0.007563702762126923, -0.03146352618932724, -0.01300952211022377, -0.062320150434970856, -0.043933115899562836, 0.04329929128289223],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:find_travel_insurance_options:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "find_travel_insurance_options",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get the currency exchange rate between two currencies",
    "embedding": [0.007671583443880081, 0.057086579501628876, -0.02232249081134796, 0.05109478533267975, 0.0032631473150104284, -0.06114590913057327, -0.037565797567367554, 0.012338374741375446, 0.08952733874320984, 0.018035395070910454, -0.05221473053097725, -0.1217217743396759, -0.035647690296173096, 0.0058875796385109425, 0.07803566753864288, -0.08248297870159149, -0.03690231963992119, 0.04969647154211998, 0.010804198682308197, 0.03835795074701309, 0.010880065150558949, -0.09980887174606323, -0.1124952882528305, -0.03181838244199753, 0.0009529106318950653, 0.1401338428258896, 0.04623669385910034, 0.04128175228834152, 0.010057603940367699, 0.015375958755612373, 0.06602831929922104, -0.05325824394822121, -0.041225481778383255, -0.010082865133881569, -0.004968477413058281, 0.011980202049016953, -0.0412430539727211, 0.0037721588741987944, 0.021764900535345078, 0.014584257267415524, 0.02725507691502571, 0.01654970459640026, 0.030642125755548477, -0.024160105735063553, -0.02672385983169079, -0.021391890943050385, -0.03282175585627556, 0.09838485717773438, -0.012720434926450253, 0.04620998725295067, 0.05309958755970001, 0.011046046391129494, -0.009135209023952484, 0.021786415949463844, 0.017000077292323112, 0.0618462935090065, 0.09255708754062653, -0.025374002754688263, 0.014461335726082325, 0.01614443026483059, -0.09010596573352814, -7.571710011688992e-05, -0.009644989855587482, -0.011332879774272442, -0.017458688467741013, -0.008475013077259064, 0.07656118273735046, 0.03428000584244728, -0.03161560371518135, 0.007313339039683342, -0.12601453065872192, -0.08396825939416885, 0.05434218794107437, -0.04622306674718857, 0.047562479972839355, -0.06480597704648972, 0.028459277004003525, 0.010016687214374542, 0.05438238009810448, 0.05316414684057236, 0.00033927272306755185, 0.008169788867235184, -0.039748094975948334, -0.02979440614581108, 0.06007824465632439, -0.056464407593011856, 0.08844723552465439, 0.010414655320346355, 0.04580439627170563, -0.06746816635131836, -0.004483699332922697, 0.06838058680295944, 0.06416139751672745, 0.017795994877815247, 0.009150437079370022, 0.07080385088920593, 0.011900978162884712, 0.06533604860305786, 0.04672958329319954, 0.08014941215515137, 0.07615665346384048, 0.01354990340769291, -0.021021779626607895, 0.025612033903598785, -0.03947606682777405, 0.023463210090994835, -0.09852179139852524, 0.024427717551589012, -0.031311530619859695, 0.012344002723693848, -0.07719910889863968, 0.05601640045642853, -0.046650826930999756, -0.061337705701589584, 0.06994149088859558, -0.02061295323073864, 0.03604719787836075, -0.05899791419506073, 0.13011163473129272, -0.03338855877518654, 0.045749224722385406, -0.07838600873947144, -0.010628736577928066, -0.0022442524787038565, -0.008628698997199535, -0.07125280052423477, 0.040785934776067734, -0.05692196637392044, -0.047977812588214874, 0.013530329801142216, 0.0689144879579544, -0.07914938777685165, -0.013932997360825539, 0.1102389544248581, -0.07564575970172882, 0.06996550410985947, -0.02433709055185318, -0.017866764217615128, -0.05751696601510048, 0.04759854078292847, 0.03412128984928131, -0.04451542720198631, -0.07849706709384918, 0.01040821522474289, 0.015468874014914036, 0.02749175764620304, 0.05869054049253464, 0.06825575232505798, -0.00319498497992754, -0.03857247158885002, 0.02879771962761879, -0.02259386144578457, 0.05279958248138428, 0.009560114704072475, -0.01017494685947895, 0.06765729933977127, 0.05116543546319008, -0.07264965772628784, -0.04328598827123642, -0.011206417344510555, -0.06779621541500092, -0.06777112931013107, -0.04623411223292351, 0.02780577726662159, 0.09070870280265808, 0.015797046944499016, 0.032399654388427734, 0.020863603800535202, -0.02121238224208355, 0.010630729608237743, 0.02385098487138748, 0.002787334145978093, -0.10437345504760742, -0.023218434303998947, 0.04826724901795387, -0.041410330682992935, -0.01679689809679985, 0.042795538902282715, -0.027051355689764023, 0.02067352645099163, -0.09122221171855927, -0.07787575572729111, 0.028289001435041428, -0.03561754152178764, 0.053507864475250244, -0.012547994032502174, -0.0345696359872818, -0.03693317994475365, -0.06695722788572311, 0.08465499430894852, 0.10840954631567001, -0.0510948970913887, -0.09269944578409195, 0.043520454317331314, -0.001628000638447702, -0.07925885170698166, 0.025240855291485786, 0.06163131445646286, -0.07373318076133728, 0.0032928164582699537, 0.10208608955144882, 0.04939521104097366, -0.020959043875336647, 0.06184299662709236, 0.01724083535373211, -0.02388046681880951, -0.0250606220215559, -0.06366074085235596, -0.10972923785448074, -0.0015271943993866444, 0.033680763095617294, -0.024587977677583694, -0.028915559872984886, 0.021771451458334923, -0.028747830539941788, 0.08691740781068802, 0.0941350981593132, -0.05719258263707161, -0.0262154433876276, -0.056134775280952454, -0.0706983432173729, -0.028626563027501106, 0.016138682141900063, -1.6838616784193484e-33, -0.002369163790717721, 0.06461077928543091, -0.06822706013917923, 0.03073391690850258, 0.0602751262485981, 0.0075315507128834724, 0.000463496136944741, 0.09385973960161209, 0.020843902602791786, 0.07547035068273544, 0.010402821004390717, 0.0006249493453651667, -0.023467591032385826, 0.012332041747868061, 0.11200538277626038, 0.03940616920590401, 0.08237066119909286, 0.09506476670503616, -0.08386807888746262, 0.0035566624719649553, 0.0045708599500358105, 0.006666152272373438, 0.013382691890001297, -0.03550681844353676, -0.042999617755413055, -0.0437835194170475, -0.01205210667103529, -0.10841240733861923, -0.07019928842782974, -0.020114285871386528, -0.006220316980034113, 0.027279365807771683, 0.02074483409523964, 0.1288149058818817, -0.05493076518177986, 0.01215087715536356, -0.06492547690868378, 0.008743266575038433, 0.04445325583219528, -0.002442943397909403, -0.008573150262236595, 0.05700811743736267, -0.05229271575808525, 0.042700979858636856, -0.011167170479893684, 0.06734692305326462, 0.005858408287167549, 0.11162785440683365, 0.05118482559919357, 0.014659787528216839, 0.15188810229301453, -0.0448446124792099, 0.028358951210975647, -0.029592271894216537, -0.08151447772979736, -0.051344264298677444, 0.017973851412534714, 0.004291248507797718, -0.029689820483326912, -0.024151289835572243, 0.04408544301986694, -0.03021118976175785, 0.0695573017001152, 0.009345839731395245, -0.00039521866710856557, 0.04833733290433884, 0.008669404312968254, -0.0023273457773029804, 0.06584464758634567, 0.022260449826717377, 0.02247224561870098, 0.07646337896585464, -0.016127388924360275, -0.01851046457886696, 0.03373947739601135, -0.010811361484229565, 0.03675203025341034, 0.00872506108134985, 0.019191130995750427, 0.08108113706111908, -0.08640409260988235, 0.029567163437604904, 0.017851706594228745, -0.0014292991254478693, -0.033071670681238174, 0.02150014601647854, -0.03005851060152054, -0.00899459421634674, -0.03293977305293083, -0.02359025739133358, -0.08924055099487305, -0.02065105549991131, 0.09564189612865448, -0.05010586604475975, 0.01033242978155613, 1.2105411271448786e-32, -0.02079811692237854, 0.01796465925872326, -0.010374472476541996, 0.05796574801206589, -0.06642362475395203, 0.06951617449522018, 0.008859745226800442, 0.009235834702849388, -0.04135928303003311, 0.06452345103025436, -0.06839454919099808, 0.08070238679647446, -0.04877198487520218, -0.011977472342550755, -0.017981352284550667, -0.03901544213294983, -0.0076355705969035625, -0.027661852538585663, 0.01613449677824974, -0.03827220946550369, -0.047847848385572433, 0.040987104177474976, 0.01061333529651165, -0.010020749643445015, -0.0013745310716331005, 0.047476448118686676, -0.004139794036746025, 0.06356815248727798, -0.05311068892478943, -0.07423940300941467, -0.02886420302093029, -0.09842807054519653, -0.07323421537876129, -0.0725255012512207, 0.006424841471016407, 0.013802163302898407, -0.04025612771511078, -0.01285486202687025, 0.0019069762201979756, 0.008196135051548481, -0.03576330095529556, -0.01929144188761711, 0.000756041263230145, -0.023771658539772034, 0.07197496294975281, 0.024568701162934303, -0.05466034635901451, -0.004965995438396931, -0.028780678287148476, -0.08884600549936295, 0.039406899362802505, -0.006793804466724396, 0.007558086887001991, 0.026706235483288765, -0.052827347069978714, -0.0880020260810852, -0.08069062232971191, -0.07903837412595749, 0.02520488202571869, 0.02415998838841915, -0.10499238222837448, -0.04696561396121979, -0.019615137949585915, -0.07376128435134888],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:get_currency_exchange_rate:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "get_currency_exchange_rate",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get public transportation routes in a specific city",
    "embedding": [0.04286894202232361, -0.05291717126965523, -0.018322108313441277, 0.047351423650979996, 0.04187436029314995, 0.029157152399420738, 0.03714019060134888, 0.031156864017248154, -0.1257096230983734, -0.0318019762635231, 0.015744004398584366, -0.07205791771411896, -0.10157931596040726, 0.006809629034250975, 0.011393317021429539, -0.11035323143005371, 0.08052043616771698, 0.03438654914498329, 0.08287707716226578, -0.0055679804645478725, 0.03129768744111061, 0.003638791386038065, -0.07622291892766953, -0.027472127228975296, 0.0264287032186985, 0.12155713886022568, 0.07399249821901321, 0.002209664788097143, 0.005880126263946295, -0.015257995575666428, 0.0035834566224366426, -0.050074949860572815, -0.049248263239860535, -0.0010737506672739983, 0.1076020747423172, -0.021666811779141426, 0.047682829201221466, 0.013020170852541924, 0.07353128492832184, -0.03873584419488907, 0.11169832199811935, 0.001536235329695046, -0.039612893015146255, 0.058762453496456146, 0.016782445833086967, -0.009236863814294338, 0.015787187963724136, -0.028317438438534737, 0.02818434312939644, -0.08910688757896423, 0.039125796407461166, -0.06179490685462952, -0.0383022241294384, 0.04434318095445633, 0.04624349996447563, -0.0023989370092749596, -0.03190790116786957, 0.009950857609510422, 0.03273036703467369, 0.019125817343592644, -0.06655049324035645, -0.08960075676441193, -0.029251914471387863, -0.03897128999233246, 0.03223904222249985, -0.006318826228380203, 0.08631715178489685, 0.021664142608642578, 0.028912710025906563, -0.1082780510187149, -0.007178143598139286, 0.05190369859337807, -0.008861788548529148, 0.04677591845393181, 0.018739003688097, -0.07466897368431091, 0.03175165876746178, 0.03581824153661728, 0.013796581886708736, -0.03461369127035141, 0.027213694527745247, 0.03079872764647007, 0.0013135983608663082, 0.05112246423959732, 0.017872724682092667, 0.016090020537376404, -0.06323041766881943, -0.005263983737677336, 0.024621108546853065, 0.03486492857336998, -0.10936432331800461, 0.041748106479644775, -0.07977726310491562, -0.024931373074650764, -0.04075412452220917, 0.03626083582639694, -0.08389991521835327, 0.08014794439077377, 0.06698869913816452, 0.04660734161734581, -0.022384747862815857, 0.04065005108714104, 0.017730101943016052, 0.01080233696848154, 0.00758397625759244, 0.008341333828866482, -0.0052704294212162495, -0.02758936583995819, 0.0010093520395457745, 0.04860454425215721, 0.030217083171010017, 0.02555714175105095, -0.014421253465116024, -0.012462333776056767, 0.003780559403821826, -0.047819823026657104, -0.0115227485075593, 0.02865896187722683, -0.050313904881477356, 0.04589269682765007, -0.14643296599388123, -0.05935940891504288, 0.04155994951725006, 0.03726721554994583, -0.05162899196147919, -0.026539647951722145, 0.0303665678948164, -0.08117552846670151, -0.006186326965689659, -0.006982566323131323, 0.07605993002653122, 0.05318952724337578, -0.05619189143180847, -0.009315570816397667, -0.006024238187819719, -0.007374820299446583, 0.04020087420940399, -0.005127237178385258, -0.0567350909113884, 0.037459611892700195, 0.08626347780227661, -0.035281386226415634, 0.1314675211906433, -0.02695428393781185, -0.016855968162417412, -0.0032600814010947943, -0.045779671519994736, 0.028867820277810097, -0.017269080504775047, -0.06207861006259918, 0.041234090924263, -0.1539345532655716, 0.030823584645986557, -0.029317276552319527, -0.03387019410729408, 0.03824138268828392, 0.08531347662210464, 0.05535457655787468, 0.06472181528806686, 0.0381929948925972, -0.005177197512239218, 0.07143717259168625, 0.015328262001276016, -0.01952323317527771, -0.04842298850417137, 0.04132413864135742, 0.0002626263303682208, 0.015925921499729156, -0.006334718316793442, -0.0018881525611504912, -0.03817296773195267, 0.021778849884867668, -0.01311227586120367, 0.04249751940369606, -0.05334682762622833, 0.0034783894661813974, -0.03015158139169216, 0.02613014355301857, 0.023043371737003326, 0.05557134747505188, -0.05238453671336174, -0.04689092934131622, 0.0007417750312015414, -0.022122353315353394, 0.03850970417261124, 0.002524001756682992, 0.07410426437854767, 0.03996320068836212, 0.03877749666571617, 0.06982763111591339, -0.002469830447807908, -0.054956018924713135, 0.08421414345502853, -0.022174179553985596, -0.06585889309644699, 7.911346619948745e-05, -0.012568875215947628, 0.024724923074245453, 0.04206172749400139, -0.0921289399266243, 0.03255755826830864, 0.006286787800490856, -0.02130241133272648, -0.058501459658145905, -0.07909134775400162, 0.009400983341038227, -0.00787697546184063, -0.023980114609003067, -0.033151980489492416, 0.028515301644802094, -0.016871601343154907, 0.07130314409732819, 0.16953088343143463, 0.05247804895043373, -0.0038576656952500343, -0.04018736258149147, 0.022717425599694252, -0.03852688893675804, -0.026815006509423256, 0.03251641243696213, -0.09024795144796371, 0.02063910849392414, -0.05116720125079155, 3.668267140301216e-33, 0.006361122243106365, -0.020089885219931602, 0.06038811802864075, -0.0579204186797142, -0.0451262891292572, -0.013052040711045265, 0.05533193051815033, -0.055506885051727295, 0.07433343678712845, 0.11513032764196396, -0.023731844499707222, -0.0864265114068985, 0.09994708001613617, -0.017634134739637375, 0.09355343133211136, -0.08718888461589813, 0.056414518505334854, 0.0020033055916428566, -0.15048736333847046, 0.054829757660627365, -0.06698290258646011, 0.004084913060069084, -0.16789911687374115, -0.023810721933841705, 0.054221201688051224, 0.032532937824726105, 0.012803254649043083, -0.03758435696363449, -0.04225069656968117, 0.04077665135264397, -0.032412003725767136, -0.0816287100315094, 0.015679318457841873, 0.06874723732471466, -0.07929261028766632, -0.012129638344049454, 0.03587658330798149, 0.07820708304643631, 0.060377489775419235, 0.02483212575316429, 0.011381841264665127, -0.0556039996445179, 0.03022756054997444, 0.016331858932971954, 0.0007988075376488268, 0.10225487500429153, 0.0613863505423069, 0.0008033466292545199, -0.04678722470998764, -0.005617031827569008, 0.10271704941987991, 0.057319045066833496, -0.0561857670545578, 0.07345756143331528, 0.09580244868993759, 0.05171727016568184, -0.015774190425872803, -0.029459381476044655, -0.026576166972517967, -0.05642668530344963, -0.05796399712562561, -0.004439604934304953, 0.016854632645845413, -0.00954123679548502, 0.0023912868928164244, -0.030919739976525307, -0.001564471167512238, -0.09503155201673508, 0.046280305832624435, -0.021320359781384468, 0.0166317131370306, 0.040110547095537186, -0.016328418627381325, 0.016998441889882088, -0.028452832251787186, -0.04717705771327019, 0.09365762770175934, 0.1293880194425583, 0.02643429860472679, 0.0443408265709877, -0.026624130085110664, -0.005825710482895374, -0.004027621820569038, -0.016443170607089996, -0.021843351423740387, 0.08288862556219101, -0.058355912566185, -0.03574520722031593, -0.0004812135302927345, 0.06935129314661026, -0.03415583446621895, 0.0349983386695385, 0.03175155445933342, -0.009591372683644295, -0.052336402237415314, 1.1112477805464923e-32, -0.027555059641599655, 0.012677449733018875, -0.08764175325632095, -0.025854939594864845, 0.04193129763007164, 0.030258718878030777, 0.006254811305552721, 0.023170562461018562, -0.019537361338734627, -0.004491385072469711, -0.014203421771526337, 0.05472772568464279, -0.10359993577003479, 0.033224884420633316, -0.07258467376232147, 0.03933146223425865, 0.027348633855581284, -0.01565874181687832, 0.016360465437173843, 0.001261929632164538, 0.012802778743207455, 0.0052729444578289986, -0.01952659711241722, -0.02163700945675373, 0.03286084905266762, -0.07012469321489334, -0.01679711975157261, -0.03181304410099983, 0.051701273769140244, 0.009174594655632973, -0.07794613391160965, -0.035962920635938644, -0.0019544651731848717, 0.002099512377753854, -0.03151446580886841, 0.008581124246120453, -0.00267002428881824, 0.02792040817439556, 0.031231211498379707, 0.06710053235292435, 0.01240271795541048, -0.014255527406930923, 0.0012265978148207068, -0.03333662450313568, 0.09559225291013718, -0.038561709225177765, -0.004687007516622543, -0.0797809362411499, 0.016147471964359283, -0.0036918031983077526, -0.12497195601463318, -0.03759743645787239, -0.017523443326354027, -0.01686122454702854, -0.0446384958922863, -0.026216179132461548, -0.05095246806740761, -0.07344809174537659, -0.054688967764377594, -0.0654587522149086, -0.0213745329529047, 0.10743211954832077, -0.02214401587843895, 0.06278945505619049],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:get_public_transportation_routes:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "get_public_transportation_routes",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get travel advice for a specific destination",
    "embedding": [0.12486357241868973, -0.04381242394447327, -0.04291714355349541, -0.012759678065776825, 0.04891858622431755, -0.05045352876186371, 0.08012383431196213, 0.07545922696590424, -0.06264223158359528, -0.03909703344106674, 0.01781870424747467, -0.026148755103349686, -0.07205410301685333, 0.060743074864149094, -0.015695365145802498, -0.0025185951963067055, 0.10924233496189117, 0.028601692989468575, 0.038582149893045425, -0.03802967816591263, 0.0336107574403286, 0.047377411276102066, -0.049834899604320526, 0.052967969328165054, 0.006019495893269777, 0.08317583054304123, 0.04943759739398956, 0.030344344675540924, -0.04778137430548668, -0.04346131160855293, -0.03071284107863903, 0.04458443447947502, -0.062340427190065384, -0.04110473394393921, 0.052583176642656326, 0.08847744017839432, -0.07611899822950363, 0.048545900732278824, -0.006950289476662874, 0.026042107492685318, 0.04904722422361374, -0.06036074087023735, 0.08896122127771378, 0.012210511602461338, -0.0005471313488669693, -0.06092485040426254, 0.04851064831018448, 0.028947658836841583, 0.03762522339820862, 0.029970424249768257, -0.07245060056447983, -0.05393250659108162, -0.02302742563188076, -0.11119968444108963, 0.09948120266199112, -0.019624553620815277, -0.008512776345014572, -0.02061563916504383, -0.02113489620387554, 0.03874087706208229, 0.011444763280451298, -0.0861174464225769, 0.0715819001197815, -0.02430660091340542, -0.01747034676373005, 0.08703896403312683, 0.010014253668487072, 0.1306258887052536, -0.002288153627887368, -0.0423034131526947, -0.030761340633034706, 0.022579682990908623, -0.09044487029314041, 0.05221658945083618, 0.021805711090564728, -0.009285527281463146, -0.020885610952973366, 0.009610841982066631, 0.00649747159332037, 0.00012915061961393803, -0.013321425765752792, -0.04436865448951721, -0.04696156084537506, -0.014772831462323666, 0.03657061234116554, -0.0710555762052536, 0.032737355679273605, -0.0029376503080129623, 0.08398470282554626, 0.03869514539837837, 0.03322989493608475, -0.011751299723982811, -0.04975626617670059, 0.05487537756562233, 0.023970220237970352, 0.0630020946264267, -0.06172396242618561, -0.05475742369890213, -0.0074349697679281235, 0.0894334688782692, 0.05069771036505699, -0.022312168031930923, 0.032283805310726166, 0.012119037099182606, -0.025577181950211525, -0.028711525723338127, -0.014054814353585243, 0.03753259405493736, 0.07857684791088104, 0.04273524507880211, -0.07446501404047012, 0.09364442527294159, -0.06218423694372177, -0.08455051481723785, -0.010033144615590572, -0.03428102284669876, 0.028533609583973885, 0.017912432551383972, 0.006996753625571728, -0.026453031226992607, -0.006207782309502363, -0.08930716663599014, 0.011635076254606247, -0.007410017773509026, -0.057985737919807434, -0.03891461342573166, 0.007586619816720486, -0.07183694839477539, -0.015275910496711731, 0.05313815176486969, 0.11416874080896378, 0.10617741197347641, -0.026921169832348824, 0.047153178602457047, -0.11203626543283463, -0.06067147105932236, -0.03103390894830227, -0.024687504395842552, 0.06576088070869446, 0.013842273503541946, 0.09544053673744202, -0.0022218648809939623, 0.04928654432296753, 0.01133725792169571, 0.06372001767158508, -0.00858223345130682, -0.006669093854725361, -0.028903773054480553, 0.0173325352370739, -0.052144844084978104, 0.002472429070621729, -0.08367612957954407, -0.010168476030230522, -0.06387761235237122, -0.02817683108150959, -0.009882930666208267, 0.05853090062737465, 0.00486788060516119, -0.03908948972821236, 0.07762376964092255, 0.02961040288209915, -0.0477609857916832, 0.07123757153749466, 0.04565801844000816, -0.05280495062470436, 0.024137813597917557, -0.0522487498819828, -0.019955579191446304, -0.0770130529999733, -0.0021301433444023132, -0.045657940208911896, 0.05579110234975815, 0.06140569970011711, 0.03577502816915512, -0.029388636350631714, 0.040937427431344986, -0.02808736078441143, 0.06734015792608261, -0.08529125154018402, -0.05974511802196503, 0.04774065688252449, -0.014416446909308434, -0.023170333355665207, 0.024937264621257782, 0.026998860761523247, 0.030153634026646614, 0.0406087189912796, -0.10925964266061783, 0.060812439769506454, 0.018723858520388603, 0.021693918853998184, -0.07115644961595535, 0.05815160647034645, 0.033691540360450745, 0.030848428606987, -0.010422296822071075, -0.019791020080447197, 0.028993433341383934, -0.008426891639828682, 0.012218449264764786, -0.001901900628581643, -0.021044012159109116, 0.002304507652297616, -0.019824344664812088, -0.08223062008619308, -0.026895007118582726, 0.0033123097382485867, -0.030261825770139694, -0.04566377401351929, 0.07668803632259369, 0.0009706530254334211, 0.06408338248729706, 0.054595138877630234, -0.016237568110227585, 0.0556698776781559, -0.08044295758008957, 0.004449871368706226, -0.014716001227498055, -0.0449889674782753, 0.01634654588997364, -0.032954953610897064, -0.04920576885342598, -0.04589676484465599, 5.3592866609621104e-33, 0.035380471497774124, -0.0376315712928772, 0.0664585530757904, -0.027917854487895966, 0.0485299713909626, -0.011937050148844719, 0.033922694623470306, -0.06652026623487473, 0.09192958474159241, 0.07565201073884964, -0.14943456649780273, -0.007018869277089834, 0.1498517543077469, 0.022328445687890053, 0.012977372854948044, 0.0014042241964489222, 0.05330364406108856, -0.009451150894165039, -0.046049702912569046, 0.05242033675312996, 0.01657162420451641, 0.015223669819533825, -0.14629392325878143, -0.059134505689144135, 0.07862197607755661, 0.06612254679203033, -0.010903049260377884, -0.1082252636551857, -0.043690573424100876, -0.007542935200035572, 0.00724039226770401, 0.07104877382516861, 0.012917370535433292, 0.03535759821534157, -0.07368350028991699, 0.05321059376001358, 0.016136836260557175, 0.0006442052545025945, 0.048654042184352875, 0.11742957681417465, 0.07379981875419617, 0.021767353639006615, 0.1030217707157135, 0.04130367562174797, -0.0075496891513466835, -0.037295322865247726, -0.01754533313214779, -0.0033995576668530703, 0.03980453684926033, -0.009437527507543564, 0.045036058872938156, 0.02948545664548874, -0.010203965939581394, 0.02955673076212406, -0.009667136706411839, 0.015947487205266953, -0.04391228407621384, -0.04481549188494682, -0.0013066394021734595, -0.0360274463891983, -0.059657372534275055, -0.0365150161087513, 0.04247085750102997, -0.06952481716871262, -0.11218182742595673, 0.02429153583943844, 0.009338215924799442, 0.03229588642716408, -0.026778394356369972, -0.025498615577816963, -0.04876180738210678, 0.016870906576514244, -0.06356926262378693, 0.005693764891475439, 0.017752811312675476, 0.04180043190717697, 0.16091662645339966, 0.05718924477696419, -0.09111563861370087, 0.029467599466443062, -0.011259609833359718, 0.03320765122771263, -0.0570218563079834, 0.0038569997996091843, 0.038647331297397614, 0.057596705853939056, 0.002642369829118252, -0.09036793559789658, -0.02034914121031761, 0.062174033373594284, -0.05941261351108551, -0.06671435385942459, -0.040120188146829605, -0.057920679450035095, -0.03373768925666809, 1.9183424222262657e-32, -0.02046838030219078, -0.026341412216424942, -0.033982858061790466, 0.0716543197631836, -0.03912152349948883, -0.0066387709230184555, -0.030089430510997772, 0.025819897651672363, -0.026161273941397667, 0.05110795423388481, -0.04161062836647034, 0.020240621641278267, -0.04467100650072098, 0.04451934993267059, -0.012724044732749462, -0.025801416486501694, 0.040331874042749405, 0.04691413417458534, 0.005308249033987522, -0.02753988839685917, -0.007307080086320639, 0.03455524519085884, 0.017692826688289642, 0.0116047952324152, 0.059797536581754684, -0.028545351698994637, -0.018980080261826515, 0.020100781694054604, 0.010373757220804691, -0.02748706191778183, -0.05417726933956146, -0.047129977494478226, -0.005301935598254204, -0.002365250838920474, -0.029954301193356514, -0.10513334721326828, -0.048077356070280075, 0.014991872012615204, -0.03536069020628929, 0.07530465722084045, -0.014872172847390175, 0.06248234584927559, 0.03377896547317505, 0.026852425187826157, 0.019056951627135277, -0.07425255328416824, 0.050820060074329376, -0.057912904769182205, -0.10722211748361588, 0.03693079948425293, -0.05510398745536804, -0.07100861519575119, 0.0562606044113636, 0.030174734070897102, -0.014262296259403229, -0.02533150091767311, -0.07867033779621124, -0.060655295848846436, -0.000817095919046551, 0.03679811954498291, -0.03459382429718971, 0.015064531937241554, -0.1184290200471878, 0.02877824380993843],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:get_travel_advice:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "get_travel_advice",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Get the weather forecast for a travel destination",
    "embedding": [0.060100018978118896, -0.031325288116931915, 0.005567456129938364, 0.06654155254364014, 0.08851286768913269, -0.024501372128725052, 0.010934153571724892, 0.03580116853117943, 0.016223540529608727, -0.04721826687455177, -0.0725911483168602, -0.02087528258562088, -0.04907061904668808, 0.003786969929933548, 0.040927398949861526, -0.06408210098743439, 0.012826534919440746, -0.002996346214786172, 0.10355133563280106, -0.007359864190220833, -0.05805705487728119, 0.03605905920267105, -0.09061960130929947, 0.02245657704770565, 0.060862816870212555, 0.10765952616930008, 0.027185624465346336, 0.07703689485788345, -0.06691832095384598, 0.08670784533023834, -0.049940478056669235, 0.012360281310975552, -0.06714463233947754, 0.004722550045698881, -0.020854732021689415, 0.006385720334947109, 0.06339068710803986, -0.04009787738323212, -0.06947467476129532, 0.039231304079294205, 0.1259831041097641, 0.02111954800784588, -0.0021742137614637613, -0.0032649608328938484, 0.012576205655932426, -0.0024538999423384666, 0.010302523151040077, 0.018911708146333694, -0.0025889298412948847, 0.042306672781705856, -0.0447140634059906, 0.011973024345934391, -0.07405219972133636, -0.059906166046857834, 0.07755224406719208, -0.0018601648043841124, -0.08043885976076126, -0.06646435707807541, 0.020520934835076332, 0.02700687199831009, -0.032981570810079575, -0.07202360033988953, -0.010369226336479187, 0.018068332225084305, 0.011132637970149517, 0.09488093852996826, 0.02794474922120571, 0.12079890817403793, -0.06429074704647064, -0.1128031313419342, -0.03834187239408493, 0.07409576326608658, 0.015295597724616528, -0.004012139048427343, 0.030150488018989563, -0.03810468688607216, 0.02662164531648159, -0.02011900767683983, -0.003210560418665409, 0.018331045284867287, 0.03313647210597992, -0.0582895427942276, 0.022557590156793594, 0.008304308168590069, 0.07051552832126617, -0.007741694804280996, -0.016436753794550896, 0.0030216071754693985, 0.077208511531353, -0.033281076699495316, 0.08434340357780457, -0.03969891741871834, -0.03180759772658348, 0.07577958703041077, -0.03143000602722168, 0.06798645108938217, 0.0011639903532341123, -0.03509994596242905, 0.022404341027140617, 0.00799483247101307, 0.003019153606146574, -0.03272950276732445, 0.0725632980465889, 0.05556798353791237, -0.03870972618460655, -0.03296082466840744, -0.011398647911846638, -0.010155566968023777, 0.044098131358623505, -0.013007104396820068, -0.053306832909584045, -0.03752394765615463, -0.01111892145127058, -0.026952680200338364, 0.041442979127168655, -0.052063316106796265, -0.02654942311346531, 0.07388178259134293, -0.07154645025730133, -0.012529348954558372, -0.019811412319540977, -0.06626918911933899, 0.026728609576821327, 0.04520580172538757, -0.0667012482881546, 0.013616915792226791, 0.12060032784938812, -0.07290521264076233, 0.0553831122815609, 0.02792614884674549, 0.07625192403793335, 0.09286871552467346, 0.02746928483247757, 0.047328270971775055, -0.10724297165870667, -0.015311548486351967, 0.022228645160794258, -0.048007674515247345, 0.016301436349749565, 0.06783245503902435, 0.05768212676048279, -0.05023796483874321, 0.004047367721796036, 0.013452590443193913, 0.08509277552366257, 0.013093137182295322, -0.01631396822631359, -0.03111235797405243, -0.04952046275138855, -0.011866715736687183, 0.018705150112509727, -0.12836892902851105, -0.03480232134461403, -0.04972491040825844, 0.05204038321971893, -0.017012761905789375, 0.0477030985057354, 0.050789929926395416, 0.008946981281042099, 0.02709396369755268, 0.030574291944503784, 0.006173237226903439, 0.037827569991350174, -0.0349174365401268, -0.05457203835248947, 0.044828105717897415, -0.028723208233714104, 0.025997718796133995, 0.02869090810418129, -0.03380537033081055, -0.07953672111034393, 0.014202533289790154, 0.009582595899701118, -0.034363191574811935, -0.00822092592716217, 0.036935482174158096, -0.0038717591669410467, 0.03540835157036781, -0.030913220718503, -0.05103456601500511, -0.0169383492320776, -0.016124388203024864, 0.019615117460489273, 0.06307212263345718, 0.09655458480119705, -0.07003108412027359, 0.04084504023194313, -0.05557725951075554, 0.047795459628105164, 0.02130190096795559, 0.018577689304947853, -0.08448299020528793, 0.07648717612028122, 0.06019607558846474, -0.008557243272662163, 0.02454547956585884, -0.08689747005701065, 0.022139983251690865, 0.05392036586999893, -0.010993347503244877, -0.017361005768179893, 0.024808580055832863, -0.02556195855140686, -0.008398853242397308, -0.04968306049704552, -0.0654267892241478, 0.009145873598754406, 0.06989385187625885, -0.08706385642290115, 0.020879536867141724, 0.009602089412510395, 0.006952281109988689, 0.035667646676301956, 0.009258472360670567, 0.033148519694805145, 0.04543827846646309, 0.035231947898864746, -0.0013581011444330215, -0.029106423258781433, 0.00923994928598404, -0.07916470617055893, 0.005716357380151749, -0.024912582710385323, 5.9390334952899546e-33, 0.0503547303378582, -0.010069286450743675, -0.01758025959134102, -0.03983643651008606, -0.02220967598259449, -0.04864402860403061, -0.0007803823100402951, -0.015351837500929832, 0.0546908937394619, 0.051094334572553635, -0.1339716911315918, -0.042478978633880615, 0.06752560287714005, -0.01396029070019722, 0.02358340471982956, 0.014314891770482063, 0.03672243654727936, 0.023163869976997375, -0.06958621740341187, 0.02887818031013012, -0.0019173274049535394, -0.010451111942529678, -0.1372806578874588, -0.06434811651706696, 0.03201545029878616, -0.023772716522216797, 0.04330522194504738, -0.013725589960813522, -0.040728453546762466, -0.0368957482278347, -0.06507140398025513, 0.030136022716760635, -0.04791136831045151, 0.07394182682037354, -0.08497399836778641, 0.07542984187602997, 0.02951403148472309, -0.0026912186294794083, -0.05405652895569801, 0.0644664615392685, 0.05076874420046806, -0.02384920045733452, 0.05343889817595482, 0.014057034626603127, 0.06675632297992706, -0.012074165046215057, 0.02759234607219696, 0.05654425919055939, -0.01167054008692503, -0.025528836995363235, 0.10189776122570038, 0.003353176871314645, -0.0675603449344635, 0.07506869733333588, 0.01890186034142971, -0.01706817001104355, -0.02437746152281761, -0.04192262142896652, -0.005634167697280645, 0.08813446015119553, -0.042282700538635254, -0.07807603478431702, 0.0629720538854599, -0.03422680124640465, -0.08956894278526306, 0.025224873796105385, 0.020732101052999496, -0.026689153164625168, 0.05278358608484268, -0.00897216983139515, 0.0268621277064085, -0.003004526486620307, -0.047792281955480576, 0.07240723073482513, -0.00542692095041275, 0.01585502177476883, 0.07132221758365631, 0.089190274477005, -0.07963811606168747, 0.09503605961799622, -0.02188250981271267, 0.026228735223412514, -0.06282133609056473, 0.03996121510863304, 0.030876697972416878, -0.019564351066946983, 0.08234106004238129, -0.1129155308008194, -0.015843013301491737, 0.03709399700164795, -0.040742479264736176, 0.06569162756204605, -0.08926763385534286, 0.0009924477199092507, -0.008736900053918362, 1.906482492378835e-33, -0.011050790548324585, 0.0004651659110095352, -0.01792139746248722, 0.02997492253780365, -0.04291877523064613, -0.002150889951735735, 0.03947708383202553, 0.016076715663075447, 0.05780677869915962, 0.001543588936328888, -0.030715180560946465, -0.03135176748037338, -0.02514338120818138, 0.07396620512008667, -0.08249137550592422, 0.014603427611291409, 0.030892103910446167, 0.038854341953992844, 0.01716797426342964, -0.03597695752978325, 0.03941452130675316, 0.03573877364397049, -0.014225853607058525, 0.012299484573304653, 0.16535064578056335, -0.020813822746276855, -0.07402696460485458, -0.03019198216497898, 0.006654505152255297, 0.11383375525474548, -0.11980972439050674, -0.037403859198093414, 0.0026286724023520947, -0.03071819245815277, -0.06476860493421555, -0.04845496267080307, 0.0006215194007381797, 0.025360897183418274, -0.02904937043786049, 0.09748416393995285, 0.0453026182949543, 0.11122769117355347, -0.019562596455216408, 0.002504727803170681, 0.010906398296356201, -0.0088352020829916, 0.009367077611386776, -0.07356634736061096, 0.018157396465539932, 0.060540907084941864, -0.02218676172196865, -0.10917115956544876, 0.10941468924283981, 0.0021529037039726973, -0.08205445110797882, -0.08005236834287643, -0.0521497018635273, -0.07191743701696396, 0.01460785698145628, -0.047645535320043564, -0.09508149325847626, -0.013044945895671844, -0.1046760305762291, 0.034266289323568344],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:get_weather_forecast:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "get_weather_forecast",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Organize all of your travel documents.",
    "embedding": [0.042376719415187836, 0.05753108114004135, 0.038176052272319794, -0.0007182459230534732, 0.05810165032744408, -0.03063572198152542, -0.00458581792190671, -0.006838233210146427, -0.04296644404530525, -0.024561425670981407, -0.007335960865020752, 0.0621505081653595, -0.010027274489402771, 0.029381874948740005, -0.01403126586228609, -0.014298145659267902, -0.03447238355875015, -0.038858216255903244, -0.03134214133024216, -0.021477416157722473, -0.0039448547177016735, 0.024348540231585503, -0.05807020142674446, 0.05136170983314514, 0.05091535672545433, 0.16743475198745728, -0.06552082300186157, -0.011248691938817501, -0.02295597456395626, -0.09061524271965027, -0.04578493908047676, 0.010472487658262253, 0.008751954883337021, 0.022342190146446228, 0.06224672496318817, 0.04425539821386337, 0.007093843538314104, 0.02176661044359207, 0.05345885083079338, -0.029285917058587074, 0.011400080285966396, -0.007777625694870949, 0.11260993033647537, -0.007452572230249643, 0.02913472056388855, -0.060930151492357254, 0.041221149265766144, 0.017602788284420967, 0.026721226051449776, 0.0031276587396860123, 0.016869783401489258, -0.06413895636796951, -0.05234348028898239, 0.015316507779061794, 0.01969726011157036, -0.04504881054162979, 0.002283994108438492, 0.005636239890009165, -0.06626538932323456, -0.03374690189957619, 0.015230686403810978, -0.0029182902071624994, 0.02737136371433735, 0.06147697567939758, -0.04678759723901749, 0.06123051047325134, -0.00017905101412907243, 0.1616712510585785, -0.005564708728343248, 0.005519523285329342, -0.04767381772398949, -0.009118315763771534, -0.06231675669550896, 0.09437979757785797, 0.08206573873758316, -0.06613068282604218, -0.04986535385251045, 0.033548079431056976, 0.028812162578105927, 0.059089191257953644, -0.03265605866909027, -0.002335173776373267, -0.0008167392807081342, 0.005664624273777008, 0.04837479814887047, -0.04563026502728462, 0.017704756930470467, -0.05040905252099037, -0.06387187540531158, 0.00039646236109547317, 0.07347933948040009, -0.14114812016487122, 0.1080935001373291, 0.040994349867105484, -0.04326026141643524, 0.01751028560101986, -0.0055803535506129265, -0.014759735204279423, 0.06042684614658356, 0.10547903180122375, 0.043507013469934464, 0.012234114110469818, 0.05342654511332512, 0.047957535833120346, -0.10068793594837189, 0.016141023486852646, 0.013921783305704594, -0.024197308346629143, 0.05852585285902023, -0.02570216730237007, -0.0442139096558094, 0.00538976676762104, -0.04183078929781914, -0.04154382646083832, -0.04758858308196068, -0.04296959191560745, -0.05317273363471031, 0.13544534146785736, -0.02274855226278305, 0.0422837994992733, 0.0012014717794954777, -0.009989159181714058, 0.019705915823578835, 0.027806198224425316, -0.11699699610471725, -0.04571496322751045, 0.05571794882416725, -0.01928138919174671, 0.034378934651613235, 0.058463048189878464, 0.00023081294784788042, 0.1833161562681198, 0.017984339967370033, -0.02201547659933567, -0.06243281066417694, 0.005373711697757244, -0.015512296929955482, -0.02013433165848255, 0.08254317939281464, 0.09756013751029968, 0.02598467841744423, 0.07467852532863617, 0.009591049514710903, 0.027569936588406563, 0.05322367325425148, 0.04461744800209999, 0.044158726930618286, -0.03014841489493847, 0.001982524525374174, -0.09736105054616928, 0.0004266659670975059, -0.03014865331351757, 0.0875593051314354, -0.025903906673192978, -0.038000717759132385, -0.047430265694856644, 0.05982302129268646, -0.03544443100690842, -0.03193828836083412, 0.033716585487127304, -0.0374060720205307, -0.014494173228740692, 0.042957037687301636, 0.07307777553796768, -0.08095015585422516, -0.00023899725056253374, -0.0007712295628152788, -0.05826438218355179, -0.1533724069595337, -0.04352736473083496, 0.029699666425585747, -0.022626658901572227, 0.04399418830871582, 0.04147707298398018, 0.044298820197582245, 0.0524715818464756, 0.014695936813950539, 0.11536059528589249, -0.11136249452829361, -0.13622750341892242, -0.03295787051320076, -0.07779135555028915, -0.04371984675526619, -0.04923180863261223, 0.014026577584445477, -0.01907704584300518, -0.048741333186626434, -0.05269192159175873, 0.08108047395944595, -0.010078568011522293, 0.020647117868065834, 0.002713223686441779, 0.03485885635018349, -0.008143664337694645, 0.01909797638654709, -0.00407704571262002, -0.023645207285881042, 0.012719806283712387, -0.02720412239432335, 0.061800193041563034, -0.06704714149236679, 0.020117873325943947, -0.056339215487241745, 0.010335700586438179, 0.04412835091352463, -0.0806916356086731, -0.05645204335451126, -0.05062902718782425, -0.07787378132343292, 0.06140593811869621, 0.03919641673564911, 0.06660278886556625, 0.1144099161028862, -0.009311138652265072, 0.08151097595691681, 0.004990025889128447, 0.013676674105226994, -0.005023473873734474, 0.009008366614580154, -0.013606986962258816, 0.1126091331243515, -0.03950963541865349, -0.03230728209018707, 1.1336758637852962e-33, 0.1037713885307312, -0.0020104101859033108, 0.06829377263784409, 0.04268380254507065, 0.028190268203616142, -0.020551860332489014, 0.06578279286623001, -0.013523845002055168, 0.016427742317318916, -0.006172761786729097, -0.08177106827497482, -0.01919441483914852, 0.08198288828134537, -0.022251926362514496, -0.02760300226509571, 0.011249176226556301, 0.1265932023525238, -0.03802061453461647, -0.015757368877530098, 0.021071642637252808, -0.030387569218873978, 0.024232560768723488, 0.0009624805534258485, 0.0523383654654026, -0.003985418472439051, 0.02600674517452717, -0.006924123503267765, -0.10200709104537964, -0.014610080048441887, 0.028157435357570648, -0.01689617708325386, -0.029646234586834908, -0.07005749642848969, -0.020282544195652008, -0.06629673391580582, -0.04043582081794739, -0.012176575139164925, 0.007032492663711309, -0.0061175888404250145, 0.05939599499106407, 0.024492958560585976, 0.01513586100190878, -0.009162685833871365, 0.04024921730160713, 0.06702359020709991, -0.01988551765680313, -0.038827184587717056, 0.018419144675135612, -0.035233382135629654, -0.02557460591197014, -0.04006235674023628, 0.018421027809381485, -0.01973981410264969, -0.049317866563797, -0.022717678919434547, 0.03381011262536049, -0.017718452960252762, -0.1408698558807373, 0.06564231961965561, -0.04547920450568199, -0.03333088383078575, 0.014608505181968212, 0.05334094166755676, 0.041188277304172516, -0.007003025617450476, -0.07681503146886826, 0.022673295810818672, 0.002746359445154667, -0.07823115587234497, -0.06375778466463089, -0.08041419088840485, -0.06450239568948746, -0.08598099648952484, -0.007052709348499775, -0.004250500351190567, -0.006413871422410011, 0.09354972094297409, 0.021769756451249123, -0.06643223762512207, 0.055097468197345734, 0.024397537112236023, 0.006577434483915567, -0.023712875321507454, -0.030455028638243675, 0.018398385494947433, 0.016050370410084724, 0.003249289933592081, -0.07701579481363297, 0.0249851793050766, -0.03539641946554184, -0.07277218252420425, -0.014161628670990467, 0.06772799044847488, 0.019344020634889603, 0.004026375245302916, 1.3162843377778299e-32, -0.01873364858329296, -0.038144487887620926, 0.00981405284255743, -0.01548840943723917, 0.022070035338401794, -0.0600869357585907, 0.04976683482527733, 0.1105286180973053, -0.0047997706569731236, 0.027067672461271286, 0.013923116959631443, -0.06781231611967087, -0.053466569632291794, -0.014112287200987339, 0.044149741530418396, 0.12829667329788208, 0.04125393182039261, 0.019418856129050255, -0.027710609138011932, 0.028408056125044823, 0.033787455409765244, 0.04707077145576477, 0.028275206685066223, -0.0415293425321579, 0.0569956935942173, -0.01541163306683302, 0.021290846168994904, -0.023173516616225243, 0.025468027219176292, 0.003598983632400632, -0.07047511637210846, -0.04256141930818558, -0.003512920346111059, 0.018364770337939262, -0.038437098264694214, -0.055811792612075806, -0.002091087168082595, -0.014171510003507137, -0.036237090826034546, -0.01096071396023035, -0.014013838954269886, 0.021135829389095306, 0.029470739886164665, 0.01491064764559269, -0.04975036159157753, -0.0311064962297678, -0.0020993102807551622, -0.03258242458105087, -0.062436558306217194, -0.02471293695271015, -0.13246449828147888, -0.06372076272964478, 0.07921888679265976, 0.027239207178354263, 0.03195975720882416, 0.09840873628854752, -0.043614037334918976, -0.03497586026787758, 0.01235276460647583, -0.001422347966581583, -0.01842251606285572, -0.0888768658041954, -0.07506055384874344, -0.017868733033537865],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:organize_travel_documents:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "organize_travel_documents",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Search for the best flight deals.",
    "embedding": [0.11607301235198975, -0.02217414230108261, 0.009360155090689659, 0.0020957167726010084, 0.02253872901201248, -0.00018383562564849854, -0.016021769493818283, 0.06456106901168823, -0.012010340578854084, -0.05337122827768326, 0.03174128010869026, 0.012337910011410713, -0.09895899146795273, 0.10156244784593582, 0.018678933382034302, 0.06156497448682785, 0.08481541275978088, -0.02772587165236473, 0.02889888361096382, -0.037639934569597244, 0.05132012441754341, -0.013239585794508457, -0.0368262454867363, 0.02455243095755577, 0.057902123779058456, -0.006896400824189186, -0.018245775252580643, -0.010359127074480057, 0.0315973125398159, -0.00710035627707839, -0.012646101415157318, 0.06691793352365494, 0.04549013823270798, -0.007081519812345505, 0.023720839992165565, 0.002387802815064788, -0.016366371884942055, 0.03567979857325554, 0.02436096780002117, -0.02083943784236908, 0.06454019993543625, 0.022349335253238678, -0.02775309979915619, 0.025370722636580467, 0.02150161750614643, 0.017283909022808075, 0.04244384914636612, 0.04425155743956566, 0.09985189139842987, 0.056209176778793335, 0.003652735147625208, -0.04627479612827301, -0.05720816180109978, -0.041175369173288345, 0.030559206381440163, -0.041855745017528534, -0.08098093420267105, -0.08038997650146484, -0.03806961700320244, -0.11568254977464676, -0.06627049297094345, -0.07389767467975616, 0.009047228842973709, 0.060589104890823364, -0.02041652984917164, 0.0038420797791332006, -0.06023435294628143, 0.03121643140912056, 0.006115281488746405, -0.0733751729130745, 0.005257285665720701, -0.052954260259866714, -0.12738732993602753, 0.07851449400186539, 0.020016921684145927, 0.041844263672828674, 0.07321241497993469, -0.07544080913066864, 0.059854574501514435, 0.03458625078201294, 0.060100991278886795, -0.06540384888648987, -0.020197691395878792, 0.04697613790631294, 0.027554098516702652, -0.03880173712968826, -0.0007401141338050365, -0.033931832760572433, 0.03902003541588783, 0.007187020964920521, 0.007173479069024324, -0.06868482381105423, -0.053955379873514175, 0.07963857799768448, -0.08935123682022095, 0.05798976495862007, -0.026848332956433296, -0.0508485771715641, 0.057603202760219574, 0.12721751630306244, 0.10892394930124283, 0.020174561068415642, 0.07421065866947174, -0.026172559708356857, -0.068879634141922, -0.06086042895913124, 0.014684912748634815, 0.012127607129514217, 0.05005214735865593, -0.08290518075227737, -0.120819590985775, 0.07221143692731857, 0.010628475807607174, -0.09822322428226471, -0.08262153714895248, 0.041860729455947876, -0.020028159022331238, 0.03681154549121857, 0.03175666928291321, -0.024357499554753304, -0.00977384764701128, -0.04797657951712608, 0.0700998604297638, 0.04197533428668976, -0.05393502488732338, -0.07637868821620941, 0.05771755427122116, -0.055569540709257126, -0.004079773556441069, -0.06566037982702255, 0.022658713161945343, 0.05984172224998474, -0.04022463038563728, -0.0068038529716432095, -0.047033991664648056, 0.013392210938036442, -0.025412913411855698, 0.026992931962013245, -0.0773310661315918, -0.03995809704065323, -0.00179504684638232, -0.02534465491771698, 0.07586021721363068, -0.009135238826274872, 0.029114024713635445, -0.003574846778064966, -0.043689243495464325, -0.05607917532324791, -0.07020452618598938, -0.08395165205001831, 0.013501478359103203, -0.031692635267972946, 0.03849940747022629, -0.03952142968773842, -0.05102425441145897, -0.04384850710630417, 0.1405707597732544, 0.02438421919941902, -0.013817301020026207, 0.1079917922616005, 0.018588079139590263, 0.01461623515933752, -0.022312456741929054, 0.038907602429389954, -0.10324185341596603, 0.01643381267786026, -0.0036411865148693323, -0.01584380865097046, -0.1007971242070198, 0.04853209853172302, -0.09960351139307022, 0.0551244355738163, 0.02064608968794346, -0.003677484579384327, -0.014054175466299057, 0.06356034427881241, 0.017555363476276398, 0.05702105909585953, -0.060271985828876495, -0.013124944642186165, -0.042183876037597656, -0.06915522366762161, -0.025516582652926445, -0.0025942653883248568, 0.019491208717226982, -0.009088844060897827, 0.037014782428741455, 0.03556947782635689, 0.02746940590441227, -0.08875678479671478, -0.009185144677758217, -0.06889671087265015, 0.00012518916628323495, 0.04474234953522682, 0.07289724051952362, -0.013658235780894756, -0.057453546673059464, 0.010079292580485344, 0.015102614648640156, 0.007513758260756731, 0.00845829863101244, -0.008435520343482494, -0.05071680247783661, 0.015364327467978, 0.025335486978292465, 0.047645095735788345, 0.00022286140301730484, -0.04613093286752701, 0.06522975116968155, 0.06894396245479584, 0.0824967697262764, 0.13063295185565948, 0.08201567083597183, -0.04345462843775749, 0.0525062121450901, -0.05088885873556137, -0.011977989226579666, -0.08024518191814423, -0.11681829392910004, 0.0045723337680101395, -0.0507868193089962, -0.05889933556318283, 0.0180925615131855, -2.648637187419721e-34, 0.04313060641288757, -0.06160677969455719, -0.012594431638717651, 0.03854448348283768, 0.012256464920938015, -0.019302602857351303, -0.0010385556379333138, -0.03094075247645378, 0.0781397670507431, 0.06913932412862778, -0.09622859954833984, 0.04343798756599426, 0.047075867652893066, 0.04053286835551262, 0.0342782586812973, -0.09946181625127792, -0.0016413931734859943, 0.04847835376858711, 0.007398610003292561, -0.04066331312060356, 0.04877454414963722, 0.044944312423467636, -0.12480512261390686, -0.007510300725698471, -0.017909619957208633, -0.001689158147200942, 0.009233539924025536, -0.042453981935977936, -0.04074526205658913, -0.09111292660236359, -0.07129931449890137, 0.032754410058259964, -0.0013777926797047257, 0.08965639024972916, -0.05156329274177551, 0.00512887304648757, -0.006231121253222227, 0.04371148720383644, -0.0007905279053375125, -0.006510665640234947, 0.008376805111765862, 0.07190239429473877, 0.0007872958085499704, 0.011492830701172352, 0.06748763471841812, 0.000756928464397788, -0.009727232158184052, -0.003220741404220462, 0.04480962082743645, -0.024376314133405685, 0.01723206788301468, 0.098352812230587, -0.007786527741700411, 0.033495400100946426, 0.01885591633617878, 0.03300870954990387, -0.024400444701313972, -0.043472204357385635, 0.04981091991066933, 0.011686967685818672, -0.020343488082289696, -0.09369408339262009, 0.033682096749544144, 0.05153883248567581, -0.05325410142540932, 0.09195439517498016, 0.06761472672224045, -0.01861034333705902, 0.0074539813213050365, 0.05063953995704651, -0.09773896634578705, -0.07493312656879425, 0.035755619406700134, 0.012154833413660526, -0.03011014498770237, -0.0005904527497477829, 0.08196461200714111, 0.11165520548820496, -0.01565471850335598, 0.08551733940839767, 0.03181133419275284, 0.012853522785007954, -0.03980639949440956, -0.018631083890795708, -0.0016160104423761368, 0.09454847127199173, -0.03489521145820618, -0.055518023669719696, -0.09509550034999847, -0.04544586315751076, -0.059257637709379196, -0.03165706247091293, 0.05012357234954834, 0.018485434353351593, 0.021543217822909355, 1.575649672510281e-32, 0.022679930552840233, 0.0030555862467736006, -0.027661073952913284, 0.028481144458055496, 0.06208857521414757, -0.021688193082809448, -0.060931574553251266, 0.029094630852341652, -0.04028763994574547, -0.06886410713195801, 0.014673970639705658, -0.0261444803327322, -0.08868767321109772, 0.00043953757267445326, 0.017402056604623795, -0.030581196770071983, -0.00843225046992302, 0.03113611973822117, -0.00923757441341877, 0.018406767398118973, -0.0782024934887886, 0.12858963012695312, 0.019152777269482613, -0.030509889125823975, 0.0034193824976682663, 0.023780224844813347, -0.027380194514989853, -0.07015833258628845, 0.09204341471195221, 0.056113023310899734, -0.10920107364654541, 0.013091372326016426, 0.01673947460949421, -0.031541213393211365, 0.05675942450761795, 0.014595407992601395, -0.06919443607330322, 0.021388135850429535, -0.058867402374744415, 0.05089530348777771, 0.03788667544722557, 0.010068739764392376, -0.029911592602729797, -0.04235056787729263, 0.051483944058418274, 0.02273922972381115, 0.009432729333639145, -0.019592251628637314, 0.011857207864522934, -0.003630215534940362, 0.028384558856487274, -0.017471283674240112, 0.009640906006097794, -0.04583994671702385, 0.016155073419213295, -0.03278323635458946, -0.06882890313863754, -0.042555276304483414, 0.020325275138020515, 0.021324679255485535, 0.040914442390203476, -0.0006529234815388918, -0.10106983780860901, 0.019141752272844315],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:search_best_flight_deals:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "search_best_flight_deals",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Search for local restaurants in a given city",
    "embedding": [0.03798858821392059, -0.04657931253314018, -0.011398645117878914, 0.028581863269209862, -0.11727870255708694, -0.010034444741904736, -0.025176241993904114, -0.02002756856381893, -0.051251038908958435, -0.06834745407104492, 0.09409487992525101, -0.06950782984495163, -0.07856032252311707, -0.005058893468230963, 0.05874979496002197, -0.12231551110744476, 0.14632369577884674, 0.049912229180336, 0.0712350383400917, -0.10100103169679642, -0.06333282589912415, 0.03607771545648575, -0.08604416251182556, 0.04042530804872513, 0.06884686648845673, 0.013884332962334156, -0.008455416187644005, 0.06503164768218994, -0.02322710119187832, 0.02681448683142662, -0.0011845516273751855, 0.016377979889512062, 0.075391486287117, 0.06957433372735977, 0.08677133917808533, -0.053679753094911575, 0.041541047394275665, -0.09607864916324615, 0.03879356384277344, 0.09418432414531708, 0.064088836312294, 0.03285258263349533, 0.0307402852922678, 0.05017288401722908, -0.057107120752334595, 0.019899073988199234, 0.006964381784200668, 0.05421572923660278, 0.029962312430143356, -0.058867745101451874, -0.05166316404938698, 0.014933330938220024, -0.026293594390153885, 0.02087307535111904, 0.07827865332365036, 0.0191317368298769, -0.02416851744055748, -0.01870235987007618, 0.0041251638904213905, 0.02796079032123089, 0.017175378277897835, 0.002097264165058732, 0.00035145157016813755, -0.0202341265976429, 0.04110360145568848, -0.045091643929481506, -0.008040093816816807, 0.019837602972984314, -0.006987591739743948, -0.08105847984552383, -0.01175401359796524, 0.012289047241210938, -0.08380075544118881, 0.06028977781534195, -0.03627661243081093, -0.05597705766558647, -0.005701219197362661, -0.005631944630295038, -0.06510793417692184, 0.004034398589283228, 0.06983470171689987, 0.001456463010981679, -0.04388246312737465, 0.02258722484111786, -0.02152935415506363, 0.004767100792378187, -0.004714561626315117, -0.013570008799433708, 0.07277457416057587, 0.06828087568283081, -0.07266105711460114, 0.01179494895040989, -0.05169691890478134, -0.07453502714633942, 0.00030173800769262016, 0.0499083437025547, -0.10701973736286163, 0.0372750349342823, 0.0396420992910862, 0.05803951248526573, 0.03743164986371994, 0.048493292182683945, 0.04234529659152031, 0.0035137643571943045, 0.03303491696715355, -0.010325269773602486, -0.06813205778598785, -0.009383643046021461, 0.014523145742714405, 0.02199588157236576, -0.04777747020125389, 0.10222863405942917, -0.021912960335612297, -0.026303231716156006, -0.0178972240537405, 0.012079478241503239, 0.09219807386398315, -0.013750385493040085, -0.047331303358078, 0.022794581949710846, -0.029085854068398476, 0.05552119389176369, -0.025028444826602936, 0.0361248217523098, -0.11238245666027069, 0.005364653188735247, -0.12346675246953964, 0.03679180517792702, 0.012531748972833157, -0.03389349952340126, -0.020030038431286812, 0.012813589535653591, 0.022664248943328857, -0.00605328194797039, 0.020931020379066467, 0.0017111471388489008, 0.014398414641618729, -0.019067490473389626, 0.03770825266838074, -0.023418206721544266, 0.07054094225168228, -0.05589429661631584, 0.08667785674333572, -0.04024689644575119, 0.038941044360399246, 0.03400389477610588, -0.03478376194834709, -0.01679573766887188, -0.07450035214424133, -0.09226755797863007, 0.05349356681108475, -0.06600212305784225, 0.014718183316290379, 0.008844961412250996, 0.01748231239616871, -0.035687681287527084, 0.04563277214765549, 0.006293385289609432, 0.034845020622015, 0.025492602959275246, -0.028110381215810776, -0.009448940865695477, 0.03824713081121445, 0.01914675161242485, -0.06251923739910126, 0.020074499770998955, 0.04757014662027359, 0.005854708608239889, -0.04661426320672035, 0.08443443477153778, 0.015964241698384285, 0.01976575143635273, -0.01405165996402502, 0.030392849817872047, -0.12502096593379974, 0.02343757264316082, -0.004373557865619659, 0.01088847778737545, 0.015812166035175323, -0.03026658482849598, -0.11536779999732971, -0.003973397891968489, 0.016727672889828682, 0.06586533784866333, 0.0205925852060318, 0.01907261461019516, 0.07389093190431595, 0.0009471397497691214, 0.04412783682346344, 0.020954284816980362, 0.037408534437417984, -0.07202500849962234, 0.1737690567970276, -0.03484272211790085, 0.019794272258877754, -0.006129104644060135, 0.015538861975073814, 0.0025491761043667793, 0.06611543148756027, -0.018511343747377396, 0.05244582146406174, -0.020009174942970276, -0.020152980461716652, -0.008266212418675423, -0.021083800122141838, 0.03995581716299057, 0.07932315021753311, 0.02728915400803089, 0.02545771189033985, -0.029679926112294197, 0.016330694779753685, 0.1318606436252594, 0.05905197933316231, 0.045127466320991516, 0.06118081510066986, -0.06894279271364212, 0.019477389752864838, -0.037096455693244934, -0.13531573116779327, 0.05516596511006355, -0.021529121324419975, -0.020936904475092888, -0.09430598467588425, 2.5272114678801597e-33, 0.03810882568359375, -0.11672009527683258, 0.040219176560640335, -0.04627494141459465, -0.03137696906924248, -0.06306066364049911, 0.013238264247775078, -0.10910075902938843, 0.06843284517526627, 0.0032345722429454327, -0.008045252412557602, -0.011064521968364716, 0.12499522417783737, 0.012493893504142761, 0.04323799908161163, 0.08456913381814957, 0.057650305330753326, 0.012783604674041271, -0.061160627752542496, 0.08952288329601288, -0.006060134619474411, 0.04106536880135536, -0.07108079642057419, 0.07455966621637344, -0.015873143449425697, 0.09021971374750137, 0.026237763464450836, -0.003114782739430666, -0.0968853235244751, -0.04624730721116066, -0.03581941872835159, -0.0535394586622715, 0.025609862059354782, 0.00498366029933095, -0.07772046327590942, 0.07448533922433853, 0.039895519614219666, -0.02744099125266075, -0.024456815794110298, 0.05736246332526207, 0.06550996005535126, -0.04236988723278046, 0.005749281961470842, 0.02324545383453369, -0.040361255407333374, 0.06361345946788788, 0.04165089130401611, -0.06416277587413788, 0.006850718054920435, -0.04963531345129013, 0.09103064984083176, 0.008770512416958809, -0.04199932515621185, 0.03139127045869827, -0.023646874353289604, 0.0504007451236248, -0.0564042329788208, 0.0633593276143074, 0.010842778719961643, -0.07791389524936676, -0.005618361756205559, -0.012543811462819576, -0.023740502074360847, 0.01565099135041237, -0.028686964884400368, -0.0024850904010236263, 0.07517240941524506, 0.04360757768154144, 0.03574834764003754, -0.060180261731147766, 0.04275023192167282, 0.03869565576314926, -0.009975571185350418, -0.014981826767325401, -0.08803720772266388, 0.05322103574872017, 0.0511661022901535, 0.031723640859127045, -0.01686679571866989, -0.008820060640573502, -0.06332917511463165, 0.015601511113345623, 0.008308461867272854, -0.014032772742211819, -0.06887346506118774, 0.08366227149963379, -0.006352612283080816, 0.03243282064795494, -0.020307427272200584, 0.02346501685678959, -0.02072090096771717, -0.04586181789636612, 0.08214795589447021, -0.06601797044277191, -0.0301413144916296, 1.8504036976629346e-32, -0.0035608618054538965, -0.01604892499744892, -0.05440225079655647, 0.12029891461133957, 0.01734667457640171, -0.0756860300898552, -0.01202625036239624, 0.0007735376129858196, 0.030884742736816406, 0.01257789321243763, -0.06269526481628418, 0.046107977628707886, -0.09636679291725159, -0.04025663435459137, -0.08885634690523148, -0.026604101061820984, 0.03966347500681877, -0.001278274110518396, -0.005171555560082197, -0.015200342051684856, 0.04664876312017441, 0.004452756140381098, -0.029031936079263687, -0.05804820358753204, 0.012389388866722584, -0.04580169543623924, -0.062472447752952576, 0.014733867719769478, 0.03439332917332649, 0.028108792379498482, -0.023254849016666412, -0.06833548843860626, -0.016447745263576508, 0.009837176650762558, 0.03453797101974487, -0.06668532639741898, -0.062322646379470825, 0.027753328904509544, -0.07206705212593079, -0.02573814056813717, 0.029113901779055595, -0.045985013246536255, 0.007233540061861277, -0.01571001671254635, 0.02126111276447773, -0.003967686556279659, 0.04725804179906845, -0.0449150875210762, 0.08560992777347565, 0.014445122331380844, -0.12950140237808228, 0.01338852196931839, -0.017258191481232643, -0.031729768961668015, -0.0635300874710083, -0.045066431164741516, -0.04320227727293968, -0.07119975984096527, 0.05004994943737984, -0.029045345261693, -0.007927339524030685, 0.04179103299975395, -0.08808430284261703, 0.03256402537226677],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:search_local_restaurants:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "search_local_restaurants",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "annotations":
    {},
    "contents": "import pydantic\nimport re\n\nfrom agentc_core.tool import tool\n\n\n# Tools in Agent Catalog are decorated with `@tool`.\n# Python tools, at a minimum, must contain a docstring (the string immediately below the function name line).\n@tool\ndef check_if_airport_exists(aita_code: str) -> bool:\n    \"\"\"Check if the given AITA code is valid (i.e., represents an airline).\"\"\"\n    return (\n        re.match(\n            r\"MRS|NCE|CDG|ATL|AMS|MNL|NIB|GYE|LYS|TCT|TLS|TLV|TNR|TPA|TPE|TRI|TRN|TUL|TUN|MCG|TUS|TXL|TYS|UIO|VCE|VGO|\"\n            r\"VIE|VLC|VLD|VPS|CAN|ENH|MRU|TLJ|ORY|BOD|ETZ|LHR|LIL|ALG|AAE|CZL|ORN|MLH|BJA|BLJ|BSK|QSF|TLM|DEL|EWR|BHX|\"\n            r\"JFK|ORD|BOM|SFO|NRT|EZE|LAX|DFW|HKG|ICN|MIA|PUJ|ABY|ALB|BDL|BNA|BOS|BWI|CLE|CMH|CUN|CVG|CZM|DCA|DEN|DTW|\"\n            r\"FCO|GDL|IAD|IND|JAX|LGA|MAD|MCI|MCO|MEM|MEX|MSP|MSY|MTY|PHL|PIT|PVR|RDU|RIC|SEA|SJD|SLC|STL|XNA|YUL|FAT|\"\n            r\"ONT|SJC|SMF|PHX|HMO|MZT|ZIH|ZLO|IAH|LAS|SAT|MID|SAN|BJX|MLM|CTA|LIN|PMO|LGW|ANC|ADK|ADQ|AKN|ANI|BET|BRW|\"\n            r\"CDB|CDV|DLG|ENA|FAI|HNL|HOM|JNU|KSM|OME|OTZ|PDX|SCC|SDP|SNP|STG|UNK|VDZ|BHM|CHS|CLT|GSO|HSV|JAN|ORF|PBI|\"\n            r\"PNS|RSW|SAV|LWS|ISP|PBG|PQI|YAK|SNA|HLN|GTF|BLI|OAK|KTN|PSG|SIT|WRG|ABQ|AUS|ZRH|ELP|KOA|LIH|LTO|MFR|MMH|\"\n            r\"MRY|OGG|OKC|RNO|SAF|STS|YVR|BOI|PUW|BIL|BUR|EUG|GEG|LGB|MSO|PSC|PSP|RDM|SBA|ALW|BZN|COS|EAT|FCA|FLL|OMA|\"\n            r\"YEG|YKM|YLW|YYC|YYJ|CMN|RAK|NTE|SXB|TNG|AGA|ESU|FEZ|OUD|OZZ|RBA|SJO|SAL|BOG|MDE|HAM|SAP|GUA|CGN|DUS|STR|\"\n            r\"BAQ|CLO|CTG|LIM|BRS|VRN|WAW|WUH|YYZ|ZAG|ZSE|MKE|SJU|HEL|FRA|MAN|BCN|DUB|LCY|BIA|MXP|ARN|LIS|CLY|EDI|CWL|\"\n            r\"GLA|HUY|LBA|MME|NWI|AVL|BUF|CAE|CHA|DAY|GNV|GPT|HOU|ICT|ILM|LIT|MYR|PTY|ROC|SRQ|ABJ|ABZ|BES|BIO|BKK|BLL|\"\n            r\"BLQ|BRE|CFE|CPH|DKR|DXB|EVN|FLR|GOA|GOT|HAJ|HAN|JNB|MPL|NAP|NCL|NUE|OSL|PRG|PUF|RNS|SCL|SGN|SVG|SXM|STN|\"\n            r\"AJA|FSC|MSQ|NQY|WIL|MBA|WJR|MYD|HAH|NBO|MGQ|ASV|KTL|LAU|LKG|MRE|UKA|HGA|AUA|NAS|PLS|SDQ|STI|STT|HPN|KIN|\"\n            r\"MBJ|ORH|PAP|POS|PVD|SWF|AZS|BDA|BGI|BQN|BTV|GCM|LIR|LRM|POP|PSE|PWM|SYR|UVF|STX|AAR|AAL|BMA|SKB|TAB|MCT|\"\n            r\"DOH|GSP|CNX|HKT|BGO|BRU|MUC|CNS|MLE|BNE|DUR|PLZ|BAH|CPT|ROB|VNO|HRE|LVI|VFA|WDH|AGP|GRX|IBZ|IOM|MAH|PMI|\"\n            r\"RTM|ACE|ALC|ANU|BRI|DBV|FAO|JER|LCA|MLA|OLB|PFO|PSA|SKG|SZG|TFS|TIA|ABV|ACC|ALA|AMM|ATH|AUH|BEY|BHD|BLR|\"\n            r\"BSL|BUD|CAI|CTU|DME|EBB|FNA|GIB|GIG|GRU|GVA|GYD|HND|HYD|IST|JED|JMK|JTR|KBP|KWI|LAD|LED|LOS|LUX|MAA|OPO|\"\n            r\"OTP|PEK|PVG|RUH|SIN|SOF|TIP|CUR|CMB|SYD|GND|DOM|EIS|FDF|PTP|VIJ|VQS|NEV|SSB|SPB|KOI|LSI|EXT|SOU|EMA|INV|\"\n            r\"SYY|GCI|NOC|WAT|CFN|WIC|EGC|BEB|BRR|CAL|ILY|TRE|JYV|KAJ|KEM|KOK|MHQ|NRK|SVL|TAY|LPL|DSA|LIG|LRH|DND|DAC|\"\n            r\"ZYL|DJE|MIR|TSN|CSX|DYG|XNN|CJU|CKG|HGH|HJJ|KMG|LLF|NKG|SYX|TAO|TEN|XIY|XMN|ZHA|YNT|HRB|OHE|DLC|HEK|JGD|\"\n            r\"JMU|JXA|HFE|JHG|UYN|SHE|SZX|NGB|ZUH|NNG|HET|KWL|URC|RIX|GEO|AKP|CXF|IRC|FYU|BTT|CEM|CIK|MLY|RMP|TAL|WBQ|\"\n            r\"MNT|AVN|KIX|SCU|FUE|ZTH|PHC|DMM|JRO|KGL|ABE|AEX|AGS|ATW|AVP|AZO|BMI|BON|BQK|BSB|BTR|BZE|CAK|CCS|CHO|CID|\"\n            r\"CRW|CSG|DAB|DAL|DHN|DSM|ECP|EVV|EWN|EYW|FAR|FAY|FNT|FPO|FSD|FSM|FWA|GGT|GRB|GRK|GRR|GTR|LAN|LEX|LFT|MBS|\"\n            r\"MDT|MDW|MGA|MGM|MHT|MLB|MLI|MLU|MOB|MSN|OAJ|PHF|PIA|ROA|RTB|SBN|SDF|SGF|SHV|TGU|TLH|DWC|INL|NIM|APN|BGM|\"\n            r\"BGR|CIU|CWA|ELM|ERI|ESC|ITH|MQT|NGO|PLN|SCE|TVC|YOW|RKS|HAV|ABR|CUL|FUK|LUN|SVO|REP|RHI|BRD|DAR|GUM|BTS|\"\n            r\"MEL|PPT|YHZ|ACA|BIS|BJI|BTM|CDC|CNY|COD|CPR|DIK|DLH|EKO|GCC|VSA|GFK|HIB|IMT|ISN|LNK|LSE|MOT|RAP|RST|YQR|\"\n            r\"YWG|YXE|CUU|OUA|ROR|SPN|GJT|IDA|JAC|KSC|PIH|SGU|TWF|VEL|AES|LPA|SPU|TOS|TRD|TRF|ORK|SNN|BLK|BOH|PGF|SEN|\"\n            r\"ELQ|TIF|TUU|YNB|HBE|ADD|LEJ|CDR|FMN|TTN|PIR|WRL|LBL|AIA|ALS|BKG|CYS|ILG|SOW|PGA|IGM|DDC|ATY|HON|UST|KEF|\"\n            r\"SFB|APW|CXI|NAN|HRL|LBB|AMA|MAF|CRP|SHG|ATK|BEG|TLT|CHU|HCR|KLG|RSH|SHX|KGX|AIN|EMK|SXP|CYF|EEK|BVA|HPB|\"\n            r\"LTN|KKH|PIK|KUK|KWK|KWN|KWT|MLL|NME|OOK|PQS|VAK|WTL|DRG|NUI|PIZ|CKD|LDE|RDV|SLQ|KPN|BZG|GDN|KRK|KTW|KUN|\"\n            r\"LDY|BKC|MJV|REU|CRL|NYO|CCF|KKA|AUK|KOT|CIA|SVQ|CHQ|GRO|RHO|BZR|GAL|RBY|BTI|BGY|POZ|RZE|TSF|WMI|WRO|HSL|\"\n            r\"KAL|NUL|AHO|BDS|SVA|CAG|GSE|NDR|PSR|PUY|WMO|RYG|TPS|TRS|ZAD|ZAZ|ANV|NRN|SCM|EIN|KYU|ORV|ELI|SKK|BIQ|FNI|\"\n            r\"RDZ|WBB|MOU|TUF|TLA|WAA|CFU|HHN|NUP|SDR|ABL|DNR|TOG|LEI|SXF|EBU|TNK|ATT|GAM|GLV|KTS|SHH|MYU|IAN|KGS|HYL|\"\n            r\"PHO|DLE|WLK|WTK|SZZ|KIR|TLL|CGA|OBU|KTB|SRV|AKI|XCR|WWT|AOI|BRQ|BVE|CIY|DTM|KVL|EFL|SMK|PIS|FKB|FMM|HAU|\"\n            r\"LNZ|LUZ|MMX|OSI|OSR|PDV|PEG|PMF|SCQ|SFT|SUF|TGD|TLN|TMP|VST|XRY|MTM|SFA|PGD|PIE|AZA|GRI|PVU|RFD|STC|LRD|\"\n            r\"MFE|SCK|SMX|HTS|YNG|IAG|SPI|TOL|LCK|BLV|CKB|HGR|OWB|PSM|ACI|HAK|LYA|TNC|DSN|KHN|KWE|SWA|HLD|TYN|LYI|LHW|\"\n            r\"CGO|INC|SJW|HIA|WNZ|AQG|BHY|CGD|LZO|TXN|CIF|HLH|NZH|RLK|TGO|WUA|XIL|FOC|YIW|KOW|MIG|DNH|IQN|JGN|YZY|LUR|\"\n            r\"JJN|DAT|MDG|TNA|BAV|CGQ|FUG|MWX|SHA|CIH|AAT|AKU|HMI|HTN|KCA|KHG|KRL|KRY|NLT|TCG|YIN|NAO|YIH|DUT|KLL|PIP|\"\n            r\"WSN|KFP|KVC|NLG|AKB|IKO|KQA|KCQ|KPV|IGG|EGX|AKL|ITO|LNY|MKK|PPG|SDJ|CTS|TAS|UGC|OVD|LCG|TFN|IKA|HUS|VEE|\"\n            r\"AET|KBC|ARC|BEL|CNF|MAO|REC|SSA|LJU|OKA|KLW|WWP|PPV|HYG|KCC|KPB|AHN|MKL|IPL|ELD|HOT|HNH|GST|SGY|HNS|HRO|\"\n            r\"SLN|OTH|PDT|TSE|TVF|EWB|HYA|MVY|MSS|OGS|GDV|GGW|HVR|OLF|SDY|ACK|AUG|BHB|LEB|PVC|RKD|RUT|SLK|KCL|PTH|DLA|\"\n            r\"AXA|CPX|MAZ|CGI|IRK|MWA|TBN|UIN|ILI|CYB|BZV|PNR|ANG|BFS|YYT|KIV|EOI|NDY|NRL|PPW|SOY|WRY|DLM|BLA|BJV|FNC|\"\n            r\"HER|CNM|LAM|LNS|VCT|CLM|ESD|BFI|RCE|WSX|FRD|LKE|FBS|YWH|DHB|LPS|KUL|LXR|JHM|HNM|MUE|ACY|AXM|LBE|TLC|ZSA|\"\n            r\"RAR|LWB|MCN|MEI|MSL|PIB|RJK|DCM|TUP|PMY|SLA|AEP|AGF|LUK|MMU|MBL|SAW|CFR|ADB|BIM|YTZ|ELH|YKS|CKH|CYX|IKS|\"\n            r\"ULK|FSP|ISB|LHE|KHI|AUR|LAI|LRT|UIP|GHB|MHH|SBH|SFG|TCB|TBS|HKB|FRU|OSS|CEK|KJA|KRR|OVB|SVX|SGC|ADL|CBR|\"\n            r\"DRW|PER|TSV|IAS|CGP|CCU|CXB|JSR|PDL|MAB|GYN|CMP|MQH|IMP|OIA|RDC|CKS|CDJ|SXO|GRP|NOU|WLS|VLI|FUT|FLO|SID|\"\n            r\"BVC|RUN|DZA|HHH|LYH|PGV|SBY|SLU|CAY|POA|CEG|ERF|PRN|AGB|XFW|GLH|ABI|ACT|AGU|ALO|AQP|ART|ASP|ASU|BFL|BJL|\"\n            r\"BPT|BRO|STZ|SXX|CHC|CLL|DIJ|ASB|PGX|LEH|NBE|AYT|HRG|SSH|CMI|CCC|COU|DRO|GCK|GGG|TEB|JLN|LAW|LCH|MHK|PBC|\"\n            r\"CWB|DBQ|QRO|KOE|ROW|SJT|PVK|SLP|SPS|TRC|TXK|TYR|HOG|VDA|ZCL|YQB|YQM|TOE|MOF|DRS|FLG|INN|KLX|SCY|LFW|CEC|\"\n            r\"JST|JHW|SHD|BJM|COO|NSI|ACV|MGW|BFD|DUJ|FKL|PKB|ASE|EGE|GUC|HDN|LAR|MTJ|PUB|YMM|CKY|FIH|HVN|IPT|AOO|ITM|\"\n            r\"BKW|CIC|CLD|OKJ|ROP|TKK|YAP|MAJ|LGK|PEN|CME|DGO|HOB|HUX|OAX|SLW|TAM|VER|CMX|EAU|KWA|PNI|KSA|SBP|YUM|TMS|\"\n            r\"FOE|MKG|JUL|KHH|PAH|YXU|LMT|MOD|RDD|LPY|VKO|VVI|LPB|MVD|SUX|YKF|NOS|TMM|MAR|GLO|RAI|VXE|PUS|CLJ|TGM|TSR|\"\n            r\"BOJ|CRA|DEB|IEV|SKP|VAR|ANR|DOL|EXI|KAE|LGG|PUQ|PMC|STM|KBV|LPQ|BGF|BKO|JIB|LBV|NDJ|NKC|LXA|SSG|KTT|CGK|\"\n            r\"LLW|NBS|IVL|LJG\",\n            aita_code,\n        )\n        is not None\n    )\n\n\n# It is highly recommended to use Pydantic models to define the input and output types of your tools.\n# The Pydantic models below belong to dummy tools, but illustrate what example travel-tools might look like.\nclass FlightDeal(pydantic.BaseModel):\n    airline: str\n    price: float\n    departure: str\n    arrival: str\n    duration: str\n    stops: int\n\n\nclass PackingChecklistItem(pydantic.BaseModel):\n    item: str\n    quantity: int\n    packed: bool\n\n\nclass Hotel(pydantic.BaseModel):\n    name: str\n    address: str\n    price_per_night: float\n    rating: float\n\n\nclass WeatherForecast(pydantic.BaseModel):\n    date: str\n    temperature: float\n    condition: str\n\n\nclass TravelCost(pydantic.BaseModel):\n    distance: float\n    fuel_efficiency: float\n    fuel_price: float\n    total_cost: float\n\n\nclass LocalRestaurant(pydantic.BaseModel):\n    name: str\n    address: str\n    cuisine: str\n    rating: float\n\n\nclass TouristAttraction(pydantic.BaseModel):\n    name: str\n    description: str\n    address: str\n    rating: float\n\n\nclass CurrencyExchangeRate(pydantic.BaseModel):\n    currency_from: str\n    currency_to: str\n    rate: float\n\n\nclass TravelItinerary(pydantic.BaseModel):\n    destinations: list[str]\n    duration: int\n    activities: list[str]\n\n\nclass TravelInsuranceOption(pydantic.BaseModel):\n    provider: str\n    plan_name: str\n    coverage_amount: float\n    price: float\n\n\nclass PublicTransportationRoute(pydantic.BaseModel):\n    route_number: str\n    start_point: str\n    end_point: str\n    schedule: str\n\n\nclass TravelRestriction(pydantic.BaseModel):\n    country: str\n    restriction_details: str\n    last_updated: str\n\n\nclass CarRentalService(pydantic.BaseModel):\n    company: str\n    car_model: str\n    price_per_day: float\n    availability: bool\n\n\nclass TravelAdvice(pydantic.BaseModel):\n    destination: str\n    advice: str\n    last_updated: str\n\n\nclass LocalEvent(pydantic.BaseModel):\n    name: str\n    location: str\n    date: str\n    description: str\n\n\n@tool\ndef search_best_flight_deals() -> list[FlightDeal]:\n    \"\"\"Search for the best flight deals.\"\"\"\n    return None\n\n\n@tool\ndef create_packing_checklist() -> list[PackingChecklistItem]:\n    \"\"\"Create a packing checklist.\"\"\"\n    return None\n\n\n@tool\ndef organize_travel_documents() -> None:\n    \"\"\"Organize all of your travel documents.\"\"\"\n    return None\n\n\n@tool\ndef setup_out_of_office_reply() -> None:\n    \"\"\"Set up an out-of-office email reply.\"\"\"\n    return None\n\n\n@tool\ndef find_hotel_by_location(location: str) -> list[Hotel]:\n    \"\"\"Find hotels in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_weather_forecast(destination: str) -> WeatherForecast:\n    \"\"\"Get the weather forecast for a travel destination\"\"\"\n    return None\n\n\n@tool\ndef calculate_travel_costs(distance: float, fuel_efficiency: float, fuel_price: float) -> TravelCost:\n    \"\"\"Calculate the travel costs based on distance, fuel efficiency, and fuel price\"\"\"\n    return None\n\n\n@tool\ndef search_local_restaurants(city: str) -> list[LocalRestaurant]:\n    \"\"\"Search for local restaurants in a given city\"\"\"\n    return None\n\n\n@tool\ndef find_tourist_attractions(destination: str) -> list[TouristAttraction]:\n    \"\"\"Find popular tourist attractions in a travel destination\"\"\"\n    return None\n\n\n@tool\ndef book_flight(ticket_info: dict) -> None:\n    \"\"\"Book a flight using the provided ticket information\"\"\"\n    return None\n\n\n@tool\ndef get_currency_exchange_rate(currency_from: str, currency_to: str) -> CurrencyExchangeRate:\n    \"\"\"Get the currency exchange rate between two currencies\"\"\"\n    return None\n\n\n@tool\ndef create_travel_itinerary(destinations: list, duration: int) -> TravelItinerary:\n    \"\"\"Create a travel itinerary based on a list of destinations and duration\"\"\"\n    return None\n\n\n@tool\ndef find_travel_insurance_options(traveler_info: dict) -> list[TravelInsuranceOption]:\n    \"\"\"Find travel insurance options based on traveler information\"\"\"\n    return None\n\n\n@tool\ndef get_public_transportation_routes(city: str) -> list[PublicTransportationRoute]:\n    \"\"\"Get public transportation routes in a specific city\"\"\"\n    return None\n\n\n@tool\ndef check_travel_restrictions(country: str) -> list[TravelRestriction]:\n    \"\"\"Check travel restrictions for a specific country\"\"\"\n    return None\n\n\n@tool\ndef find_car_rental_services(location: str) -> list[CarRentalService]:\n    \"\"\"Find car rental services in a specific location\"\"\"\n    return None\n\n\n@tool\ndef get_travel_advice(destination: str) -> list[TravelAdvice]:\n    \"\"\"Get travel advice for a specific destination\"\"\"\n    return None\n\n\n@tool\ndef find_local_events(city: str, date: str) -> list[LocalEvent]:\n    \"\"\"Find local events happening in a city on a specific date\"\"\"\n    return None\n",
    "description": "Set up an out-of-office email reply.",
    "embedding": [-0.03532901778817177, 0.011809133924543858, 0.03587883338332176, 0.034525249153375626, 0.03808083012700081, -0.05678606033325195, -0.05399782955646515, -0.003806974506005645, -0.025176439434289932, -0.06756649166345596, -0.03706228733062744, 0.049427349120378494, -0.029167864471673965, -0.015165282413363457, 0.08254098147153854, -0.018690546974539757, 0.08488225936889648, -0.05596127361059189, -0.005759627092629671, 0.0852012038230896, -0.028887592256069183, -0.04169530048966408, -0.08848614990711212, 0.02601260133087635, 0.040623921900987625, -0.033344708383083344, 0.04351600632071495, -0.005187653936445713, -0.09384280443191528, -0.02145965024828911, 0.010989495553076267, 0.007850473746657372, 0.009146599099040031, 0.01513214223086834, -0.014894533902406693, 0.05015651881694794, 0.08211588859558105, -0.03458183631300926, -0.0390443317592144, -0.03584727644920349, 0.00413050502538681, -0.01776793971657753, 0.031014977023005486, -0.012756486423313618, 0.004201722331345081, 0.01310201920568943, 0.04346263408660889, 0.06736227124929428, -0.0026754264254122972, 0.015557133592665195, 0.031040888279676437, -0.03814452141523361, -0.07099060714244843, 0.09538090974092484, 0.040387772023677826, 0.03342679888010025, 0.021937688812613487, 0.00922519899904728, 0.05543837696313858, -0.03163134679198265, 0.013699021190404892, -0.04881400242447853, -0.001338721252977848, 0.030199751257896423, -0.04356176033616066, 0.07415108382701874, -0.05456296727061272, 0.07277876883745193, 0.015706399455666542, -0.053376950323581696, -0.07658941298723221, -0.014609289355576038, -0.07503583282232285, 0.06596928834915161, 0.030430980026721954, 0.07511155307292938, -0.08359231799840927, -0.020532798022031784, 0.029913008213043213, 0.0924362912774086, -0.059615589678287506, -0.009080318734049797, -0.03441630303859711, 0.02140575461089611, 0.0029848841950297356, 0.011829872615635395, 0.03188394755125046, 0.038999542593955994, 0.09652676433324814, 0.06174853816628456, 0.03986852988600731, -0.010578092187643051, 0.0751132220029831, 0.008934840559959412, -0.04016581177711487, -0.005782014224678278, -0.020035622641444206, -0.013608104549348354, -0.06823305040597916, 0.0922635942697525, -0.016000745818018913, 0.04752769321203232, 0.03430192917585373, -0.1220811977982521, -0.01925746537744999, -0.03272451087832451, -0.009210348129272461, 0.008222227916121483, 0.0037829342763870955, -0.035254981368780136, -0.03862839937210083, -0.08864075690507889, -0.0021236359607428312, -0.07403860241174698, 0.02402435801923275, 0.019941622391343117, 0.03299810737371445, 0.047442562878131866, 0.007200869265943766, -0.010094618424773216, 0.08246928453445435, 0.02845883183181286, -0.12654712796211243, -0.09732946753501892, 0.04629390314221382, -0.03566078096628189, -0.005576533265411854, -0.02950986847281456, 0.010300373658537865, 0.12406634539365768, 0.07602068036794662, 0.08738557249307632, 0.0331585519015789, 0.004521796479821205, 0.03691892698407173, 0.013401470147073269, 0.022595545276999474, 0.029591381549835205, -0.021620063111186028, 0.042797934263944626, 0.1759324073791504, -0.12653250992298126, -0.03753906860947609, 0.06995128095149994, 0.029277071356773376, 0.09327074140310287, 0.07310768216848373, -0.016339775174856186, 0.023547055199742317, -0.13760842382907867, -0.012259302660822868, 0.028127694502472878, 0.02772720530629158, 0.050883710384368896, -0.02034631185233593, -0.024475179612636566, 0.05340795964002609, 0.004117534030228853, -0.024662956595420837, 0.005716072395443916, -0.031032059341669083, 0.04092086851596832, -0.02950645238161087, -0.0029600425623357296, -0.01214149221777916, -0.018925901502370834, -0.009776475839316845, 0.04190583527088165, -0.002533040940761566, -0.05129014328122139, 0.04246868938207626, -0.012460893020033836, 0.01372466515749693, 0.056696318089962006, 0.10443329066038132, 0.004272946622222662, 0.03757963329553604, 0.06024521589279175, 0.03738710284233093, 0.03944195806980133, -0.007771952077746391, 0.0007026951061561704, -0.07337397336959839, -0.02918252907693386, 0.036698903888463974, -0.04783564805984497, 0.12514227628707886, -0.008598600514233112, 0.06307416409254074, 0.04924080893397331, 0.024201741442084312, 0.035329826176166534, -0.03333135321736336, -0.009782111272215843, -0.021318631246685982, -0.053046490997076035, -0.06705022603273392, -0.04436458647251129, 0.06297449767589569, 0.00921133253723383, -0.04916263371706009, 0.02221263200044632, -0.08683569729328156, -0.020125294104218483, 0.007809110451489687, -0.038656894117593765, -0.017660290002822876, -0.07687730342149734, -0.02797631360590458, 0.06927141547203064, -0.0147747453302145, 0.003009882988408208, 0.06748009473085403, 0.08847591280937195, -0.006754097994416952, -0.03550945222377777, -0.0330883227288723, 0.05522696673870087, -0.06796057522296906, -0.05615904554724693, -0.0468294695019722, -0.013034376315772533, 0.04745786264538765, 8.947647736056258e-33, 0.050326988101005554, -0.038149312138557434, -0.107632577419281, -0.06539732962846756, 0.03797205165028572, 0.11190120875835419, 0.06697987765073776, 0.03896383196115494, 0.002476038644090295, 0.05227614566683769, -0.02359212189912796, 0.015007725916802883, 0.07247766852378845, 0.022143801674246788, 0.03544936329126358, -0.05189192295074463, 0.06101197004318237, 0.03514255955815315, -0.07579857110977173, 0.09539909660816193, -0.04954167827963829, -0.04690083488821983, -0.0998377725481987, 0.02484959177672863, -0.03711413964629173, 0.0027885721065104008, -0.006663535721600056, -0.013802876695990562, -0.0405317023396492, -0.004774835892021656, -0.04231444001197815, 0.05413850396871567, -0.06713297963142395, -0.04425206407904625, 0.03181251138448715, 0.041082702577114105, -0.04568067565560341, -0.0014637316344305873, 0.1147632747888565, 0.04598279297351837, 0.09559235721826553, 0.0305305365473032, -0.04556433483958244, 0.07862184941768646, 0.04146411269903183, -0.04844478517770767, -0.05120176076889038, -0.08121182769536972, -0.04567284509539604, 0.011263994500041008, -0.09650660306215286, 0.0066295526921749115, 0.09799133241176605, -0.015430918894708157, -0.07300152629613876, -0.03960295394062996, 0.018926668912172318, -0.09723097085952759, -0.043367840349674225, -0.007533262483775616, -0.06945323944091797, -0.05010085925459862, 0.09913128614425659, -0.001738638849928975, 0.027319371700286865, 0.014397259801626205, 0.07409785687923431, 0.03160524740815163, 0.048012346029281616, -0.06939994543790817, 0.04136655107140541, -0.04357583820819855, -0.020173462107777596, -0.017440902069211006, -0.003988710697740316, -0.015589967370033264, -0.04764029011130333, -0.11922597885131836, -0.08592870086431503, -0.02587578445672989, -0.004371396731585264, -0.007776638958603144, 0.07178564369678497, 0.02327015995979309, -0.028183655813336372, -0.017799699679017067, -0.00946318544447422, -0.017663855105638504, 0.06428276002407074, -0.020052343606948853, -0.0029503365512937307, 0.001510896603576839, 0.02244318276643753, 0.01732444576919079, 0.008080300875008106, 3.4776380295807317e-32, -0.03398193046450615, 0.025428932160139084, 0.0874292179942131, -0.01567392610013485, 0.009759757667779922, 0.005741186905652285, 0.031179355457425117, -0.005155223421752453, -0.07946449518203735, -0.08899278193712234, -0.06319329887628555, -0.12222038954496384, -0.001441923901438713, 0.06331970542669296, 0.056646090000867844, 0.023183699697256088, -0.038552477955818176, -0.06783487647771835, -0.008061989210546017, -0.016538988798856735, -0.007426686119288206, 0.024596840143203735, 0.028737632557749748, 0.00295680807903409, 0.022153902798891068, 0.017858782783150673, -0.03731612116098404, 0.03752419725060463, -0.08601547032594681, 0.07755337655544281, -0.05350872874259949, 0.004697289317846298, -0.053881533443927765, -0.00837971642613411, -0.09013381600379944, 0.013836035504937172, 0.00112385384272784, 0.00787569023668766, -0.04593934118747711, -0.016277119517326355, -0.04534104838967323, -0.08353046327829361, -0.01385044027119875, 0.04538651183247566, 0.07080014795064926, -0.0803084671497345, 0.04474889859557152, -0.00270164106041193, -0.022141220048069954, 0.023144615814089775, -0.06383317708969116, -0.060157325118780136, 0.02147660404443741, 0.08883298188447952, 0.007523805368691683, 0.02137266844511032, -0.02726547047495842, -0.11253241449594498, -0.01989961974322796, 0.030380012467503548, -0.05903076380491257, 0.08880549669265747, -0.016842350363731384, -0.018280740827322006],
    "identifier": "src/resources/agent_c/tools/python_travel_tools.py:setup_out_of_office_reply:git_6f20a42cc1b286331a47d329977347c2c0ff80d9",
    "name": "setup_out_of_office_reply",
    "record_kind": "python_function",
    "source": "src/resources/agent_c/tools/python_travel_tools.py",
    "version":
    {
      "identifier": "6f20a42cc1b286331a47d329977347c2c0ff80d9",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.919591Z"
    }
  },
  {
    "description": "Create a new travel-rewards member.",
    "embedding": [0.04568232595920563, -0.014476526528596878, 0.022388439625501633, 0.04441751539707184, 0.0008759223273955286, 0.023003429174423218, 0.08113747835159302, 0.016045397147536278, -0.040461063385009766, -0.045624081045389175, -0.01636061817407608, -0.07041459530591965, -0.03097439371049404, 0.0806983932852745, 0.06317055225372314, -0.013839330524206161, -0.0074231429025530815, 0.07364515960216522, 0.02876008301973343, 0.030428268015384674, -0.04759283736348152, -0.08789055794477463, -0.0003468515642452985, 0.0995553657412529, 0.02346927486360073, -0.04580485075712204, -0.014768204651772976, 0.06792726367712021, 0.04843689501285553, -0.03583790734410286, 0.012875637970864773, 0.043491121381521225, -0.026065215468406677, -0.027771905064582825, 0.03378479555249214, 0.08361627906560898, -0.010984359309077263, -0.00568902725353837, -0.06531105935573578, 0.0028731259517371655, -0.018295759335160255, -0.10166449099779129, -0.041565217077732086, 0.008353492245078087, 0.037185780704021454, -0.08920451253652573, -0.020187534391880035, 0.01838498003780842, 0.07880248129367828, -0.045537661761045456, 0.06477738171815872, -0.06999257206916809, 0.023450972512364388, 0.006402393337339163, 0.006265056785196066, -0.04091528058052063, 0.035407308489084244, -0.09120842069387436, -0.03635776415467262, -0.030704401433467865, -0.036457087844610214, -0.05343716964125633, 0.03395986557006836, 0.0006034514517523348, -0.09811167418956757, -0.05789876729249954, -0.1051771491765976, 0.02184158004820347, 0.021972618997097015, -0.04393526911735535, 0.026556165888905525, 0.030060848221182823, -0.02478482387959957, 0.07135453820228577, 0.010685001499950886, 0.030877437442541122, -0.0913102850317955, 0.03490622714161873, 0.028483403846621513, 0.013271785341203213, -0.01860605739057064, -0.00334118097089231, -0.05108833312988281, 0.01467627752572298, 0.06408540159463882, -0.035825785249471664, 0.029486890882253647, 0.006732758600264788, -0.07281247526407242, 0.049676645547151566, 0.012722917832434177, -0.0012068185023963451, 0.11121019721031189, 0.06722287833690643, -0.09833771735429764, -0.01931583322584629, -0.06971923261880875, 0.0319204144179821, 0.0007743696332909167, 0.08218789845705032, 0.036537881940603256, 0.07990146428346634, 0.017931664362549782, 0.051074326038360596, -0.06918510049581528, -0.03480297327041626, -0.0074005573987960815, 0.00200882856734097, 0.11546237021684647, -0.048424024134874344, -0.05809789523482323, 0.0395750030875206, 0.02239498868584633, 0.010306493379175663, -0.05481035262346268, 0.07091755419969559, -0.14574746787548065, 0.03522105887532234, 0.02404659055173397, 0.013787193223834038, 0.06413578987121582, -0.0851772204041481, -0.009651978500187397, 0.05186113715171814, -0.08119706809520721, -0.016198083758354187, 0.09504720568656921, 0.0058552296832203865, -0.0030430639162659645, 0.13270071148872375, 0.021392924711108208, 0.14516033232212067, -0.014348176307976246, 0.0015042006270959973, -0.07735604792833328, -0.07367350161075592, -0.05184305086731911, -0.0915629118680954, -0.02719026431441307, 0.026786433532834053, 0.11581534892320633, 0.03137276694178581, -0.05377277359366417, -0.032855838537216187, -0.00033632753184065223, -0.07027804106473923, 0.10928882658481598, -0.03564155474305153, 0.05366222932934761, -0.004458311479538679, -0.0006564928335137665, -0.06588104367256165, 0.054137181490659714, 0.034000467509031296, -0.02505643479526043, -0.016179552301764488, 0.06823386996984482, -0.007115968037396669, -0.0048965634778141975, 0.07262937724590302, -0.05718943849205971, -0.0016916574677452445, 0.00967371091246605, 0.015858536586165428, 0.025069598108530045, 0.020030377432703972, -0.03810301050543785, -0.023867623880505562, -0.0640791803598404, -0.04520789161324501, -0.07621897757053375, 0.038417719304561615, -0.019481953233480453, 0.012668152339756489, 0.15156765282154083, 0.025187898427248, 0.045578453689813614, 0.11599095165729523, -0.048668272793293, -0.10221319645643234, 0.020834026858210564, -0.03828022629022598, -0.09251026809215546, -0.07977906614542007, 0.031388238072395325, 0.022400179877877235, -0.01208613719791174, -0.08306903392076492, 0.09947951138019562, -0.0034298929385840893, -0.005725592840462923, 0.055236443877220154, -0.03797747939825058, -0.02749823033809662, 0.026644349098205566, -0.010259749367833138, -0.019045669585466385, -0.009274715557694435, 0.041361499577760696, 0.025057649239897728, -0.08593551814556122, -0.004163021687418222, -0.0217710230499506, -0.03602740168571472, 0.010491680353879929, 0.0490831695497036, 0.02822188287973404, -0.05995844304561615, -0.0717681422829628, 0.019095944240689278, 0.04328399896621704, 0.06443578004837036, 0.06483989208936691, -0.04901628568768501, -0.004944817628711462, 0.0005941290874034166, -0.03094293549656868, 0.004462655168026686, -0.007272970397025347, -0.003785660956054926, 0.0031332664657384157, 0.03623538836836815, -0.034919846802949905, 1.1508344629887529e-32, -0.011069431900978088, -0.03555769473314285, 0.07040110230445862, -0.042924925684928894, 0.037282347679138184, -0.05041036009788513, -0.001391892321407795, 0.013110494241118431, -0.04554373398423195, 0.06253934651613235, -0.09872705489397049, 0.039102714508771896, 0.053132008761167526, 0.05213821306824684, -0.08302042633295059, -0.10624677687883377, 0.049795083701610565, 0.08622361719608307, -0.00031741446582600474, 0.006930597126483917, -0.00686958571895957, 0.13469809293746948, -0.06338555365800858, -0.015353118069469929, 0.0636928603053093, 0.04314049333333969, 0.07613064348697662, -0.06229577958583832, 0.004928343929350376, 0.011785908602178097, 0.03319898247718811, -0.0159002598375082, -0.07846157997846603, -0.03547969087958336, -0.03152037411928177, 0.03787357732653618, -0.0020107757300138474, 5.1459104724926874e-05, 0.003334217704832554, 0.11346445232629776, -0.0017792758299037814, -0.01165852602571249, 0.011802907101809978, 0.03502311930060387, 0.03995789960026741, 0.11137901246547699, 0.05355420708656311, -0.04551338404417038, -0.021540002897381783, -0.030136924237012863, -0.056171923875808716, -0.02358834818005562, 0.06619738042354584, 0.03437434509396553, -0.024728737771511078, 0.07117142528295517, 0.00543604139238596, -0.10536762326955795, 0.0560963936150074, -0.0032087594736367464, -0.05225950852036476, -0.07660499215126038, 0.049248628318309784, 0.0730472132563591, 0.030882254242897034, -0.02441323734819889, -0.0006999924662522972, 0.07235304266214371, -0.040609706193208694, -0.0955241322517395, -0.03492952138185501, 0.012106833979487419, 0.029524480924010277, -0.05187275633215904, -0.05173557624220848, -0.057294074445962906, 0.08771578222513199, 0.07194019109010696, -0.03712577372789383, -0.02731739543378353, -0.00700382562354207, 0.02251400798559189, 0.09484746307134628, 0.003245567437261343, 0.019405337050557137, -0.01487048901617527, 0.04762483760714531, -0.010038722306489944, -0.0406365767121315, -0.01765146479010582, -0.02334856428205967, -0.012479093857109547, 0.0633854940533638, 0.04007529839873314, -0.007041719742119312, 1.7739831936112453e-32, -0.034552350640296936, -0.01283838227391243, -0.033379193395376205, 0.0867779552936554, 0.08427616953849792, -0.003412181045860052, -0.0052944933995604515, -0.040193330496549606, 0.01277749054133892, 0.0481712706387043, 0.030214523896574974, -0.06181376427412033, 0.06336023658514023, 0.006081948988139629, 0.019475430250167847, -0.018207348883152008, -0.029271293431520462, 0.07195200771093369, -0.033409446477890015, -0.0257492084056139, -0.009924598038196564, 0.06856831908226013, 0.05624397099018097, -0.012143058702349663, -0.02824595756828785, 0.004133008420467377, -0.031213732436299324, -0.0023060059174895287, 0.037858348339796066, -0.10060723125934601, -0.10605465620756149, 0.0056424858048558235, 0.001607496989890933, -0.01199342217296362, 0.007101201917976141, -0.031086983159184456, -0.027229826897382736, -0.0112083088606596, -0.0159000251442194, 0.029079938307404518, -0.08485884219408035, 0.033529769629240036, 0.04860151559114456, 0.017679449170827866, -0.04100154712796211, 0.07921264320611954, -0.017126403748989105, -0.0887775868177414, 0.006182422395795584, -0.004677826538681984, -0.0016351955709978938, -0.028508838266134262, 0.0589589960873127, -0.00832915399223566, 0.016238704323768616, -0.02915242128074169, -0.0422811396420002, -0.0494646281003952, -0.009477730840444565, -0.03340527415275574, 0.0028422779869288206, -0.03423682227730751, -0.01109039131551981, 0.06070176884531975],
    "identifier": "src/resources/agent_c/tools/rewards_service.yaml:create_new_member_create_post:git_c33204b0bb39c954e10dbcc1e930cee814561945",
    "name": "create_new_member_create_post",
    "operation":
    {
      "method": "post",
      "path": "/create"
    },
    "record_kind": "http_request",
    "source": "src/resources/agent_c/tools/rewards_service.yaml",
    "specification":
    {
      "filename": "src/endpoints/rewards_spec.json"
    },
    "version":
    {
      "identifier": "c33204b0bb39c954e10dbcc1e930cee814561945",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.974612Z"
    }
  },
  {
    "description": "Get the rewards associated with a member.",
    "embedding": [-0.024517543613910675, 0.0036878553219139576, -0.02638339437544346, 0.028614524751901627, -0.031154289841651917, 0.032136622816324234, 0.15884287655353546, 0.014542053453624249, 0.0053199115209281445, -0.0439927875995636, 0.006892908364534378, -0.06947898864746094, -0.014091037213802338, 0.08031154423952103, -0.002347429981455207, 0.003338549053296447, 0.04464346542954445, 0.0813320130109787, 0.07013458758592606, -0.020605169236660004, -0.02647007815539837, -0.12520325183868408, 0.03196147084236145, 0.019161541014909744, 0.032931674271821976, -0.11701944470405579, -0.03912744298577309, -0.002388489432632923, 0.01861780881881714, -0.012858330272138119, 0.04246539995074272, -0.017182888463139534, 0.06405405700206757, -0.006508956663310528, -0.00906353909522295, 0.08663687855005264, 0.028242971748113632, 0.027027953416109085, -0.054992418736219406, -0.0064839208498597145, 0.004936050157994032, -0.07521515339612961, -0.09106326848268509, 0.04861224442720413, 0.043474603444337845, -0.07387789338827133, -0.02250259555876255, -0.08678450435400009, 0.008522256277501583, -0.030410898849368095, 0.0541924387216568, -0.021327244117856026, 0.06071881949901581, 0.09203172475099564, 0.05256064981222153, 0.035970289260149, 0.003942643757909536, -0.06645939499139786, -0.056436970829963684, -0.0019124515820294619, -0.07051310688257217, -0.037515152245759964, -0.04453074187040329, -0.00431720819324255, -0.0222505871206522, -0.05353076756000519, -0.07995939999818802, 0.025775857269763947, -0.01743803732097149, -0.09608615189790726, 0.005831746384501457, -0.036709196865558624, 0.00996541790664196, 0.012467703782022, 0.008933874778449535, 0.06427597999572754, -0.04920702055096626, -0.03454377129673958, 0.006615405436605215, -0.00681125046685338, -0.06750927865505219, 0.04430881887674332, -0.003794644959270954, -0.056501828134059906, 0.104703389108181, -0.009073501452803612, 0.058904774487018585, -0.01611684262752533, 0.05884409323334694, 0.07120173424482346, -0.014439391903579235, 0.08952543884515762, -0.008648999035358429, -0.023501047864556313, -0.04618776589632034, 0.022523559629917145, -0.04513103887438774, -0.027292432263493538, 0.027543935924768448, 0.12031315267086029, -0.032752107828855515, 0.08172153681516647, 0.011505438946187496, -0.022527135908603668, -0.03176571801304817, -0.047210194170475006, -0.03985835984349251, 0.012051342986524105, 0.04059417545795441, -0.0785653367638588, -0.0815860703587532, 0.03691460192203522, 0.03845326974987984, 0.0030834467615932226, 0.03056245483458042, 0.014547786675393581, -0.058722127228975296, 0.0008105886518023908, 0.029949629679322243, 0.019830046221613884, 0.09940045326948166, -0.00333525612950325, 0.02390654757618904, 0.07813722640275955, -0.05318881943821907, -0.017564324662089348, 0.05854525789618492, -0.025103768333792686, 0.06739486753940582, 0.043748874217271805, -0.002512766281142831, 0.08737396448850632, -0.04717561602592468, 0.01243614312261343, 0.01722651533782482, -0.10678946226835251, 0.013798205181956291, -0.02102082222700119, -0.08434619754552841, 0.056361887603998184, 0.12044516950845718, -0.036147862672805786, -0.05664719268679619, -0.02316797524690628, -0.06574223190546036, -0.009658723138272762, 0.06739181280136108, -0.016054561361670494, 0.027622029185295105, -0.034393563866615295, 0.05348888784646988, 0.016145620495080948, 0.031245354562997818, 0.03662566840648651, -0.0342630110681057, -0.0012404429726302624, 0.026388000696897507, 0.008515303023159504, -0.023837054148316383, -0.04680183157324791, -0.049802109599113464, -0.06303498148918152, 0.032551638782024384, 0.04854283854365349, 0.02219274640083313, -0.016515584662556648, 0.025422770529985428, -0.07109000533819199, -0.016336053609848022, -0.04253997653722763, 0.01432731281965971, -0.010029646568000317, -0.07229124009609222, 0.018104853108525276, 0.07444613426923752, 0.025878068059682846, 0.056983236223459244, 0.07367125153541565, 0.02219553478062153, -0.054197877645492554, -0.03740832209587097, 0.02908533439040184, -0.046859391033649445, -0.050078898668289185, 0.04817519336938858, 0.08231903612613678, -0.020024143159389496, -0.023049162700772285, 0.06836523860692978, -0.049628615379333496, -0.006646134424954653, -0.04085543006658554, -0.13506601750850677, 0.012585097923874855, 0.03573593497276306, -0.05530991777777672, 0.027501046657562256, -0.03330264240503311, 0.0042753336019814014, 0.03973262012004852, -0.009363481774926186, -0.01781252585351467, -0.05442345142364502, 0.019961945712566376, -0.020952755585312843, -0.045881930738687515, -0.04986196011304855, -0.044438209384679794, -0.019674455747008324, -0.05509962886571884, 0.02061067521572113, 0.05454590916633606, 0.06195973604917526, 0.017079422250390053, 0.07135502249002457, -0.02840551920235157, -0.07290937751531601, -0.04389335960149765, -0.07924478501081467, 0.005863111931830645, 0.03417770192027092, -0.006966232322156429, -0.05727865546941757, 1.6675915509070217e-32, -0.03358627110719681, -0.021995393559336662, 0.09908808022737503, -0.0665542259812355, 0.047851573675870895, 0.0027801732067018747, 0.008687156252563, 0.057638198137283325, -0.0589962862432003, 0.02926405519247055, -0.032123956829309464, 0.07284543663263321, -0.02577069401741028, 0.07137075811624527, 0.017123019322752953, -0.07941774278879166, -0.007800099439918995, 0.1263510137796402, 0.022736279293894768, 0.0024486887268722057, -0.062415603548288345, 0.11216607689857483, -0.0032349901739507914, 0.032425656914711, 0.049918029457330704, 0.005513796117156744, 0.01937994360923767, -0.1091078668832779, -0.03223457187414169, -0.02277698926627636, 0.06650859117507935, -0.09612233936786652, -0.053407613188028336, 0.04979944974184036, -0.04711693152785301, -0.021194228902459145, 0.03214675560593605, 0.011033513583242893, 0.015662044286727905, -0.02617019973695278, 0.009116961620748043, -0.05730409547686577, -0.048417653888463974, 0.057170573621988297, -0.021044453606009483, 0.05395958200097084, 0.015064590610563755, -0.042366351932287216, -0.0555969774723053, 0.02326628752052784, -0.00862051360309124, -0.04589768871665001, 0.14993777871131897, 0.060239486396312714, 0.013716131448745728, 0.06934816390275955, -0.042201921343803406, -0.057160988450050354, 0.09265515953302383, 0.04351520165801048, -0.037655603140592575, -0.04480772465467453, -0.041101694107055664, 0.09614600241184235, -0.040463969111442566, -0.0025620372034609318, 0.0014498734381049871, 0.09203461557626724, -0.043729279190301895, -0.01931786723434925, -0.05237865820527077, 0.030356066301465034, 0.022169234231114388, -0.07213480770587921, -0.06290514022111893, 0.04180533066391945, -0.0011648170184344053, 0.05576576292514801, -0.0009528108639642596, -0.041041817516088486, -0.07720057666301727, -0.031784411519765854, 0.09170570224523544, 0.013133550994098186, -0.025995418429374695, -0.005196674726903439, 0.09335608035326004, 0.06130940094590187, 0.02910487912595272, -0.051236700266599655, 0.00469921063631773, -0.016903065145015717, 0.04843723773956299, -0.012121290899813175, 0.02120601385831833, 2.2714463784706894e-32, -0.008236976340413094, 0.008620534092187881, -0.018194224685430527, 0.09470025449991226, 0.04479498788714409, 0.056906476616859436, -0.05694909021258354, -0.013512520119547844, 0.026024360209703445, 0.06514185667037964, 0.010198961943387985, -0.06758181005716324, 0.004685891792178154, -0.05135715752840042, 0.0843137577176094, -0.041528791189193726, -0.04414020851254463, 0.06090151518583298, -0.03781380131840706, -0.06677720695734024, 0.03715306520462036, 0.06863535195589066, 0.03843457251787186, -0.03429781645536423, -0.0830615684390068, 0.10005515813827515, -0.01769416593015194, 0.012973503209650517, 0.04801409691572189, 0.005122130736708641, -0.014949178323149681, 0.0014774095034226775, 0.05927478149533272, -0.0804755836725235, 0.09882999956607819, 0.07851438969373703, -0.015032823197543621, -0.0777350589632988, 0.01722528785467148, 0.07792965322732925, -0.03899582847952843, 0.00970054604113102, 0.006840091198682785, 0.004044064786285162, 0.020405907183885574, 0.07104093581438065, -0.07526220381259918, -0.10223807394504547, 0.07055631279945374, -0.045679692178964615, -0.02343131974339485, -0.058604996651411057, -0.018330249935388565, -0.015929682180285454, 0.03245193883776665, -0.03147854283452034, 0.07030690461397171, -0.04010700061917305, 0.10513118654489517, -0.06288831681013107, 0.04340990260243416, -0.011023061349987984, -0.05169234052300453, 0.011890404857695103],
    "identifier": "src/resources/agent_c/tools/rewards_service.yaml:get_member_rewards_rewards__member_id__get:git_c33204b0bb39c954e10dbcc1e930cee814561945",
    "name": "get_member_rewards_rewards__member_id__get",
    "operation":
    {
      "method": "get",
      "path": "/rewards/{member_id}"
    },
    "record_kind": "http_request",
    "source": "src/resources/agent_c/tools/rewards_service.yaml",
    "specification":
    {
      "filename": "src/endpoints/rewards_spec.json"
    },
    "version":
    {
      "identifier": "c33204b0bb39c954e10dbcc1e930cee814561945",
      "is_dirty": false,
      "timestamp": "2024-11-01T17:21:02.974612Z"
    }
  }],
  "kind": "tool",
  "library_version": "v0.0.0-0-g0",
  "schema_version": "0.0.0",
  "source_dirs": ["src/resources/agent_c/tools"],
  "version":
  {
    "identifier": "87d049f0efbd6597f7ace74a18957eabe9522dc3",
    "is_dirty": false,
    "timestamp": "2024-11-01T17:21:02.709492Z"
  }
}
